!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
.c.h	Makefile.am	/^.c.h:$/;"	t
ACLOCAL_AMFLAGS	Makefile.am	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACPresence	BatteryMeter.h	/^} ACPresence;$/;"	t	typeref:enum:ACPresence_
ACPresence_	BatteryMeter.h	/^typedef enum ACPresence_ {$/;"	g
AC_ABSENT	BatteryMeter.h	/^   AC_ABSENT,$/;"	e	enum:ACPresence_
AC_ERROR	BatteryMeter.h	/^   AC_ERROR$/;"	e	enum:ACPresence_
AC_PRESENT	BatteryMeter.h	/^   AC_PRESENT,$/;"	e	enum:ACPresence_
AM_CFLAGS	Makefile.am	/^AM_CFLAGS = -pedantic -Wall $(wextra_flag) -std=c99 -D_XOPEN_SOURCE_EXTENDED -DSYSCONFDIR=\\"$(s/;"	m
AM_CPPFLAGS	Makefile.am	/^AM_CPPFLAGS = -DNDEBUG$/;"	m
AM_LDFLAGS	Makefile.am	/^AM_LDFLAGS =$/;"	m
ANY	scripts/MakeHeader.py	/^ANY=1$/;"	v
AUTHORS	htop.1.in	/^.SH "AUTHORS"$/;"	s	title:HTOP
AUTOMAKE_OPTIONS	Makefile.am	/^AUTOMAKE_OPTIONS = subdir-objects$/;"	m
Action_follow	Action.c	/^Htop_Reaction Action_follow(State* st) {$/;"	f	typeref:typename:Htop_Reaction
Action_pickFromVector	Action.c	/^Object* Action_pickFromVector(State* st, Panel* list, int x) {$/;"	f	typeref:typename:Object *
Action_runSetup	Action.c	/^static void Action_runSetup(Settings* settings, const Header* header, ProcessList* pl) {$/;"	f	typeref:typename:void	file:
Action_setBindings	Action.c	/^void Action_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Action_setSortKey	Action.c	/^Htop_Reaction Action_setSortKey(Settings* settings, ProcessField sortKey) {$/;"	f	typeref:typename:Htop_Reaction
Action_setUserOnly	Action.c	/^bool Action_setUserOnly(const char* userName, uid_t* userId) {$/;"	f	typeref:typename:bool
Affinity	Affinity.h	/^} Affinity;$/;"	t	typeref:struct:Affinity_
AffinityPanel_class	AffinityPanel.c	/^PanelClass AffinityPanel_class = {$/;"	v	typeref:typename:PanelClass
AffinityPanel_eventHandler	AffinityPanel.c	/^static HandlerResult AffinityPanel_eventHandler(Panel* this, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
AffinityPanel_getAffinity	AffinityPanel.c	/^Affinity* AffinityPanel_getAffinity(Panel* this, ProcessList* pl) {$/;"	f	typeref:typename:Affinity *
AffinityPanel_new	AffinityPanel.c	/^Panel* AffinityPanel_new(ProcessList* pl, Affinity* affinity) {$/;"	f	typeref:typename:Panel *
Affinity_	Affinity.h	/^typedef struct Affinity_ {$/;"	s
Affinity_add	Affinity.c	/^void Affinity_add(Affinity* this, int id) {$/;"	f	typeref:typename:void
Affinity_delete	Affinity.c	/^void Affinity_delete(Affinity* this) {$/;"	f	typeref:typename:void
Affinity_get	Affinity.c	/^Affinity* Affinity_get(Process* proc, ProcessList* pl) {$/;"	f	typeref:typename:Affinity *
Affinity_new	Affinity.c	/^Affinity* Affinity_new(ProcessList* pl) {$/;"	f	typeref:typename:Affinity *
Affinity_set	Affinity.c	/^bool Affinity_set(Process* proc, Affinity* this) {$/;"	f	typeref:typename:bool
AllCPUs2Meter_class	CPUMeter.c	/^MeterClass AllCPUs2Meter_class = {$/;"	v	typeref:typename:MeterClass
AllCPUsMeter_class	CPUMeter.c	/^MeterClass AllCPUsMeter_class = {$/;"	v	typeref:typename:MeterClass
AllCPUsMeter_done	CPUMeter.c	/^static void AllCPUsMeter_done(Meter* this) {$/;"	f	typeref:typename:void	file:
AllCPUsMeter_getRange	CPUMeter.c	/^static void AllCPUsMeter_getRange(Meter* this, int* start, int* count) {$/;"	f	typeref:typename:void	file:
AllCPUsMeter_init	CPUMeter.c	/^static void AllCPUsMeter_init(Meter* this) {$/;"	f	typeref:typename:void	file:
AllCPUsMeter_updateMode	CPUMeter.c	/^static void AllCPUsMeter_updateMode(Meter* this, int mode) {$/;"	f	typeref:typename:void	file:
AllocThis	Object.h	/^#define AllocThis(/;"	d
Arg	MainPanel.h	/^} Arg;$/;"	t	typeref:union:__anond41838d0010a
As_InfoScreen	InfoScreen.h	/^#define As_InfoScreen(/;"	d
As_Meter	Meter.h	/^#define As_Meter(/;"	d
As_Panel	Panel.h	/^#define As_Panel(/;"	d
As_Process	Process.h	/^#define As_Process(/;"	d
AvailableColumnsFunctions	AvailableColumnsPanel.c	/^static const char* const AvailableColumnsFunctions[] = {"      ", "      ", "      ", "      ", /;"	v	typeref:typename:const char * const[]	file:
AvailableColumnsPanel	AvailableColumnsPanel.h	/^} AvailableColumnsPanel;$/;"	t	typeref:struct:AvailableColumnsPanel_
AvailableColumnsPanel_	AvailableColumnsPanel.h	/^typedef struct AvailableColumnsPanel_ {$/;"	s
AvailableColumnsPanel_class	AvailableColumnsPanel.c	/^PanelClass AvailableColumnsPanel_class = {$/;"	v	typeref:typename:PanelClass
AvailableColumnsPanel_delete	AvailableColumnsPanel.c	/^static void AvailableColumnsPanel_delete(Object* object) {$/;"	f	typeref:typename:void	file:
AvailableColumnsPanel_eventHandler	AvailableColumnsPanel.c	/^static HandlerResult AvailableColumnsPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
AvailableColumnsPanel_new	AvailableColumnsPanel.c	/^AvailableColumnsPanel* AvailableColumnsPanel_new(Panel* columns) {$/;"	f	typeref:typename:AvailableColumnsPanel *
AvailableMetersPanel	AvailableMetersPanel.h	/^} AvailableMetersPanel;$/;"	t	typeref:struct:AvailableMetersPanel_
AvailableMetersPanel_	AvailableMetersPanel.h	/^typedef struct AvailableMetersPanel_ {$/;"	s
AvailableMetersPanel_addMeter	AvailableMetersPanel.c	/^static inline void AvailableMetersPanel_addMeter(Header* header, Panel* panel, MeterClass* type,/;"	f	typeref:typename:void	file:
AvailableMetersPanel_class	AvailableMetersPanel.c	/^PanelClass AvailableMetersPanel_class = {$/;"	v	typeref:typename:PanelClass
AvailableMetersPanel_delete	AvailableMetersPanel.c	/^static void AvailableMetersPanel_delete(Object* object) {$/;"	f	typeref:typename:void	file:
AvailableMetersPanel_eventHandler	AvailableMetersPanel.c	/^static HandlerResult AvailableMetersPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
AvailableMetersPanel_new	AvailableMetersPanel.c	/^AvailableMetersPanel* AvailableMetersPanel_new(Settings* settings, Header* header, Panel* leftMe/;"	f	typeref:typename:AvailableMetersPanel *
BAR_BORDER	CRT.h	/^   BAR_BORDER,$/;"	e	enum:ColorElements_
BAR_METERMODE	Meter.h	/^   BAR_METERMODE,$/;"	e	enum:__anon1f0952f80103
BAR_SHADOW	CRT.h	/^   BAR_SHADOW,$/;"	e	enum:ColorElements_
BATTERY	CRT.h	/^   BATTERY,$/;"	e	enum:ColorElements_
BAT_ERR	linux/Battery.c	/^static enum { BAT_PROC, BAT_SYS, BAT_ERR } Battery_method = BAT_PROC;$/;"	e	enum:__anon087974300103	file:
BAT_PROC	linux/Battery.c	/^static enum { BAT_PROC, BAT_SYS, BAT_ERR } Battery_method = BAT_PROC;$/;"	e	enum:__anon087974300103	file:
BAT_SYS	linux/Battery.c	/^static enum { BAT_PROC, BAT_SYS, BAT_ERR } Battery_method = BAT_PROC;$/;"	e	enum:__anon087974300103	file:
BLOCKED	linux/LinuxProcess.h	/^   BLOCKED = 31,$/;"	e	enum:UnsupportedProcessFields
BOUNDS	linux/LinuxProcessList.c	/^      #define BOUNDS(/;"	d	file:
BREAK_LOOP	Panel.h	/^   BREAK_LOOP  = 0x04,$/;"	e	enum:HandlerResult_
BUILT_SOURCES	Makefile.am	/^BUILT_SOURCES = $(myhtopheaders) $(myhtopplatheaders)$/;"	m
BarMeterMode	Meter.c	/^static MeterMode BarMeterMode = {$/;"	v	typeref:typename:MeterMode	file:
BarMeterMode_characters	Meter.c	/^static const char BarMeterMode_characters[] = "|#*@$%&.";$/;"	v	typeref:typename:const char[]	file:
BarMeterMode_draw	Meter.c	/^static void BarMeterMode_draw(Meter* this, int x, int y, int w) {$/;"	f	typeref:typename:void	file:
BatteryMeter_attributes	BatteryMeter.c	/^int BatteryMeter_attributes[] = {$/;"	v	typeref:typename:int[]
BatteryMeter_class	BatteryMeter.c	/^MeterClass BatteryMeter_class = {$/;"	v	typeref:typename:MeterClass
BatteryMeter_updateValues	BatteryMeter.c	/^static void BatteryMeter_updateValues(Meter * this, char *buffer, int len) {$/;"	f	typeref:typename:void	file:
Battery_cacheIsOnAC	linux/Battery.c	/^static ACPresence Battery_cacheIsOnAC = 0;$/;"	v	typeref:typename:ACPresence	file:
Battery_cacheLevel	linux/Battery.c	/^static double Battery_cacheLevel = 0;$/;"	v	typeref:typename:double	file:
Battery_cacheTime	linux/Battery.c	/^static time_t Battery_cacheTime = 0;$/;"	v	typeref:typename:time_t	file:
Battery_getData	darwin/Battery.c	/^void Battery_getData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void
Battery_getData	dragonflybsd/Battery.c	/^void Battery_getData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void
Battery_getData	freebsd/Battery.c	/^void Battery_getData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void
Battery_getData	linux/Battery.c	/^void Battery_getData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void
Battery_getData	openbsd/Battery.c	/^void Battery_getData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void
Battery_getData	solaris/Battery.c	/^void Battery_getData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void
Battery_getData	unsupported/Battery.c	/^void Battery_getData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void
Battery_getProcBatData	linux/Battery.c	/^static double Battery_getProcBatData() {$/;"	f	typeref:typename:double	file:
Battery_getProcData	linux/Battery.c	/^static void Battery_getProcData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void	file:
Battery_getSysData	linux/Battery.c	/^static void Battery_getSysData(double* level, ACPresence* isOnAC) {$/;"	f	typeref:typename:void	file:
Battery_method	linux/Battery.c	/^static enum { BAT_PROC, BAT_SYS, BAT_ERR } Battery_method = BAT_PROC;$/;"	v	typeref:enum:__anon087974300103	file:
Black	CRT.c	/^#define Black /;"	d	file:
Black	CRT.h	/^#define Black /;"	d
BlankMeter_attributes	Meter.c	/^int BlankMeter_attributes[] = {$/;"	v	typeref:typename:int[]
BlankMeter_class	Meter.c	/^MeterClass BlankMeter_class = {$/;"	v	typeref:typename:MeterClass
BlankMeter_display	Meter.c	/^static void BlankMeter_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
BlankMeter_updateValues	Meter.c	/^static void BlankMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
Blue	CRT.c	/^#define Blue /;"	d	file:
Blue	CRT.h	/^#define Blue /;"	d
Bug Reports	CONTRIBUTING.md	/^Bug Reports$/;"	s
CGROUP	linux/LinuxProcess.h	/^   CGROUP = 113,$/;"	e	enum:LinuxProcessFields
CHECK_BOX	CRT.h	/^   CHECK_BOX,$/;"	e	enum:ColorElements_
CHECK_MARK	CRT.h	/^   CHECK_MARK,$/;"	e	enum:ColorElements_
CHECK_TEXT	CRT.h	/^   CHECK_TEXT,$/;"	e	enum:ColorElements_
CLAMP	Meter.c	/^#define CLAMP(/;"	d	file:
CLAMP	Meter.h	/^#define CLAMP(/;"	d
CLAMP	RichString.c	/^#define CLAMP(/;"	d	file:
CLAMP	RichString.h	/^#define CLAMP(/;"	d
CLAMP	darwin/Platform.c	/^#define CLAMP(/;"	d	file:
CLAMP	darwin/Platform.h	/^#define CLAMP(/;"	d
CLAMP	dragonflybsd/Platform.c	/^#define CLAMP(/;"	d	file:
CLAMP	dragonflybsd/Platform.h	/^#define CLAMP(/;"	d
CLAMP	freebsd/Platform.c	/^#define CLAMP(/;"	d	file:
CLAMP	freebsd/Platform.h	/^#define CLAMP(/;"	d
CLAMP	linux/LinuxProcessList.c	/^#define CLAMP(/;"	d	file:
CLAMP	linux/LinuxProcessList.h	/^#define CLAMP(/;"	d
CLAMP	linux/Platform.c	/^#define CLAMP(/;"	d	file:
CLAMP	linux/Platform.h	/^#define CLAMP(/;"	d
CLAMP	openbsd/OpenBSDProcessList.c	/^#define CLAMP(/;"	d	file:
CLAMP	openbsd/OpenBSDProcessList.h	/^#define CLAMP(/;"	d
CLOCK	CRT.h	/^   CLOCK,$/;"	e	enum:ColorElements_
CMAJFLT	linux/LinuxProcess.h	/^   CMAJFLT = 13,$/;"	e	enum:LinuxProcessFields
CMINFLT	linux/LinuxProcess.h	/^   CMINFLT = 11,$/;"	e	enum:LinuxProcessFields
CNCLWB	linux/LinuxProcess.h	/^   CNCLWB = 109,$/;"	e	enum:LinuxProcessFields
CNSWAP	linux/LinuxProcess.h	/^   CNSWAP = 36,$/;"	e	enum:UnsupportedProcessFields
COLORSCHEME_BLACKNIGHT	CRT.h	/^   COLORSCHEME_BLACKNIGHT = 5,$/;"	e	enum:ColorSchemes_
COLORSCHEME_BLACKONWHITE	CRT.h	/^   COLORSCHEME_BLACKONWHITE = 2,$/;"	e	enum:ColorSchemes_
COLORSCHEME_BROKENGRAY	CRT.h	/^   COLORSCHEME_BROKENGRAY = 6,$/;"	e	enum:ColorSchemes_
COLORSCHEME_DEFAULT	CRT.h	/^   COLORSCHEME_DEFAULT = 0,$/;"	e	enum:ColorSchemes_
COLORSCHEME_LIGHTTERMINAL	CRT.h	/^   COLORSCHEME_LIGHTTERMINAL = 3,$/;"	e	enum:ColorSchemes_
COLORSCHEME_MIDNIGHT	CRT.h	/^   COLORSCHEME_MIDNIGHT = 4,$/;"	e	enum:ColorSchemes_
COLORSCHEME_MONOCHROME	CRT.h	/^   COLORSCHEME_MONOCHROME = 1,$/;"	e	enum:ColorSchemes_
COLUMNS	htop.1.in	/^.SH "COLUMNS"$/;"	s	title:HTOP
COMM	Process.h	/^   COMM = 2,$/;"	e	enum:ProcessFields
COMMAND-LINE OPTIONS	htop.1.in	/^.SH "COMMAND-LINE OPTIONS"$/;"	s	title:HTOP
CONFIG FILE	htop.1.in	/^.SH "CONFIG FILE"$/;"	s	title:HTOP
CONTID	solaris/SolarisProcess.h	/^   CONTID = 105,$/;"	e	enum:SolarisProcessFields
COPY	scripts/MakeHeader.py	/^COPY=2$/;"	v
COPYRIGHT	configure.ac	/^AC_DEFINE_UNQUOTED(COPYRIGHT, "(C) 2004-$year Hisham Muhammad", [Copyright message.])$/;"	d
CPUData	dragonflybsd/DragonFlyBSDProcessList.h	/^} CPUData;$/;"	t	typeref:struct:CPUData_
CPUData	freebsd/FreeBSDProcessList.h	/^} CPUData;$/;"	t	typeref:struct:CPUData_
CPUData	linux/LinuxProcessList.h	/^} CPUData;$/;"	t	typeref:struct:CPUData_
CPUData	openbsd/OpenBSDProcessList.h	/^} CPUData;$/;"	t	typeref:struct:CPUData_
CPUData	solaris/SolarisProcessList.h	/^} CPUData;$/;"	t	typeref:struct:CPUData_
CPUData_	dragonflybsd/DragonFlyBSDProcessList.h	/^typedef struct CPUData_ {$/;"	s
CPUData_	freebsd/FreeBSDProcessList.h	/^typedef struct CPUData_ {$/;"	s
CPUData_	linux/LinuxProcessList.h	/^typedef struct CPUData_ {$/;"	s
CPUData_	openbsd/OpenBSDProcessList.h	/^typedef struct CPUData_ {$/;"	s
CPUData_	solaris/SolarisProcessList.h	/^typedef struct CPUData_ {$/;"	s
CPUMeterValues	CPUMeter.h	/^} CPUMeterValues;$/;"	t	typeref:enum:__anon387a8f800103
CPUMeter_attributes	CPUMeter.c	/^int CPUMeter_attributes[] = {$/;"	v	typeref:typename:int[]
CPUMeter_class	CPUMeter.c	/^MeterClass CPUMeter_class = {$/;"	v	typeref:typename:MeterClass
CPUMeter_display	CPUMeter.c	/^static void CPUMeter_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
CPUMeter_init	CPUMeter.c	/^static void CPUMeter_init(Meter* this) {$/;"	f	typeref:typename:void	file:
CPUMeter_updateValues	CPUMeter.c	/^static void CPUMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
CPU_GUEST	CRT.h	/^   CPU_GUEST,$/;"	e	enum:ColorElements_
CPU_IOWAIT	CRT.h	/^   CPU_IOWAIT,$/;"	e	enum:ColorElements_
CPU_IRQ	CRT.h	/^   CPU_IRQ,$/;"	e	enum:ColorElements_
CPU_KERNEL	CRT.h	/^   CPU_KERNEL,$/;"	e	enum:ColorElements_
CPU_METER_GUEST	CPUMeter.h	/^   CPU_METER_GUEST = 6,$/;"	e	enum:__anon387a8f800103
CPU_METER_IOWAIT	CPUMeter.h	/^   CPU_METER_IOWAIT = 7,$/;"	e	enum:__anon387a8f800103
CPU_METER_IRQ	CPUMeter.h	/^   CPU_METER_IRQ = 3,$/;"	e	enum:__anon387a8f800103
CPU_METER_ITEMCOUNT	CPUMeter.h	/^   CPU_METER_ITEMCOUNT = 8, \/\/ number of entries in this enum$/;"	e	enum:__anon387a8f800103
CPU_METER_KERNEL	CPUMeter.h	/^   CPU_METER_KERNEL = 2,$/;"	e	enum:__anon387a8f800103
CPU_METER_NICE	CPUMeter.h	/^   CPU_METER_NICE = 0,$/;"	e	enum:__anon387a8f800103
CPU_METER_NORMAL	CPUMeter.h	/^   CPU_METER_NORMAL = 1,$/;"	e	enum:__anon387a8f800103
CPU_METER_SOFTIRQ	CPUMeter.h	/^   CPU_METER_SOFTIRQ = 4,$/;"	e	enum:__anon387a8f800103
CPU_METER_STEAL	CPUMeter.h	/^   CPU_METER_STEAL = 5,$/;"	e	enum:__anon387a8f800103
CPU_NICE	CRT.h	/^   CPU_NICE,$/;"	e	enum:ColorElements_
CPU_NICE_TEXT	CRT.h	/^   CPU_NICE_TEXT,$/;"	e	enum:ColorElements_
CPU_NORMAL	CRT.h	/^   CPU_NORMAL,$/;"	e	enum:ColorElements_
CPU_SOFTIRQ	CRT.h	/^   CPU_SOFTIRQ,$/;"	e	enum:ColorElements_
CPU_STEAL	CRT.h	/^   CPU_STEAL,$/;"	e	enum:ColorElements_
CRT_colorScheme	CRT.c	/^int CRT_colorScheme = 0;$/;"	v	typeref:typename:int
CRT_colorSchemes	CRT.c	/^int CRT_colorSchemes[LAST_COLORSCHEME][LAST_COLORELEMENT] = {$/;"	v	typeref:typename:int[][]
CRT_colors	CRT.c	/^int* CRT_colors;$/;"	v	typeref:typename:int *
CRT_colors	CRT.h	/^int* CRT_colors;$/;"	v	typeref:typename:int *
CRT_cursorX	CRT.c	/^int CRT_cursorX = 0;$/;"	v	typeref:typename:int
CRT_delay	CRT.c	/^int CRT_delay = 0;$/;"	v	typeref:typename:int
CRT_disableDelay	CRT.c	/^void CRT_disableDelay() {$/;"	f	typeref:typename:void
CRT_done	CRT.c	/^void CRT_done() {$/;"	f	typeref:typename:void
CRT_dropPrivileges	CRT.c	/^#define CRT_dropPrivileges(/;"	d	file:
CRT_dropPrivileges	CRT.c	/^void CRT_dropPrivileges() {$/;"	f	typeref:typename:void
CRT_dropPrivileges	CRT.h	/^#define CRT_dropPrivileges(/;"	d
CRT_egid	CRT.c	/^static int CRT_egid = -1;$/;"	v	typeref:typename:int	file:
CRT_enableDelay	CRT.c	/^void CRT_enableDelay() {$/;"	f	typeref:typename:void
CRT_euid	CRT.c	/^static int CRT_euid = -1;$/;"	v	typeref:typename:int	file:
CRT_fatalError	CRT.c	/^void CRT_fatalError(const char* note) {$/;"	f	typeref:typename:void
CRT_handleSIGSEGV	darwin/DarwinCRT.c	/^void CRT_handleSIGSEGV(int sgn) {$/;"	f	typeref:typename:void
CRT_handleSIGSEGV	dragonflybsd/DragonFlyBSDCRT.c	/^void CRT_handleSIGSEGV(int sgn) {$/;"	f	typeref:typename:void
CRT_handleSIGSEGV	freebsd/FreeBSDCRT.c	/^void CRT_handleSIGSEGV(int sgn) {$/;"	f	typeref:typename:void
CRT_handleSIGSEGV	linux/LinuxCRT.c	/^void CRT_handleSIGSEGV(int sgn) {$/;"	f	typeref:typename:void
CRT_handleSIGSEGV	openbsd/OpenBSDCRT.c	/^void CRT_handleSIGSEGV(int sgn) {$/;"	f	typeref:typename:void
CRT_handleSIGSEGV	solaris/SolarisCRT.c	/^void CRT_handleSIGSEGV(int sgn) {$/;"	f	typeref:typename:void
CRT_handleSIGSEGV	unsupported/UnsupportedCRT.c	/^void CRT_handleSIGSEGV(int sgn) {$/;"	f	typeref:typename:void
CRT_handleSIGTERM	CRT.c	/^static void CRT_handleSIGTERM(int sgn) {$/;"	f	typeref:typename:void	file:
CRT_hasColors	CRT.c	/^static bool CRT_hasColors;$/;"	v	typeref:typename:bool	file:
CRT_init	CRT.c	/^void CRT_init(int delay, int colorScheme) {$/;"	f	typeref:typename:void
CRT_readKey	CRT.c	/^int CRT_readKey() {$/;"	f	typeref:typename:int
CRT_restorePrivileges	CRT.c	/^#define CRT_restorePrivileges(/;"	d	file:
CRT_restorePrivileges	CRT.c	/^void CRT_restorePrivileges() {$/;"	f	typeref:typename:void
CRT_restorePrivileges	CRT.h	/^#define CRT_restorePrivileges(/;"	d
CRT_scrollHAmount	CRT.c	/^int CRT_scrollHAmount = 5;$/;"	v	typeref:typename:int
CRT_scrollWheelVAmount	CRT.c	/^int CRT_scrollWheelVAmount = 10;$/;"	v	typeref:typename:int
CRT_setColors	CRT.c	/^void CRT_setColors(int colorScheme) {$/;"	f	typeref:typename:void
CRT_termType	CRT.c	/^char* CRT_termType;$/;"	v	typeref:typename:char *
CRT_termType	CRT.h	/^char* CRT_termType;$/;"	v	typeref:typename:char *
CRT_treeStr	CRT.c	/^const char **CRT_treeStr = CRT_treeStrAscii;$/;"	v	typeref:typename:const char **
CRT_treeStrAscii	CRT.c	/^const char *CRT_treeStrAscii[TREE_STR_COUNT] = {$/;"	v	typeref:typename:const char * []
CRT_treeStrUtf8	CRT.c	/^const char *CRT_treeStrUtf8[TREE_STR_COUNT] = {$/;"	v	typeref:typename:const char * []
CRT_utf8	CRT.c	/^bool CRT_utf8 = false;$/;"	v	typeref:typename:bool
CSTIME	linux/LinuxProcess.h	/^   CSTIME = 17,$/;"	e	enum:LinuxProcessFields
CTID	linux/LinuxProcess.h	/^   CTID = 100,$/;"	e	enum:LinuxProcessFields
CUSTOM_METERMODE	Meter.h	/^   CUSTOM_METERMODE = 0,$/;"	e	enum:__anon1f0952f80103
CUTIME	linux/LinuxProcess.h	/^   CUTIME = 16,$/;"	e	enum:LinuxProcessFields
CategoriesFunctions	CategoriesPanel.c	/^static const char* const CategoriesFunctions[] = {"      ", "      ", "      ", "      ", "     /;"	v	typeref:typename:const char * const[]	file:
CategoriesPanel	CategoriesPanel.h	/^} CategoriesPanel;$/;"	t	typeref:struct:CategoriesPanel_
CategoriesPanel_	CategoriesPanel.h	/^typedef struct CategoriesPanel_ {$/;"	s
CategoriesPanel_class	CategoriesPanel.c	/^PanelClass CategoriesPanel_class = {$/;"	v	typeref:typename:PanelClass
CategoriesPanel_delete	CategoriesPanel.c	/^static void CategoriesPanel_delete(Object* object) {$/;"	f	typeref:typename:void	file:
CategoriesPanel_eventHandler	CategoriesPanel.c	/^static HandlerResult CategoriesPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
CategoriesPanel_makeColorsPage	CategoriesPanel.c	/^static void CategoriesPanel_makeColorsPage(CategoriesPanel* this) {$/;"	f	typeref:typename:void	file:
CategoriesPanel_makeColumnsPage	CategoriesPanel.c	/^static void CategoriesPanel_makeColumnsPage(CategoriesPanel* this) {$/;"	f	typeref:typename:void	file:
CategoriesPanel_makeDisplayOptionsPage	CategoriesPanel.c	/^static void CategoriesPanel_makeDisplayOptionsPage(CategoriesPanel* this) {$/;"	f	typeref:typename:void	file:
CategoriesPanel_makeMetersPage	CategoriesPanel.c	/^void CategoriesPanel_makeMetersPage(CategoriesPanel* this) {$/;"	f	typeref:typename:void
CategoriesPanel_new	CategoriesPanel.c	/^CategoriesPanel* CategoriesPanel_new(ScreenManager* scr, Settings* settings, Header* header, Pro/;"	f	typeref:typename:CategoriesPanel *
CharType	RichString.h	/^#define CharType /;"	d
CheckItem	CheckItem.h	/^} CheckItem;$/;"	t	typeref:struct:CheckItem_
CheckItem_	CheckItem.h	/^typedef struct CheckItem_ {$/;"	s
CheckItem_class	CheckItem.c	/^ObjectClass CheckItem_class = {$/;"	v	typeref:typename:ObjectClass
CheckItem_delete	CheckItem.c	/^static void CheckItem_delete(Object* cast) {$/;"	f	typeref:typename:void	file:
CheckItem_display	CheckItem.c	/^static void CheckItem_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
CheckItem_get	CheckItem.c	/^bool CheckItem_get(CheckItem* this) {$/;"	f	typeref:typename:bool
CheckItem_newByRef	CheckItem.c	/^CheckItem* CheckItem_newByRef(char* text, bool* ref) {$/;"	f	typeref:typename:CheckItem *
CheckItem_newByVal	CheckItem.c	/^CheckItem* CheckItem_newByVal(char* text, bool value) {$/;"	f	typeref:typename:CheckItem *
CheckItem_set	CheckItem.c	/^void CheckItem_set(CheckItem* this, bool value) {$/;"	f	typeref:typename:void
Class	Object.h	/^#define Class(/;"	d
ClockMeter_attributes	ClockMeter.c	/^int ClockMeter_attributes[] = {$/;"	v	typeref:typename:int[]
ClockMeter_class	ClockMeter.c	/^MeterClass ClockMeter_class = {$/;"	v	typeref:typename:MeterClass
ClockMeter_updateValues	ClockMeter.c	/^static void ClockMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
ColorElements	CRT.h	/^} ColorElements;$/;"	t	typeref:enum:ColorElements_
ColorElements_	CRT.h	/^typedef enum ColorElements_ {$/;"	g
ColorIndex	CRT.c	/^#define ColorIndex(/;"	d	file:
ColorIndex	CRT.h	/^#define ColorIndex(/;"	d
ColorIndexGrayBlack	CRT.c	/^#define ColorIndexGrayBlack /;"	d	file:
ColorIndexGrayBlack	CRT.h	/^#define ColorIndexGrayBlack /;"	d
ColorPair	CRT.c	/^#define ColorPair(/;"	d	file:
ColorPair	CRT.h	/^#define ColorPair(/;"	d
ColorPairGrayBlack	CRT.c	/^#define ColorPairGrayBlack /;"	d	file:
ColorPairGrayBlack	CRT.h	/^#define ColorPairGrayBlack /;"	d
ColorSchemeNames	ColorsPanel.c	/^static const char* const ColorSchemeNames[] = {$/;"	v	typeref:typename:const char * const[]	file:
ColorSchemes	CRT.h	/^} ColorSchemes;$/;"	t	typeref:enum:ColorSchemes_
ColorSchemes_	CRT.h	/^typedef enum ColorSchemes_ {$/;"	g
ColorsFunctions	ColorsPanel.c	/^static const char* const ColorsFunctions[] = {"      ", "      ", "      ", "      ", "      ", /;"	v	typeref:typename:const char * const[]	file:
ColorsPanel	ColorsPanel.h	/^} ColorsPanel;$/;"	t	typeref:struct:ColorsPanel_
ColorsPanel_	ColorsPanel.h	/^typedef struct ColorsPanel_ {$/;"	s
ColorsPanel_class	ColorsPanel.c	/^PanelClass ColorsPanel_class = {$/;"	v	typeref:typename:PanelClass
ColorsPanel_delete	ColorsPanel.c	/^static void ColorsPanel_delete(Object* object) {$/;"	f	typeref:typename:void	file:
ColorsPanel_eventHandler	ColorsPanel.c	/^static HandlerResult ColorsPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
ColorsPanel_new	ColorsPanel.c	/^ColorsPanel* ColorsPanel_new(Settings* settings, ScreenManager* scr) {$/;"	f	typeref:typename:ColorsPanel *
ColumnsFunctions	ColumnsPanel.c	/^static const char* const ColumnsFunctions[] = {"      ", "      ", "      ", "      ", "      ",/;"	v	typeref:typename:const char * const[]	file:
ColumnsPanel	ColumnsPanel.h	/^} ColumnsPanel;$/;"	t	typeref:struct:ColumnsPanel_
ColumnsPanel_	ColumnsPanel.h	/^typedef struct ColumnsPanel_ {$/;"	s
ColumnsPanel_class	ColumnsPanel.c	/^PanelClass ColumnsPanel_class = {$/;"	v	typeref:typename:PanelClass
ColumnsPanel_delete	ColumnsPanel.c	/^static void ColumnsPanel_delete(Object* object) {$/;"	f	typeref:typename:void	file:
ColumnsPanel_eventHandler	ColumnsPanel.c	/^static HandlerResult ColumnsPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
ColumnsPanel_fieldNameToIndex	ColumnsPanel.c	/^int ColumnsPanel_fieldNameToIndex(const char* name) {$/;"	f	typeref:typename:int
ColumnsPanel_new	ColumnsPanel.c	/^ColumnsPanel* ColumnsPanel_new(Settings* settings) {$/;"	f	typeref:typename:ColumnsPanel *
ColumnsPanel_update	ColumnsPanel.c	/^void ColumnsPanel_update(Panel* super) {$/;"	f	typeref:typename:void
CommandLineSettings	htop.c	/^} CommandLineSettings;$/;"	t	typeref:struct:CommandLineSettings_	file:
CommandLineSettings_	htop.c	/^typedef struct CommandLineSettings_ {$/;"	s	file:
CompareKernelVersion	darwin/DarwinProcessList.c	/^int CompareKernelVersion(short int major, short int minor, short int component) {$/;"	f	typeref:typename:int
Comparison between `htop` and classic `top`	README.md	/^Comparison between `htop` and classic `top`$/;"	s
Compilation instructions	README.md	/^Compilation instructions$/;"	s
Contributing Guide	CONTRIBUTING.md	/^Contributing Guide$/;"	c
Cyan	CRT.c	/^#define Cyan /;"	d	file:
Cyan	CRT.h	/^#define Cyan /;"	d
DEFAULT_COLOR	CRT.h	/^   DEFAULT_COLOR,$/;"	e	enum:ColorElements_
DEFAULT_DELAY	Settings.c	/^#define DEFAULT_DELAY /;"	d	file:
DEFAULT_DELAY	Settings.h	/^#define DEFAULT_DELAY /;"	d
DEFAULT_SIZE	Vector.h	/^#define DEFAULT_SIZE /;"	d
DELTAPERC	linux/LinuxProcessList.c	/^      #define DELTAPERC(/;"	d	file:
DESCRIPTION	htop.1.in	/^.SH "DESCRIPTION"$/;"	s	title:HTOP
DIE	CRT.c	/^#define DIE(/;"	d	file:
DIE	CRT.h	/^#define DIE(/;"	d
DarwinProcess	darwin/DarwinProcess.h	/^} DarwinProcess;$/;"	t	typeref:struct:DarwinProcess_
DarwinProcessList	darwin/DarwinProcessList.h	/^} DarwinProcessList;$/;"	t	typeref:struct:DarwinProcessList_
DarwinProcessList_	darwin/DarwinProcessList.h	/^typedef struct DarwinProcessList_ {$/;"	s
DarwinProcess_	darwin/DarwinProcess.h	/^typedef struct DarwinProcess_ {$/;"	s
DarwinProcess_class	darwin/DarwinProcess.c	/^ProcessClass DarwinProcess_class = {$/;"	v	typeref:typename:ProcessClass
DarwinProcess_getCmdLine	darwin/DarwinProcess.c	/^char *DarwinProcess_getCmdLine(struct kinfo_proc* k, int* basenameOffset) {$/;"	f	typeref:typename:char *
DarwinProcess_new	darwin/DarwinProcess.c	/^DarwinProcess* DarwinProcess_new(Settings* settings) {$/;"	f	typeref:typename:DarwinProcess *
DarwinProcess_scanThreads	darwin/DarwinProcess.c	/^void DarwinProcess_scanThreads(DarwinProcess *dp) {$/;"	f	typeref:typename:void
DarwinProcess_setFromKInfoProc	darwin/DarwinProcess.c	/^void DarwinProcess_setFromKInfoProc(Process *proc, struct kinfo_proc *ps, time_t now, bool exist/;"	f	typeref:typename:void
DarwinProcess_setFromLibprocPidinfo	darwin/DarwinProcess.c	/^void DarwinProcess_setFromLibprocPidinfo(DarwinProcess *proc, DarwinProcessList *dpl) {$/;"	f	typeref:typename:void
DarwinProcess_setStartTime	darwin/DarwinProcess.c	/^void DarwinProcess_setStartTime(Process *proc, struct extern_proc *ep, time_t now) {$/;"	f	typeref:typename:void
DisplayOptionsFunctions	DisplayOptionsPanel.c	/^static const char* const DisplayOptionsFunctions[] = {"      ", "      ", "      ", "      ", " /;"	v	typeref:typename:const char * const[]	file:
DisplayOptionsPanel	DisplayOptionsPanel.h	/^} DisplayOptionsPanel;$/;"	t	typeref:struct:DisplayOptionsPanel_
DisplayOptionsPanel_	DisplayOptionsPanel.h	/^typedef struct DisplayOptionsPanel_ {$/;"	s
DisplayOptionsPanel_class	DisplayOptionsPanel.c	/^PanelClass DisplayOptionsPanel_class = {$/;"	v	typeref:typename:PanelClass
DisplayOptionsPanel_delete	DisplayOptionsPanel.c	/^static void DisplayOptionsPanel_delete(Object* object) {$/;"	f	typeref:typename:void	file:
DisplayOptionsPanel_eventHandler	DisplayOptionsPanel.c	/^static HandlerResult DisplayOptionsPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
DisplayOptionsPanel_new	DisplayOptionsPanel.c	/^DisplayOptionsPanel* DisplayOptionsPanel_new(Settings* settings, ScreenManager* scr) {$/;"	f	typeref:typename:DisplayOptionsPanel *
Donations	CONTRIBUTING.md	/^Donations$/;"	s
DragonFlyBSDProcess	dragonflybsd/DragonFlyBSDProcess.h	/^} DragonFlyBSDProcess;$/;"	t	typeref:struct:DragonFlyBSDProcess_
DragonFlyBSDProcessField	dragonflybsd/DragonFlyBSDProcess.h	/^} DragonFlyBSDProcessField;$/;"	t	typeref:enum:DragonFlyBSDProcessFields
DragonFlyBSDProcessFields	dragonflybsd/DragonFlyBSDProcess.h	/^typedef enum DragonFlyBSDProcessFields {$/;"	g
DragonFlyBSDProcessList	dragonflybsd/DragonFlyBSDProcessList.h	/^} DragonFlyBSDProcessList;$/;"	t	typeref:struct:DragonFlyBSDProcessList_
DragonFlyBSDProcessList_	dragonflybsd/DragonFlyBSDProcessList.h	/^typedef struct DragonFlyBSDProcessList_ {$/;"	s
DragonFlyBSDProcessList_readJailName	dragonflybsd/DragonFlyBSDProcessList.c	/^char* DragonFlyBSDProcessList_readJailName(DragonFlyBSDProcessList* dfpl, int jailid) {$/;"	f	typeref:typename:char *
DragonFlyBSDProcessList_readProcessName	dragonflybsd/DragonFlyBSDProcessList.c	/^char* DragonFlyBSDProcessList_readProcessName(kvm_t* kd, struct kinfo_proc* kproc, int* basename/;"	f	typeref:typename:char *
DragonFlyBSDProcessList_scanCPUTime	dragonflybsd/DragonFlyBSDProcessList.c	/^static inline void DragonFlyBSDProcessList_scanCPUTime(ProcessList* pl) {$/;"	f	typeref:typename:void	file:
DragonFlyBSDProcessList_scanJails	dragonflybsd/DragonFlyBSDProcessList.c	/^static inline void DragonFlyBSDProcessList_scanJails(DragonFlyBSDProcessList* dfpl) {$/;"	f	typeref:typename:void	file:
DragonFlyBSDProcessList_scanMemoryInfo	dragonflybsd/DragonFlyBSDProcessList.c	/^static inline void DragonFlyBSDProcessList_scanMemoryInfo(ProcessList* pl) {$/;"	f	typeref:typename:void	file:
DragonFlyBSDProcess_	dragonflybsd/DragonFlyBSDProcess.h	/^typedef struct DragonFlyBSDProcess_ {$/;"	s
DragonFlyBSDProcess_class	dragonflybsd/DragonFlyBSDProcess.c	/^ProcessClass DragonFlyBSDProcess_class = {$/;"	v	typeref:typename:ProcessClass
DragonFlyBSDProcess_compare	dragonflybsd/DragonFlyBSDProcess.c	/^long DragonFlyBSDProcess_compare(const void* v1, const void* v2) {$/;"	f	typeref:typename:long
DragonFlyBSDProcess_new	dragonflybsd/DragonFlyBSDProcess.c	/^DragonFlyBSDProcess* DragonFlyBSDProcess_new(Settings* settings) {$/;"	f	typeref:typename:DragonFlyBSDProcess *
DragonFlyBSDProcess_writeField	dragonflybsd/DragonFlyBSDProcess.c	/^void DragonFlyBSDProcess_writeField(Process* this, RichString* str, ProcessField field) {$/;"	f	typeref:typename:void
DualColCPUsMeter_draw	CPUMeter.c	/^static void DualColCPUsMeter_draw(Meter* this, int x, int y, int w) {$/;"	f	typeref:typename:void	file:
ENDCODE	linux/LinuxProcess.h	/^   ENDCODE = 26,$/;"	e	enum:UnsupportedProcessFields
EVENT_HEADER_CLICK	Panel.h	/^#define EVENT_HEADER_CLICK(/;"	d
EVENT_HEADER_CLICK_GET_X	Panel.h	/^#define EVENT_HEADER_CLICK_GET_X(/;"	d
EVENT_IS_HEADER_CLICK	Panel.h	/^#define EVENT_IS_HEADER_CLICK(/;"	d
EVENT_SET_SELECTED	Panel.h	/^#define EVENT_SET_SELECTED /;"	d
EXIT_SIGNAL	linux/LinuxProcess.h	/^   EXIT_SIGNAL = 37,$/;"	e	enum:UnsupportedProcessFields
EXTRA_DIST	Makefile.am	/^EXTRA_DIST = $(dist_man_MANS) htop.desktop htop.png scripts\/MakeHeader.py \\$/;"	m
EnvScreen	EnvScreen.h	/^} EnvScreen;$/;"	t	typeref:struct:EnvScreen_
EnvScreen_	EnvScreen.h	/^typedef struct EnvScreen_ {$/;"	s
EnvScreen_class	EnvScreen.c	/^InfoScreenClass EnvScreen_class = {$/;"	v	typeref:typename:InfoScreenClass
EnvScreen_delete	EnvScreen.c	/^void EnvScreen_delete(Object* this) {$/;"	f	typeref:typename:void
EnvScreen_draw	EnvScreen.c	/^void EnvScreen_draw(InfoScreen* this) {$/;"	f	typeref:typename:void
EnvScreen_new	EnvScreen.c	/^EnvScreen* EnvScreen_new(Process* process) {$/;"	f	typeref:typename:EnvScreen *
EnvScreen_scan	EnvScreen.c	/^void EnvScreen_scan(InfoScreen* this) {$/;"	f	typeref:typename:void
FAILED_SEARCH	CRT.h	/^   FAILED_SEARCH,$/;"	e	enum:ColorElements_
FLAGS	linux/LinuxProcess.h	/^   FLAGS = 9,$/;"	e	enum:UnsupportedProcessFields
FUNCTION_BAR	CRT.h	/^   FUNCTION_BAR,$/;"	e	enum:ColorElements_
FUNCTION_KEY	CRT.h	/^   FUNCTION_KEY,$/;"	e	enum:ColorElements_
Feature Requests	CONTRIBUTING.md	/^Feature Requests$/;"	s
FreeBSDProcess	freebsd/FreeBSDProcess.h	/^} FreeBSDProcess;$/;"	t	typeref:struct:FreeBSDProcess_
FreeBSDProcessField	freebsd/FreeBSDProcess.h	/^} FreeBSDProcessField;$/;"	t	typeref:enum:FreeBSDProcessFields
FreeBSDProcessFields	freebsd/FreeBSDProcess.h	/^typedef enum FreeBSDProcessFields {$/;"	g
FreeBSDProcessList	freebsd/FreeBSDProcessList.h	/^} FreeBSDProcessList;$/;"	t	typeref:struct:FreeBSDProcessList_
FreeBSDProcessList_	freebsd/FreeBSDProcessList.h	/^typedef struct FreeBSDProcessList_ {$/;"	s
FreeBSDProcessList_readJailName	freebsd/FreeBSDProcessList.c	/^char* FreeBSDProcessList_readJailName(struct kinfo_proc* kproc) {$/;"	f	typeref:typename:char *
FreeBSDProcessList_readProcessName	freebsd/FreeBSDProcessList.c	/^char* FreeBSDProcessList_readProcessName(kvm_t* kd, struct kinfo_proc* kproc, int* basenameEnd) /;"	f	typeref:typename:char *
FreeBSDProcessList_scanCPUTime	freebsd/FreeBSDProcessList.c	/^static inline void FreeBSDProcessList_scanCPUTime(ProcessList* pl) {$/;"	f	typeref:typename:void	file:
FreeBSDProcessList_scanMemoryInfo	freebsd/FreeBSDProcessList.c	/^static inline void FreeBSDProcessList_scanMemoryInfo(ProcessList* pl) {$/;"	f	typeref:typename:void	file:
FreeBSDProcess_	freebsd/FreeBSDProcess.h	/^typedef struct FreeBSDProcess_ {$/;"	s
FreeBSDProcess_class	freebsd/FreeBSDProcess.c	/^ProcessClass FreeBSDProcess_class = {$/;"	v	typeref:typename:ProcessClass
FreeBSDProcess_compare	freebsd/FreeBSDProcess.c	/^long FreeBSDProcess_compare(const void* v1, const void* v2) {$/;"	f	typeref:typename:long
FreeBSDProcess_new	freebsd/FreeBSDProcess.c	/^FreeBSDProcess* FreeBSDProcess_new(Settings* settings) {$/;"	f	typeref:typename:FreeBSDProcess *
FreeBSDProcess_writeField	freebsd/FreeBSDProcess.c	/^void FreeBSDProcess_writeField(Process* this, RichString* str, ProcessField field) {$/;"	f	typeref:typename:void
FunctionBar	FunctionBar.h	/^} FunctionBar;$/;"	t	typeref:struct:FunctionBar_
FunctionBar_	FunctionBar.h	/^typedef struct FunctionBar_ {$/;"	s
FunctionBar_EnterEscEvents	FunctionBar.c	/^static const int FunctionBar_EnterEscEvents[] = {13, 27};$/;"	v	typeref:typename:const int[]	file:
FunctionBar_EnterEscKeys	FunctionBar.c	/^static const char* const FunctionBar_EnterEscKeys[] = {"Enter", "Esc", NULL};$/;"	v	typeref:typename:const char * const[]	file:
FunctionBar_FEvents	FunctionBar.c	/^static int FunctionBar_FEvents[] = {KEY_F(1), KEY_F(2), KEY_F(3), KEY_F(4), KEY_F(5), KEY_F(6), /;"	v	typeref:typename:int[]	file:
FunctionBar_FKeys	FunctionBar.c	/^static const char* const FunctionBar_FKeys[] = {"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", /;"	v	typeref:typename:const char * const[]	file:
FunctionBar_FLabels	FunctionBar.c	/^static const char* const FunctionBar_FLabels[] = {"      ", "      ", "      ", "      ", "     /;"	v	typeref:typename:const char * const[]	file:
FunctionBar_delete	FunctionBar.c	/^void FunctionBar_delete(FunctionBar* this) {$/;"	f	typeref:typename:void
FunctionBar_draw	FunctionBar.c	/^void FunctionBar_draw(const FunctionBar* this, char* buffer) {$/;"	f	typeref:typename:void
FunctionBar_drawAttr	FunctionBar.c	/^void FunctionBar_drawAttr(const FunctionBar* this, char* buffer, int attr) {$/;"	f	typeref:typename:void
FunctionBar_hide	FunctionBar.c	/^bool FunctionBar_hide = false;$/;"	v	typeref:typename:bool
FunctionBar_new	FunctionBar.c	/^FunctionBar* FunctionBar_new(const char* const* functions, const char* const* keys, const int* e/;"	f	typeref:typename:FunctionBar *
FunctionBar_newEnterEsc	FunctionBar.c	/^FunctionBar* FunctionBar_newEnterEsc(const char* enter, const char* esc) {$/;"	f	typeref:typename:FunctionBar *
FunctionBar_setLabel	FunctionBar.c	/^void FunctionBar_setLabel(FunctionBar* this, int event, const char* text) {$/;"	f	typeref:typename:void
FunctionBar_synthesizeEvent	FunctionBar.c	/^int FunctionBar_synthesizeEvent(const FunctionBar* this, int pos) {$/;"	f	typeref:typename:int
GRAPH_1	CRT.h	/^   GRAPH_1,$/;"	e	enum:ColorElements_
GRAPH_2	CRT.h	/^   GRAPH_2,$/;"	e	enum:ColorElements_
GRAPH_DELAY	Meter.c	/^#define GRAPH_DELAY /;"	d	file:
GRAPH_DELAY	Meter.h	/^#define GRAPH_DELAY /;"	d
GRAPH_HEIGHT	Meter.c	/^#define GRAPH_HEIGHT /;"	d	file:
GRAPH_HEIGHT	Meter.h	/^#define GRAPH_HEIGHT /;"	d
GRAPH_METERMODE	Meter.h	/^   GRAPH_METERMODE,$/;"	e	enum:__anon1f0952f80103
GetKernelVersion	darwin/DarwinProcessList.c	/^void GetKernelVersion(struct kern *k) {$/;"	f	typeref:typename:void
GraphData	Meter.h	/^} GraphData;$/;"	t	typeref:struct:GraphData_
GraphData_	Meter.h	/^typedef struct GraphData_ {$/;"	s
GraphMeterMode	Meter.c	/^static MeterMode GraphMeterMode = {$/;"	v	typeref:typename:MeterMode	file:
GraphMeterMode_dots	Meter.c	/^static const char* const* GraphMeterMode_dots;$/;"	v	typeref:typename:const char * const *	file:
GraphMeterMode_dotsAscii	Meter.c	/^static const char* const GraphMeterMode_dotsAscii[] = {$/;"	v	typeref:typename:const char * const[]	file:
GraphMeterMode_dotsUtf8	Meter.c	/^static const char* const GraphMeterMode_dotsUtf8[] = {$/;"	v	typeref:typename:const char * const[]	file:
GraphMeterMode_draw	Meter.c	/^static void GraphMeterMode_draw(Meter* this, int x, int y, int w) {$/;"	f	typeref:typename:void	file:
GraphMeterMode_pixPerRow	Meter.c	/^static int GraphMeterMode_pixPerRow;$/;"	v	typeref:typename:int	file:
Green	CRT.c	/^#define Green /;"	d	file:
Green	CRT.h	/^#define Green /;"	d
HANDLED	Panel.h	/^   HANDLED     = 0x01,$/;"	e	enum:HandlerResult_
HAVE_ANCIENT_VSERVER	configure.ac	/^    AC_DEFINE(HAVE_ANCIENT_VSERVER, 1, [Define if ancient vserver support enabled.])$/;"	d
HAVE_CGROUP	configure.ac	/^   AC_DEFINE(HAVE_CGROUP, 1, [Define if cgroup support enabled.])$/;"	d
HAVE_LINUX_AFFINITY	configure.ac	/^   AC_DEFINE(HAVE_LINUX_AFFINITY, 1, [Define if Linux sched_setaffinity and sched_getaffinity ar/;"	d
HAVE_OPENVZ	configure.ac	/^   AC_DEFINE(HAVE_OPENVZ, 1, [Define if openvz support enabled.])$/;"	d
HAVE_PROC	configure.ac	/^   AC_DEFINE(HAVE_PROC, 1, [Define if using a Linux-compatible proc filesystem.])$/;"	d
HAVE_SETUID_ENABLED	configure.ac	/^   AC_DEFINE(HAVE_SETUID_ENABLED, 1, [Define if setuid support should be enabled.])$/;"	d
HAVE_TASKSTATS	configure.ac	/^    AC_DEFINE(HAVE_TASKSTATS, 1, [Define if taskstats support enabled.])$/;"	d
HAVE_VSERVER	configure.ac	/^    AC_DEFINE(HAVE_VSERVER, 1, [Define if vserver support enabled.])$/;"	d
HEADER_Action	Action.h	/^#define HEADER_Action$/;"	d
HEADER_Affinity	Affinity.h	/^#define HEADER_Affinity$/;"	d
HEADER_AffinityPanel	AffinityPanel.h	/^#define HEADER_AffinityPanel$/;"	d
HEADER_AvailableColumnsPanel	AvailableColumnsPanel.h	/^#define HEADER_AvailableColumnsPanel$/;"	d
HEADER_AvailableMetersPanel	AvailableMetersPanel.h	/^#define HEADER_AvailableMetersPanel$/;"	d
HEADER_Battery	darwin/Battery.h	/^#define HEADER_Battery$/;"	d
HEADER_Battery	dragonflybsd/Battery.h	/^#define HEADER_Battery$/;"	d
HEADER_Battery	freebsd/Battery.h	/^#define HEADER_Battery$/;"	d
HEADER_Battery	linux/Battery.h	/^#define HEADER_Battery$/;"	d
HEADER_Battery	openbsd/Battery.h	/^#define HEADER_Battery$/;"	d
HEADER_Battery	solaris/Battery.h	/^#define HEADER_Battery$/;"	d
HEADER_Battery	unsupported/Battery.h	/^#define HEADER_Battery$/;"	d
HEADER_BatteryMeter	BatteryMeter.h	/^#define HEADER_BatteryMeter$/;"	d
HEADER_CPUMeter	CPUMeter.h	/^#define HEADER_CPUMeter$/;"	d
HEADER_CRT	CRT.h	/^#define HEADER_CRT$/;"	d
HEADER_CategoriesPanel	CategoriesPanel.h	/^#define HEADER_CategoriesPanel$/;"	d
HEADER_CheckItem	CheckItem.h	/^#define HEADER_CheckItem$/;"	d
HEADER_ClockMeter	ClockMeter.h	/^#define HEADER_ClockMeter$/;"	d
HEADER_ColorsPanel	ColorsPanel.h	/^#define HEADER_ColorsPanel$/;"	d
HEADER_ColumnsPanel	ColumnsPanel.h	/^#define HEADER_ColumnsPanel$/;"	d
HEADER_DarwinCRT	darwin/DarwinCRT.h	/^#define HEADER_DarwinCRT$/;"	d
HEADER_DarwinProcess	darwin/DarwinProcess.h	/^#define HEADER_DarwinProcess$/;"	d
HEADER_DarwinProcessList	darwin/DarwinProcessList.h	/^#define HEADER_DarwinProcessList$/;"	d
HEADER_DisplayOptionsPanel	DisplayOptionsPanel.h	/^#define HEADER_DisplayOptionsPanel$/;"	d
HEADER_DragonFlyBSDCRT	dragonflybsd/DragonFlyBSDCRT.h	/^#define HEADER_DragonFlyBSDCRT$/;"	d
HEADER_DragonFlyBSDProcess	dragonflybsd/DragonFlyBSDProcess.h	/^#define HEADER_DragonFlyBSDProcess$/;"	d
HEADER_DragonFlyBSDProcessList	dragonflybsd/DragonFlyBSDProcessList.h	/^#define HEADER_DragonFlyBSDProcessList$/;"	d
HEADER_EnvScreen	EnvScreen.h	/^#define HEADER_EnvScreen$/;"	d
HEADER_FreeBSDCRT	freebsd/FreeBSDCRT.h	/^#define HEADER_FreeBSDCRT$/;"	d
HEADER_FreeBSDProcess	freebsd/FreeBSDProcess.h	/^#define HEADER_FreeBSDProcess$/;"	d
HEADER_FreeBSDProcessList	freebsd/FreeBSDProcessList.h	/^#define HEADER_FreeBSDProcessList$/;"	d
HEADER_FunctionBar	FunctionBar.h	/^#define HEADER_FunctionBar$/;"	d
HEADER_Hashtable	Hashtable.h	/^#define HEADER_Hashtable$/;"	d
HEADER_Header	Header.h	/^#define HEADER_Header$/;"	d
HEADER_HostnameMeter	HostnameMeter.h	/^#define HEADER_HostnameMeter$/;"	d
HEADER_IOPriority	linux/IOPriority.h	/^#define HEADER_IOPriority$/;"	d
HEADER_IOPriorityPanel	linux/IOPriorityPanel.h	/^#define HEADER_IOPriorityPanel$/;"	d
HEADER_IncSet	IncSet.h	/^#define HEADER_IncSet$/;"	d
HEADER_InfoScreen	InfoScreen.h	/^#define HEADER_InfoScreen$/;"	d
HEADER_LinuxCRT	linux/LinuxCRT.h	/^#define HEADER_LinuxCRT$/;"	d
HEADER_LinuxProcess	linux/LinuxProcess.h	/^#define HEADER_LinuxProcess$/;"	d
HEADER_LinuxProcessList	linux/LinuxProcessList.h	/^#define HEADER_LinuxProcessList$/;"	d
HEADER_ListItem	ListItem.h	/^#define HEADER_ListItem$/;"	d
HEADER_LoadAverageMeter	LoadAverageMeter.h	/^#define HEADER_LoadAverageMeter$/;"	d
HEADER_MainPanel	MainPanel.h	/^#define HEADER_MainPanel$/;"	d
HEADER_MemoryMeter	MemoryMeter.h	/^#define HEADER_MemoryMeter$/;"	d
HEADER_Meter	Meter.h	/^#define HEADER_Meter$/;"	d
HEADER_MetersPanel	MetersPanel.h	/^#define HEADER_MetersPanel$/;"	d
HEADER_Object	Object.h	/^#define HEADER_Object$/;"	d
HEADER_OpenBSDCRT	openbsd/OpenBSDCRT.h	/^#define HEADER_OpenBSDCRT$/;"	d
HEADER_OpenBSDProcess	openbsd/OpenBSDProcess.h	/^#define HEADER_OpenBSDProcess$/;"	d
HEADER_OpenBSDProcessList	openbsd/OpenBSDProcessList.h	/^#define HEADER_OpenBSDProcessList$/;"	d
HEADER_OpenFilesScreen	OpenFilesScreen.h	/^#define HEADER_OpenFilesScreen$/;"	d
HEADER_Panel	Panel.h	/^#define HEADER_Panel$/;"	d
HEADER_Platform	darwin/Platform.h	/^#define HEADER_Platform$/;"	d
HEADER_Platform	dragonflybsd/Platform.h	/^#define HEADER_Platform$/;"	d
HEADER_Platform	freebsd/Platform.h	/^#define HEADER_Platform$/;"	d
HEADER_Platform	linux/Platform.h	/^#define HEADER_Platform$/;"	d
HEADER_Platform	openbsd/Platform.h	/^#define HEADER_Platform$/;"	d
HEADER_Platform	solaris/Platform.h	/^#define HEADER_Platform$/;"	d
HEADER_Platform	unsupported/Platform.h	/^#define HEADER_Platform$/;"	d
HEADER_Process	Process.h	/^#define HEADER_Process$/;"	d
HEADER_ProcessList	ProcessList.h	/^#define HEADER_ProcessList$/;"	d
HEADER_RichString	RichString.h	/^#define HEADER_RichString$/;"	d
HEADER_ScreenManager	ScreenManager.h	/^#define HEADER_ScreenManager$/;"	d
HEADER_Settings	Settings.h	/^#define HEADER_Settings$/;"	d
HEADER_SignalsPanel	SignalsPanel.h	/^#define HEADER_SignalsPanel$/;"	d
HEADER_SolarisCRT	solaris/SolarisCRT.h	/^#define HEADER_SolarisCRT$/;"	d
HEADER_SolarisProcess	solaris/SolarisProcess.h	/^#define HEADER_SolarisProcess$/;"	d
HEADER_SolarisProcessList	solaris/SolarisProcessList.h	/^#define HEADER_SolarisProcessList$/;"	d
HEADER_StringUtils	StringUtils.h	/^#define HEADER_StringUtils$/;"	d
HEADER_SwapMeter	SwapMeter.h	/^#define HEADER_SwapMeter$/;"	d
HEADER_TasksMeter	TasksMeter.h	/^#define HEADER_TasksMeter$/;"	d
HEADER_TraceScreen	TraceScreen.h	/^#define HEADER_TraceScreen$/;"	d
HEADER_UnsupportedCRT	unsupported/UnsupportedCRT.h	/^#define HEADER_UnsupportedCRT$/;"	d
HEADER_UnsupportedProcess	unsupported/UnsupportedProcess.h	/^#define HEADER_UnsupportedProcess$/;"	d
HEADER_UnsupportedProcessList	unsupported/UnsupportedProcessList.h	/^#define HEADER_UnsupportedProcessList$/;"	d
HEADER_UptimeMeter	UptimeMeter.h	/^#define HEADER_UptimeMeter$/;"	d
HEADER_UsersTable	UsersTable.h	/^#define HEADER_UsersTable$/;"	d
HEADER_Vector	Vector.h	/^#define HEADER_Vector$/;"	d
HEADER_XAlloc	XAlloc.h	/^#define HEADER_XAlloc$/;"	d
HEADER_htop	htop.h	/^#define HEADER_htop$/;"	d
HELP_BOLD	CRT.h	/^   HELP_BOLD,$/;"	e	enum:ColorElements_
HORIZONTAL	ScreenManager.h	/^   HORIZONTAL$/;"	e	enum:Orientation_
HOSTNAME	CRT.h	/^   HOSTNAME,$/;"	e	enum:ColorElements_
HTOP	htop.1.in	/^.TH "HTOP" "1" "2015" "@PACKAGE_STRING@" "Utils"$/;"	t
HTOP_CHECK_LIB	configure.ac	/^m4_define([HTOP_CHECK_LIB],$/;"	d
HTOP_CHECK_SCRIPT	configure.ac	/^m4_define([HTOP_CHECK_SCRIPT],$/;"	d
HTOP_DARWIN	configure.ac	/^AM_CONDITIONAL([HTOP_DARWIN], [test "$my_htop_platform" = darwin])$/;"	c
HTOP_DRAGONFLYBSD	configure.ac	/^AM_CONDITIONAL([HTOP_DRAGONFLYBSD], [test "$my_htop_platform" = dragonflybsd])$/;"	c
HTOP_FREEBSD	configure.ac	/^AM_CONDITIONAL([HTOP_FREEBSD], [test "$my_htop_platform" = freebsd])$/;"	c
HTOP_HWLOC_CPUBIND_FLAG	Affinity.c	/^#define HTOP_HWLOC_CPUBIND_FLAG /;"	d	file:
HTOP_HWLOC_CPUBIND_FLAG	Affinity.h	/^#define HTOP_HWLOC_CPUBIND_FLAG /;"	d
HTOP_KEEP_FOLLOWING	Action.h	/^   HTOP_KEEP_FOLLOWING = 0x08,$/;"	e	enum:__anon537103f90103
HTOP_LINUX	configure.ac	/^AM_CONDITIONAL([HTOP_LINUX], [test "$my_htop_platform" = linux])$/;"	c
HTOP_OK	Action.h	/^   HTOP_OK = 0x00,$/;"	e	enum:__anon537103f90103
HTOP_OPENBSD	configure.ac	/^AM_CONDITIONAL([HTOP_OPENBSD], [test "$my_htop_platform" = openbsd])$/;"	c
HTOP_QUIT	Action.h	/^   HTOP_QUIT = 0x10,$/;"	e	enum:__anon537103f90103
HTOP_RECALCULATE	Action.h	/^   HTOP_RECALCULATE = 0x03, \/\/ implies HTOP_REFRESH$/;"	e	enum:__anon537103f90103
HTOP_REDRAW_BAR	Action.h	/^   HTOP_REDRAW_BAR = 0x20,$/;"	e	enum:__anon537103f90103
HTOP_REFRESH	Action.h	/^   HTOP_REFRESH = 0x01,$/;"	e	enum:__anon537103f90103
HTOP_SAVE_SETTINGS	Action.h	/^   HTOP_SAVE_SETTINGS = 0x04,$/;"	e	enum:__anon537103f90103
HTOP_SOLARIS	configure.ac	/^AM_CONDITIONAL([HTOP_SOLARIS], [test "$my_htop_platform" = solaris])$/;"	c
HTOP_UNSUPPORTED	configure.ac	/^AM_CONDITIONAL([HTOP_UNSUPPORTED], [test "$my_htop_platform" = unsupported])$/;"	c
HTOP_UPDATE_PANELHDR	Action.h	/^   HTOP_UPDATE_PANELHDR = 0x41, \/\/ implies HTOP_REFRESH$/;"	e	enum:__anon537103f90103
HandlerResult	Panel.h	/^} HandlerResult;$/;"	t	typeref:enum:HandlerResult_
HandlerResult_	Panel.h	/^typedef enum HandlerResult_ {$/;"	g
Hashtable	Hashtable.h	/^typedef struct Hashtable_ Hashtable;$/;"	t	typeref:struct:Hashtable_
HashtableItem	Hashtable.h	/^typedef struct HashtableItem {$/;"	s
HashtableItem	Hashtable.h	/^} HashtableItem;$/;"	t	typeref:struct:HashtableItem
HashtableItem_new	Hashtable.c	/^static HashtableItem* HashtableItem_new(unsigned int key, void* value) {$/;"	f	typeref:typename:HashtableItem *	file:
Hashtable_	Hashtable.h	/^struct Hashtable_ {$/;"	s
Hashtable_PairFunction	Hashtable.h	/^typedef void(*Hashtable_PairFunction)(int, void*, void*);$/;"	t	typeref:typename:void (*)(int,void *,void *)
Hashtable_count	Hashtable.c	/^int Hashtable_count(Hashtable* this) {$/;"	f	typeref:typename:int
Hashtable_delete	Hashtable.c	/^void Hashtable_delete(Hashtable* this) {$/;"	f	typeref:typename:void
Hashtable_foreach	Hashtable.c	/^void Hashtable_foreach(Hashtable* this, Hashtable_PairFunction f, void* userData) {$/;"	f	typeref:typename:void
Hashtable_get	Hashtable.c	/^inline void* Hashtable_get(Hashtable* this, unsigned int key) {$/;"	f	typeref:typename:void *
Hashtable_isConsistent	Hashtable.c	/^static bool Hashtable_isConsistent(Hashtable* this) {$/;"	f	typeref:typename:bool	file:
Hashtable_new	Hashtable.c	/^Hashtable* Hashtable_new(int size, bool owner) {$/;"	f	typeref:typename:Hashtable *
Hashtable_put	Hashtable.c	/^void Hashtable_put(Hashtable* this, unsigned int key, void* value) {$/;"	f	typeref:typename:void
Hashtable_remove	Hashtable.c	/^void* Hashtable_remove(Hashtable* this, unsigned int key) {$/;"	f	typeref:typename:void *
Header	Header.h	/^} Header;$/;"	t	typeref:struct:Header_
Header_	Header.h	/^typedef struct Header_ {$/;"	s
Header_addMeterByClass	Header.c	/^Meter* Header_addMeterByClass(Header* this, MeterClass* type, int param, int column) {$/;"	f	typeref:typename:Meter *
Header_addMeterByName	Header.c	/^MeterModeId Header_addMeterByName(Header* this, char* name, int column) {$/;"	f	typeref:typename:MeterModeId
Header_calculateHeight	Header.c	/^int Header_calculateHeight(Header* this) {$/;"	f	typeref:typename:int
Header_delete	Header.c	/^void Header_delete(Header* this) {$/;"	f	typeref:typename:void
Header_draw	Header.c	/^void Header_draw(const Header* this) {$/;"	f	typeref:typename:void
Header_forEachColumn	Header.c	/^#define Header_forEachColumn(/;"	d	file:
Header_forEachColumn	Header.h	/^#define Header_forEachColumn(/;"	d
Header_new	Header.c	/^Header* Header_new(struct ProcessList_* pl, Settings* settings, int nrColumns) {$/;"	f	typeref:typename:Header *
Header_populateFromSettings	Header.c	/^void Header_populateFromSettings(Header* this) {$/;"	f	typeref:typename:void
Header_readMeterMode	Header.c	/^MeterModeId Header_readMeterMode(Header* this, int i, int column) {$/;"	f	typeref:typename:MeterModeId
Header_readMeterName	Header.c	/^char* Header_readMeterName(Header* this, int i, int column) {$/;"	f	typeref:typename:char *
Header_reinit	Header.c	/^void Header_reinit(Header* this) {$/;"	f	typeref:typename:void
Header_setMode	Header.c	/^void Header_setMode(Header* this, int i, MeterModeId mode, int column) {$/;"	f	typeref:typename:void
Header_size	Header.c	/^int Header_size(Header* this, int column) {$/;"	f	typeref:typename:int
Header_writeBackToSettings	Header.c	/^void Header_writeBackToSettings(const Header* this) {$/;"	f	typeref:typename:void
HostnameMeter_attributes	HostnameMeter.c	/^int HostnameMeter_attributes[] = {$/;"	v	typeref:typename:int[]
HostnameMeter_class	HostnameMeter.c	/^MeterClass HostnameMeter_class = {$/;"	v	typeref:typename:MeterClass
HostnameMeter_updateValues	HostnameMeter.c	/^static void HostnameMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
Htop_Action	Action.h	/^typedef Htop_Reaction (*Htop_Action)();$/;"	t	typeref:typename:Htop_Reaction (*)()
Htop_Reaction	Action.h	/^} Htop_Reaction;$/;"	t	typeref:enum:__anon537103f90103
IGNORED	Panel.h	/^   IGNORED     = 0x02,$/;"	e	enum:HandlerResult_
INCMODE_MAX	IncSet.h	/^#define INCMODE_MAX /;"	d
INC_FILTER	IncSet.h	/^   INC_FILTER = 1$/;"	e	enum:__anondb0517410103
INC_SEARCH	IncSet.h	/^   INC_SEARCH = 0,$/;"	e	enum:__anondb0517410103
INTERACTIVE COMMANDS	htop.1.in	/^.SH "INTERACTIVE COMMANDS"$/;"	s	title:HTOP
IOPRIO_CLASS_BE	linux/IOPriority.h	/^   IOPRIO_CLASS_BE,$/;"	e	enum:__anondb384cb40103
IOPRIO_CLASS_IDLE	linux/IOPriority.h	/^   IOPRIO_CLASS_IDLE,$/;"	e	enum:__anondb384cb40103
IOPRIO_CLASS_NONE	linux/IOPriority.h	/^   IOPRIO_CLASS_NONE,$/;"	e	enum:__anondb384cb40103
IOPRIO_CLASS_RT	linux/IOPriority.h	/^   IOPRIO_CLASS_RT,$/;"	e	enum:__anondb384cb40103
IOPRIO_CLASS_SHIFT	linux/IOPriority.h	/^#define IOPRIO_CLASS_SHIFT /;"	d
IOPRIO_PRIO_MASK	linux/IOPriority.h	/^#define IOPRIO_PRIO_MASK /;"	d
IOPRIO_WHO_PROCESS	linux/IOPriority.h	/^#define IOPRIO_WHO_PROCESS /;"	d
IOPriority	linux/IOPriority.h	/^typedef int IOPriority;$/;"	t	typeref:typename:int
IOPriorityPanel_getIOPriority	linux/IOPriorityPanel.c	/^IOPriority IOPriorityPanel_getIOPriority(Panel* this) {$/;"	f	typeref:typename:IOPriority
IOPriorityPanel_new	linux/IOPriorityPanel.c	/^Panel* IOPriorityPanel_new(IOPriority currPrio) {$/;"	f	typeref:typename:Panel *
IOPriority_Idle	linux/IOPriority.h	/^#define IOPriority_Idle /;"	d
IOPriority_None	linux/IOPriority.h	/^#define IOPriority_None /;"	d
IOPriority_class	linux/IOPriority.h	/^#define IOPriority_class(/;"	d
IOPriority_data	linux/IOPriority.h	/^#define IOPriority_data(/;"	d
IOPriority_error	linux/IOPriority.h	/^#define IOPriority_error /;"	d
IOPriority_tuple	linux/IOPriority.h	/^#define IOPriority_tuple(/;"	d
IO_PRIORITY	linux/LinuxProcess.h	/^   IO_PRIORITY = 115,$/;"	e	enum:LinuxProcessFields
IO_RATE	linux/LinuxProcess.h	/^   IO_RATE = 112,$/;"	e	enum:LinuxProcessFields
IO_READ_RATE	linux/LinuxProcess.h	/^   IO_READ_RATE = 110,$/;"	e	enum:LinuxProcessFields
IO_WRITE_RATE	linux/LinuxProcess.h	/^   IO_WRITE_RATE = 111,$/;"	e	enum:LinuxProcessFields
ITREALVALUE	linux/LinuxProcess.h	/^   ITREALVALUE = 20,$/;"	e	enum:UnsupportedProcessFields
IncMode	IncSet.h	/^} IncMode;$/;"	t	typeref:struct:IncMode_
IncMode_	IncSet.h	/^typedef struct IncMode_ {$/;"	s
IncMode_GetPanelValue	IncSet.h	/^typedef const char* (*IncMode_GetPanelValue)(Panel*, int);$/;"	t	typeref:typename:const char * (*)(Panel *,int)
IncMode_done	IncSet.c	/^static inline void IncMode_done(IncMode* mode) {$/;"	f	typeref:typename:void	file:
IncMode_initFilter	IncSet.c	/^static inline void IncMode_initFilter(IncMode* filter) {$/;"	f	typeref:typename:void	file:
IncMode_initSearch	IncSet.c	/^static inline void IncMode_initSearch(IncMode* search) {$/;"	f	typeref:typename:void	file:
IncMode_reset	IncSet.c	/^static void IncMode_reset(IncMode* mode) {$/;"	f	typeref:typename:void	file:
IncSet	IncSet.h	/^} IncSet;$/;"	t	typeref:struct:IncSet_
IncSet_	IncSet.h	/^typedef struct IncSet_ {$/;"	s
IncSet_activate	IncSet.c	/^void IncSet_activate(IncSet* this, IncType type, Panel* panel) {$/;"	f	typeref:typename:void
IncSet_delete	IncSet.c	/^void IncSet_delete(IncSet* this) {$/;"	f	typeref:typename:void
IncSet_drawBar	IncSet.c	/^void IncSet_drawBar(IncSet* this) {$/;"	f	typeref:typename:void
IncSet_filter	IncSet.h	/^#define IncSet_filter(/;"	d
IncSet_getListItemValue	IncSet.c	/^const char* IncSet_getListItemValue(Panel* panel, int i) {$/;"	f	typeref:typename:const char *
IncSet_handleKey	IncSet.c	/^bool IncSet_handleKey(IncSet* this, int ch, Panel* panel, IncMode_GetPanelValue getPanelValue, V/;"	f	typeref:typename:bool
IncSet_new	IncSet.c	/^IncSet* IncSet_new(FunctionBar* bar) {$/;"	f	typeref:typename:IncSet *
IncSet_synthesizeEvent	IncSet.c	/^int IncSet_synthesizeEvent(IncSet* this, int x) {$/;"	f	typeref:typename:int
IncType	IncSet.h	/^} IncType;$/;"	t	typeref:enum:__anondb0517410103
InfoScreen	InfoScreen.h	/^typedef struct InfoScreen_ InfoScreen;$/;"	t	typeref:struct:InfoScreen_
InfoScreenClass	InfoScreen.h	/^} InfoScreenClass;$/;"	t	typeref:struct:InfoScreenClass_
InfoScreenClass_	InfoScreen.h	/^typedef struct InfoScreenClass_ {$/;"	s
InfoScreenEvents	InfoScreen.c	/^static int InfoScreenEvents[] = {KEY_F(3), KEY_F(4), KEY_F(5), 27};$/;"	v	typeref:typename:int[]	file:
InfoScreenFunctions	InfoScreen.c	/^static const char* const InfoScreenFunctions[] = {"Search ", "Filter ", "Refresh", "Done   ", NU/;"	v	typeref:typename:const char * const[]	file:
InfoScreenKeys	InfoScreen.c	/^static const char* const InfoScreenKeys[] = {"F3", "F4", "F5", "Esc"};$/;"	v	typeref:typename:const char * const[]	file:
InfoScreen_	InfoScreen.h	/^struct InfoScreen_ {$/;"	s
InfoScreen_Draw	InfoScreen.h	/^typedef void(*InfoScreen_Draw)(InfoScreen*);$/;"	t	typeref:typename:void (*)(InfoScreen *)
InfoScreen_OnErr	InfoScreen.h	/^typedef void(*InfoScreen_OnErr)(InfoScreen*);$/;"	t	typeref:typename:void (*)(InfoScreen *)
InfoScreen_OnKey	InfoScreen.h	/^typedef bool(*InfoScreen_OnKey)(InfoScreen*, int);$/;"	t	typeref:typename:bool (*)(InfoScreen *,int)
InfoScreen_Scan	InfoScreen.h	/^typedef void(*InfoScreen_Scan)(InfoScreen*);$/;"	t	typeref:typename:void (*)(InfoScreen *)
InfoScreen_addLine	InfoScreen.c	/^void InfoScreen_addLine(InfoScreen* this, const char* line) {$/;"	f	typeref:typename:void
InfoScreen_appendLine	InfoScreen.c	/^void InfoScreen_appendLine(InfoScreen* this, const char* line) {$/;"	f	typeref:typename:void
InfoScreen_done	InfoScreen.c	/^InfoScreen* InfoScreen_done(InfoScreen* this) {$/;"	f	typeref:typename:InfoScreen *
InfoScreen_draw	InfoScreen.h	/^#define InfoScreen_draw(/;"	d
InfoScreen_drawTitled	InfoScreen.c	/^void InfoScreen_drawTitled(InfoScreen* this, char* fmt, ...) {$/;"	f	typeref:typename:void
InfoScreen_init	InfoScreen.c	/^InfoScreen* InfoScreen_init(InfoScreen* this, Process* process, FunctionBar* bar, int height, ch/;"	f	typeref:typename:InfoScreen *
InfoScreen_onErr	InfoScreen.h	/^#define InfoScreen_onErr(/;"	d
InfoScreen_onKey	InfoScreen.h	/^#define InfoScreen_onKey(/;"	d
InfoScreen_run	InfoScreen.c	/^void InfoScreen_run(InfoScreen* this) {$/;"	f	typeref:typename:void
InfoScreen_scan	InfoScreen.h	/^#define InfoScreen_scan(/;"	d
Introduction	README.md	/^Introduction$/;"	s
JAIL	dragonflybsd/DragonFlyBSDProcess.h	/^   JAIL  = 101,$/;"	e	enum:DragonFlyBSDProcessFields
JAIL	freebsd/FreeBSDProcess.h	/^   JAIL  = 101,$/;"	e	enum:FreeBSDProcessFields
JAIL_ERRMSGLEN	dragonflybsd/DragonFlyBSDProcessList.h	/^#define JAIL_ERRMSGLEN	/;"	d
JAIL_ERRMSGLEN	freebsd/FreeBSDProcessList.h	/^#define JAIL_ERRMSGLEN	/;"	d
JID	dragonflybsd/DragonFlyBSDProcess.h	/^   JID   = 100,$/;"	e	enum:DragonFlyBSDProcessFields
JID	freebsd/FreeBSDProcess.h	/^   JID   = 100,$/;"	e	enum:FreeBSDProcessFields
KEY_ALT	CRT.h	/^#define KEY_ALT(/;"	d
KEY_CTRL	Panel.c	/^#define KEY_CTRL(/;"	d	file:
KEY_CTRL	Panel.h	/^#define KEY_CTRL(/;"	d
KEY_RECLICK	CRT.c	/^#define KEY_RECLICK /;"	d	file:
KEY_RECLICK	CRT.h	/^#define KEY_RECLICK /;"	d
KEY_WHEELDOWN	CRT.c	/^#define KEY_WHEELDOWN /;"	d	file:
KEY_WHEELDOWN	CRT.h	/^#define KEY_WHEELDOWN /;"	d
KEY_WHEELUP	CRT.c	/^#define KEY_WHEELUP /;"	d	file:
KEY_WHEELUP	CRT.h	/^#define KEY_WHEELUP /;"	d
KSTKEIP	linux/LinuxProcess.h	/^   KSTKEIP = 29,$/;"	e	enum:UnsupportedProcessFields
KSTKESP	linux/LinuxProcess.h	/^   KSTKESP = 28,$/;"	e	enum:UnsupportedProcessFields
LARGE_NUMBER	CRT.h	/^   LARGE_NUMBER,$/;"	e	enum:ColorElements_
LAST_COLORELEMENT	CRT.h	/^   LAST_COLORELEMENT$/;"	e	enum:ColorElements_
LAST_COLORSCHEME	CRT.h	/^   LAST_COLORSCHEME = 7,$/;"	e	enum:ColorSchemes_
LAST_METERMODE	Meter.h	/^   LAST_METERMODE$/;"	e	enum:__anon1f0952f80103
LAST_PROCESSFIELD	dragonflybsd/DragonFlyBSDProcess.h	/^   LAST_PROCESSFIELD = 102,$/;"	e	enum:DragonFlyBSDProcessFields
LAST_PROCESSFIELD	freebsd/FreeBSDProcess.h	/^   LAST_PROCESSFIELD = 102,$/;"	e	enum:FreeBSDProcessFields
LAST_PROCESSFIELD	linux/LinuxProcess.h	/^   LAST_PROCESSFIELD = 119,$/;"	e	enum:LinuxProcessFields
LAST_PROCESSFIELD	openbsd/OpenBSDProcess.h	/^   LAST_PROCESSFIELD = 100,$/;"	e	enum:OpenBSDProcessFields
LAST_PROCESSFIELD	solaris/SolarisProcess.h	/^   LAST_PROCESSFIELD = 107,$/;"	e	enum:SolarisProcessFields
LEDMeterMode	Meter.c	/^static MeterMode LEDMeterMode = {$/;"	v	typeref:typename:MeterMode	file:
LEDMeterMode_digits	Meter.c	/^static const char* const* LEDMeterMode_digits;$/;"	v	typeref:typename:const char * const *	file:
LEDMeterMode_digitsAscii	Meter.c	/^static const char* const LEDMeterMode_digitsAscii[] = {$/;"	v	typeref:typename:const char * const[]	file:
LEDMeterMode_digitsUtf8	Meter.c	/^static const char* const LEDMeterMode_digitsUtf8[] = {$/;"	v	typeref:typename:const char * const[]	file:
LEDMeterMode_draw	Meter.c	/^static void LEDMeterMode_draw(Meter* this, int x, int y, int w) {$/;"	f	typeref:typename:void	file:
LEDMeterMode_drawDigit	Meter.c	/^static void LEDMeterMode_drawDigit(int x, int y, int n) {$/;"	f	typeref:typename:void	file:
LED_COLOR	CRT.h	/^   LED_COLOR,$/;"	e	enum:ColorElements_
LED_METERMODE	Meter.h	/^   LED_METERMODE,$/;"	e	enum:__anon1f0952f80103
LOAD	CRT.h	/^   LOAD,$/;"	e	enum:ColorElements_
LOAD_AVERAGE_FIFTEEN	CRT.h	/^   LOAD_AVERAGE_FIFTEEN,$/;"	e	enum:ColorElements_
LOAD_AVERAGE_FIVE	CRT.h	/^   LOAD_AVERAGE_FIVE,$/;"	e	enum:ColorElements_
LOAD_AVERAGE_ONE	CRT.h	/^   LOAD_AVERAGE_ONE,$/;"	e	enum:ColorElements_
LWPID	solaris/SolarisProcess.h	/^   LWPID = 106,$/;"	e	enum:SolarisProcessFields
LeftCPUs2Meter_class	CPUMeter.c	/^MeterClass LeftCPUs2Meter_class = {$/;"	v	typeref:typename:MeterClass
LeftCPUsMeter_class	CPUMeter.c	/^MeterClass LeftCPUsMeter_class = {$/;"	v	typeref:typename:MeterClass
License	README.md	/^## License$/;"	s
LinuxProcess	linux/LinuxProcess.h	/^} LinuxProcess;$/;"	t	typeref:struct:LinuxProcess_
LinuxProcessField	linux/LinuxProcess.h	/^} LinuxProcessField;$/;"	t	typeref:enum:LinuxProcessFields
LinuxProcessFields	linux/LinuxProcess.h	/^typedef enum LinuxProcessFields {$/;"	g
LinuxProcessList	linux/LinuxProcessList.h	/^} LinuxProcessList;$/;"	t	typeref:struct:LinuxProcessList_
LinuxProcessList_	linux/LinuxProcessList.h	/^typedef struct LinuxProcessList_ {$/;"	s
LinuxProcessList_initNetlinkSocket	linux/LinuxProcessList.c	/^static void LinuxProcessList_initNetlinkSocket(LinuxProcessList* this) {$/;"	f	typeref:typename:void	file:
LinuxProcessList_initTtyDrivers	linux/LinuxProcessList.c	/^static void LinuxProcessList_initTtyDrivers(LinuxProcessList* this) {$/;"	f	typeref:typename:void	file:
LinuxProcessList_readCGroupFile	linux/LinuxProcessList.c	/^static void LinuxProcessList_readCGroupFile(LinuxProcess* process, const char* dirname, const ch/;"	f	typeref:typename:void	file:
LinuxProcessList_readCmdlineFile	linux/LinuxProcessList.c	/^static bool LinuxProcessList_readCmdlineFile(Process* process, const char* dirname, const char* /;"	f	typeref:typename:bool	file:
LinuxProcessList_readDelayAcctData	linux/LinuxProcessList.c	/^static void LinuxProcessList_readDelayAcctData(LinuxProcessList* this, LinuxProcess* process) {$/;"	f	typeref:typename:void	file:
LinuxProcessList_readIoFile	linux/LinuxProcessList.c	/^static void LinuxProcessList_readIoFile(LinuxProcess* process, const char* dirname, char* name, /;"	f	typeref:typename:void	file:
LinuxProcessList_readOomData	linux/LinuxProcessList.c	/^static void LinuxProcessList_readOomData(LinuxProcess* process, const char* dirname, const char*/;"	f	typeref:typename:void	file:
LinuxProcessList_readOpenVZData	linux/LinuxProcessList.c	/^static void LinuxProcessList_readOpenVZData(LinuxProcess* process, const char* dirname, const ch/;"	f	typeref:typename:void	file:
LinuxProcessList_readStatFile	linux/LinuxProcessList.c	/^static bool LinuxProcessList_readStatFile(Process *process, const char* dirname, const char* nam/;"	f	typeref:typename:bool	file:
LinuxProcessList_readStatmFile	linux/LinuxProcessList.c	/^static bool LinuxProcessList_readStatmFile(LinuxProcess* process, const char* dirname, const cha/;"	f	typeref:typename:bool	file:
LinuxProcessList_readVServerData	linux/LinuxProcessList.c	/^static void LinuxProcessList_readVServerData(LinuxProcess* process, const char* dirname, const c/;"	f	typeref:typename:void	file:
LinuxProcessList_recurseProcTree	linux/LinuxProcessList.c	/^static bool LinuxProcessList_recurseProcTree(LinuxProcessList* this, const char* dirname, Proces/;"	f	typeref:typename:bool	file:
LinuxProcessList_scanCPUTime	linux/LinuxProcessList.c	/^static inline double LinuxProcessList_scanCPUTime(LinuxProcessList* this) {$/;"	f	typeref:typename:double	file:
LinuxProcessList_scanMemoryInfo	linux/LinuxProcessList.c	/^static inline void LinuxProcessList_scanMemoryInfo(ProcessList* this) {$/;"	f	typeref:typename:void	file:
LinuxProcessList_statProcessDir	linux/LinuxProcessList.c	/^static bool LinuxProcessList_statProcessDir(Process* process, const char* dirname, char* name) {$/;"	f	typeref:typename:bool	file:
LinuxProcessList_updateTtyDevice	linux/LinuxProcessList.c	/^static char* LinuxProcessList_updateTtyDevice(TtyDriver* ttyDrivers, unsigned int tty_nr) {$/;"	f	typeref:typename:char *	file:
LinuxProcess_	linux/LinuxProcess.h	/^typedef struct LinuxProcess_ {$/;"	s
LinuxProcess_adjustTime	linux/LinuxProcessList.c	/^static inline unsigned long long LinuxProcess_adjustTime(unsigned long long t) {$/;"	f	typeref:typename:unsigned long long	file:
LinuxProcess_class	linux/LinuxProcess.c	/^ProcessClass LinuxProcess_class = {$/;"	v	typeref:typename:ProcessClass
LinuxProcess_compare	linux/LinuxProcess.c	/^long LinuxProcess_compare(const void* v1, const void* v2) {$/;"	f	typeref:typename:long
LinuxProcess_effectiveIOPriority	linux/LinuxProcess.c	/^#define LinuxProcess_effectiveIOPriority(/;"	d	file:
LinuxProcess_effectiveIOPriority	linux/LinuxProcess.h	/^#define LinuxProcess_effectiveIOPriority(/;"	d
LinuxProcess_new	linux/LinuxProcess.c	/^LinuxProcess* LinuxProcess_new(Settings* settings) {$/;"	f	typeref:typename:LinuxProcess *
LinuxProcess_printDelay	linux/LinuxProcess.c	/^void LinuxProcess_printDelay(float delay_percent, char* buffer, int n) {$/;"	f	typeref:typename:void
LinuxProcess_setIOPriority	linux/LinuxProcess.c	/^bool LinuxProcess_setIOPriority(LinuxProcess* this, IOPriority ioprio) {$/;"	f	typeref:typename:bool
LinuxProcess_updateIOPriority	linux/LinuxProcess.c	/^IOPriority LinuxProcess_updateIOPriority(LinuxProcess* this) {$/;"	f	typeref:typename:IOPriority
LinuxProcess_writeField	linux/LinuxProcess.c	/^void LinuxProcess_writeField(Process* this, RichString* str, ProcessField field) {$/;"	f	typeref:typename:void
ListItem	ListItem.h	/^} ListItem;$/;"	t	typeref:struct:ListItem_
ListItem_	ListItem.h	/^typedef struct ListItem_ {$/;"	s
ListItem_append	ListItem.c	/^void ListItem_append(ListItem* this, const char* text) {$/;"	f	typeref:typename:void
ListItem_class	ListItem.c	/^ObjectClass ListItem_class = {$/;"	v	typeref:typename:ObjectClass
ListItem_compare	ListItem.c	/^long ListItem_compare(const void* cast1, const void* cast2) {$/;"	f	typeref:typename:long
ListItem_delete	ListItem.c	/^static void ListItem_delete(Object* cast) {$/;"	f	typeref:typename:void	file:
ListItem_display	ListItem.c	/^static void ListItem_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
ListItem_getRef	ListItem.c	/^const char* ListItem_getRef(ListItem* this) {$/;"	f	typeref:typename:const char *
ListItem_new	ListItem.c	/^ListItem* ListItem_new(const char* value, int key) {$/;"	f	typeref:typename:ListItem *
LoadAverageMeter_attributes	LoadAverageMeter.c	/^int LoadAverageMeter_attributes[] = {$/;"	v	typeref:typename:int[]
LoadAverageMeter_class	LoadAverageMeter.c	/^MeterClass LoadAverageMeter_class = {$/;"	v	typeref:typename:MeterClass
LoadAverageMeter_display	LoadAverageMeter.c	/^static void LoadAverageMeter_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
LoadAverageMeter_updateValues	LoadAverageMeter.c	/^static void LoadAverageMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
LoadMeter_attributes	LoadAverageMeter.c	/^int LoadMeter_attributes[] = { LOAD };$/;"	v	typeref:typename:int[]
LoadMeter_class	LoadAverageMeter.c	/^MeterClass LoadMeter_class = {$/;"	v	typeref:typename:MeterClass
LoadMeter_display	LoadAverageMeter.c	/^static void LoadMeter_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
LoadMeter_updateValues	LoadAverageMeter.c	/^static void LoadMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
MAJFLT	Process.h	/^   MAJFLT = 12,$/;"	e	enum:ProcessFields
MAX	CPUMeter.c	/^#define MAX(/;"	d	file:
MAX	CPUMeter.h	/^#define MAX(/;"	d
MAX	Header.c	/^#define MAX(/;"	d	file:
MAX	Header.h	/^#define MAX(/;"	d
MAX	Meter.c	/^#define MAX(/;"	d	file:
MAX	Meter.h	/^#define MAX(/;"	d
MAX	Panel.c	/^#define MAX(/;"	d	file:
MAX	Panel.h	/^#define MAX(/;"	d
MAXCMDLINE	solaris/SolarisProcessList.c	/^#define MAXCMDLINE /;"	d	file:
MAXCMDLINE	solaris/SolarisProcessList.h	/^#define MAXCMDLINE /;"	d
MAXCPU	openbsd/Platform.c	/^#define MAXCPU /;"	d	file:
MAXCPU	openbsd/Platform.h	/^#define MAXCPU /;"	d
MAXIMUM	openbsd/OpenBSDProcessList.c	/^#define MAXIMUM(/;"	d	file:
MAXIMUM	openbsd/OpenBSDProcessList.h	/^#define MAXIMUM(/;"	d
MAX_BATTERIES	linux/Battery.c	/^   #define MAX_BATTERIES /;"	d	file:
MAX_NAME	ProcessList.h	/^#define MAX_NAME /;"	d
MAX_READ	ProcessList.h	/^#define MAX_READ /;"	d
MEMORY SIZES	htop.1.in	/^.SH "MEMORY SIZES"$/;"	s	title:HTOP
MEMORY_BUFFERS	CRT.h	/^   MEMORY_BUFFERS,$/;"	e	enum:ColorElements_
MEMORY_BUFFERS_TEXT	CRT.h	/^   MEMORY_BUFFERS_TEXT,$/;"	e	enum:ColorElements_
MEMORY_CACHE	CRT.h	/^   MEMORY_CACHE,$/;"	e	enum:ColorElements_
MEMORY_USED	CRT.h	/^   MEMORY_USED,$/;"	e	enum:ColorElements_
METER_BUFFER_LEN	Meter.c	/^#define METER_BUFFER_LEN /;"	d	file:
METER_BUFFER_LEN	Meter.h	/^#define METER_BUFFER_LEN /;"	d
METER_TEXT	CRT.h	/^   METER_TEXT,$/;"	e	enum:ColorElements_
METER_VALUE	CRT.h	/^   METER_VALUE,$/;"	e	enum:ColorElements_
MIB_hw_physmem	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_hw_physmem[2];$/;"	v	typeref:typename:int[2]	file:
MIB_hw_physmem	freebsd/FreeBSDProcessList.c	/^static int MIB_hw_physmem[2];$/;"	v	typeref:typename:int[2]	file:
MIB_kern_cp_time	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_kern_cp_time[2];$/;"	v	typeref:typename:int[2]	file:
MIB_kern_cp_time	freebsd/FreeBSDProcessList.c	/^static int MIB_kern_cp_time[2];$/;"	v	typeref:typename:int[2]	file:
MIB_kern_cp_times	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_kern_cp_times[2];$/;"	v	typeref:typename:int[2]	file:
MIB_kern_cp_times	freebsd/FreeBSDProcessList.c	/^static int MIB_kern_cp_times[2];$/;"	v	typeref:typename:int[2]	file:
MIB_kstat_zfs_misc_arcstats_size	freebsd/FreeBSDProcessList.c	/^static int MIB_kstat_zfs_misc_arcstats_size[5];$/;"	v	typeref:typename:int[5]	file:
MIB_vfs_bufspace	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_vfs_bufspace[2];$/;"	v	typeref:typename:int[2]	file:
MIB_vfs_bufspace	freebsd/FreeBSDProcessList.c	/^static int MIB_vfs_bufspace[2];$/;"	v	typeref:typename:int[2]	file:
MIB_vm_stats_vm_v_active_count	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_vm_stats_vm_v_active_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_active_count	freebsd/FreeBSDProcessList.c	/^static int MIB_vm_stats_vm_v_active_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_cache_count	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_vm_stats_vm_v_cache_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_cache_count	freebsd/FreeBSDProcessList.c	/^static int MIB_vm_stats_vm_v_cache_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_free_count	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_vm_stats_vm_v_free_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_free_count	freebsd/FreeBSDProcessList.c	/^static int MIB_vm_stats_vm_v_free_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_inactive_count	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_vm_stats_vm_v_inactive_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_inactive_count	freebsd/FreeBSDProcessList.c	/^static int MIB_vm_stats_vm_v_inactive_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_page_count	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_vm_stats_vm_v_page_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_page_count	freebsd/FreeBSDProcessList.c	/^static int MIB_vm_stats_vm_v_page_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_wire_count	dragonflybsd/DragonFlyBSDProcessList.c	/^static int MIB_vm_stats_vm_v_wire_count[4];$/;"	v	typeref:typename:int[4]	file:
MIB_vm_stats_vm_v_wire_count	freebsd/FreeBSDProcessList.c	/^static int MIB_vm_stats_vm_v_wire_count[4];$/;"	v	typeref:typename:int[4]	file:
MIN	CPUMeter.c	/^#define MIN(/;"	d	file:
MIN	CPUMeter.h	/^#define MIN(/;"	d
MIN	Meter.c	/^#define MIN(/;"	d	file:
MIN	Meter.h	/^#define MIN(/;"	d
MIN	Panel.c	/^#define MIN(/;"	d	file:
MIN	Panel.h	/^#define MIN(/;"	d
MINFLT	Process.h	/^   MINFLT = 10,$/;"	e	enum:ProcessFields
MINIMUM	openbsd/OpenBSDProcessList.c	/^#define MINIMUM(/;"	d	file:
MINIMUM	openbsd/OpenBSDProcessList.h	/^#define MINIMUM(/;"	d
M_DRS	linux/LinuxProcess.h	/^   M_DRS = 43,$/;"	e	enum:LinuxProcessFields
M_DT	linux/LinuxProcess.h	/^   M_DT = 45,$/;"	e	enum:LinuxProcessFields
M_LRS	linux/LinuxProcess.h	/^   M_LRS = 44,$/;"	e	enum:LinuxProcessFields
M_RESIDENT	Process.h	/^   M_RESIDENT = 40,$/;"	e	enum:ProcessFields
M_SHARE	linux/LinuxProcess.h	/^   M_SHARE = 41,$/;"	e	enum:LinuxProcessFields
M_SIZE	Process.h	/^   M_SIZE = 39,$/;"	e	enum:ProcessFields
M_TRS	linux/LinuxProcess.h	/^   M_TRS = 42,$/;"	e	enum:LinuxProcessFields
Magenta	CRT.c	/^#define Magenta /;"	d	file:
Magenta	CRT.h	/^#define Magenta /;"	d
MainFunctions	MainPanel.c	/^static const char* const MainFunctions[]  = {"Help  ", "Setup ", "Search", "Filter", "Tree  ", "/;"	v	typeref:typename:const char * const[]	file:
MainPanel	MainPanel.h	/^} MainPanel;$/;"	t	typeref:struct:MainPanel_
MainPanel_	MainPanel.h	/^typedef struct MainPanel_ {$/;"	s
MainPanel_ForeachProcessFn	MainPanel.h	/^typedef bool(*MainPanel_ForeachProcessFn)(Process*, Arg);$/;"	t	typeref:typename:bool (*)(Process *,Arg)
MainPanel_class	MainPanel.c	/^PanelClass MainPanel_class = {$/;"	v	typeref:typename:PanelClass
MainPanel_delete	MainPanel.c	/^void MainPanel_delete(Object* object) {$/;"	f	typeref:typename:void
MainPanel_eventHandler	MainPanel.c	/^static HandlerResult MainPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
MainPanel_foreachProcess	MainPanel.c	/^bool MainPanel_foreachProcess(MainPanel* this, MainPanel_ForeachProcessFn fn, Arg arg, bool* was/;"	f	typeref:typename:bool
MainPanel_getFunctionBar	MainPanel.h	/^#define MainPanel_getFunctionBar(/;"	d
MainPanel_getValue	MainPanel.c	/^const char* MainPanel_getValue(MainPanel* this, int i) {$/;"	f	typeref:typename:const char *
MainPanel_new	MainPanel.c	/^MainPanel* MainPanel_new() {$/;"	f	typeref:typename:MainPanel *
MainPanel_pidSearch	MainPanel.c	/^void MainPanel_pidSearch(MainPanel* this, int ch) {$/;"	f	typeref:typename:void
MainPanel_selectedPid	MainPanel.c	/^int MainPanel_selectedPid(MainPanel* this) {$/;"	f	typeref:typename:int
MainPanel_setState	MainPanel.c	/^void MainPanel_setState(MainPanel* this, State* state) {$/;"	f	typeref:typename:void
MainPanel_updateTreeFunctions	MainPanel.c	/^void MainPanel_updateTreeFunctions(MainPanel* this, bool mode) {$/;"	f	typeref:typename:void
MemoryMeter_attributes	MemoryMeter.c	/^int MemoryMeter_attributes[] = {$/;"	v	typeref:typename:int[]
MemoryMeter_class	MemoryMeter.c	/^MeterClass MemoryMeter_class = {$/;"	v	typeref:typename:MeterClass
MemoryMeter_display	MemoryMeter.c	/^static void MemoryMeter_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
MemoryMeter_updateValues	MemoryMeter.c	/^static void MemoryMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
Meter	Meter.h	/^typedef struct Meter_ Meter;$/;"	t	typeref:struct:Meter_
MeterClass	Meter.h	/^} MeterClass;$/;"	t	typeref:struct:MeterClass_
MeterClass_	Meter.h	/^typedef struct MeterClass_ {$/;"	s
MeterColumnSettings	Settings.h	/^} MeterColumnSettings;$/;"	t	typeref:struct:__anon665a1bcc0108
MeterMode	Meter.h	/^} MeterMode;$/;"	t	typeref:struct:MeterMode_
MeterModeId	Meter.h	/^} MeterModeId;$/;"	t	typeref:enum:__anon1f0952f80103
MeterMode_	Meter.h	/^typedef struct MeterMode_ {$/;"	s
Meter_	Meter.h	/^struct Meter_ {$/;"	s
Meter_Done	Meter.h	/^typedef void(*Meter_Done)(Meter*);$/;"	t	typeref:typename:void (*)(Meter *)
Meter_Draw	Meter.h	/^typedef void(*Meter_Draw)(Meter*, int, int, int);$/;"	t	typeref:typename:void (*)(Meter *,int,int,int)
Meter_Init	Meter.h	/^typedef void(*Meter_Init)(Meter*);$/;"	t	typeref:typename:void (*)(Meter *)
Meter_UpdateMode	Meter.h	/^typedef void(*Meter_UpdateMode)(Meter*, int);$/;"	t	typeref:typename:void (*)(Meter *,int)
Meter_UpdateValues	Meter.h	/^typedef void(*Meter_UpdateValues)(Meter*, char*, int);$/;"	t	typeref:typename:void (*)(Meter *,char *,int)
Meter_attributes	Meter.h	/^#define Meter_attributes(/;"	d
Meter_class	Meter.c	/^MeterClass Meter_class = {$/;"	v	typeref:typename:MeterClass
Meter_defaultMode	Meter.h	/^#define Meter_defaultMode(/;"	d
Meter_delete	Meter.c	/^void Meter_delete(Object* cast) {$/;"	f	typeref:typename:void
Meter_displayBuffer	Meter.c	/^static inline void Meter_displayBuffer(Meter* this, char* buffer, RichString* out) {$/;"	f	typeref:typename:void	file:
Meter_done	Meter.h	/^#define Meter_done(/;"	d
Meter_doneFn	Meter.h	/^#define Meter_doneFn(/;"	d
Meter_drawFn	Meter.h	/^#define Meter_drawFn(/;"	d
Meter_getItems	Meter.h	/^#define Meter_getItems(/;"	d
Meter_humanUnit	Meter.c	/^int Meter_humanUnit(char* buffer, unsigned long int value, int size) {$/;"	f	typeref:typename:int
Meter_init	Meter.h	/^#define Meter_init(/;"	d
Meter_initFn	Meter.h	/^#define Meter_initFn(/;"	d
Meter_modes	Meter.c	/^MeterMode* Meter_modes[] = {$/;"	v	typeref:typename:MeterMode * []
Meter_name	Meter.h	/^#define Meter_name(/;"	d
Meter_new	Meter.c	/^Meter* Meter_new(struct ProcessList_* pl, int param, MeterClass* type) {$/;"	f	typeref:typename:Meter *
Meter_setCaption	Meter.c	/^void Meter_setCaption(Meter* this, const char* caption) {$/;"	f	typeref:typename:void
Meter_setItems	Meter.h	/^#define Meter_setItems(/;"	d
Meter_setMode	Meter.c	/^void Meter_setMode(Meter* this, int modeIndex) {$/;"	f	typeref:typename:void
Meter_toListItem	Meter.c	/^ListItem* Meter_toListItem(Meter* this, bool moving) {$/;"	f	typeref:typename:ListItem *
Meter_uiName	Meter.h	/^#define Meter_uiName(/;"	d
Meter_updateMode	Meter.h	/^#define Meter_updateMode(/;"	d
Meter_updateModeFn	Meter.h	/^#define Meter_updateModeFn(/;"	d
Meter_updateValues	Meter.h	/^#define Meter_updateValues(/;"	d
MetersEvents	MetersPanel.c	/^static int MetersEvents[] = {' ', 13, ERR, KEY_DC, KEY_F(10)};$/;"	v	typeref:typename:int[]	file:
MetersFunctions	MetersPanel.c	/^static const char* const MetersFunctions[] = {"Style ", "Move  ", "                             /;"	v	typeref:typename:const char * const[]	file:
MetersKeys	MetersPanel.c	/^static const char* const MetersKeys[] = {"Space", "Enter", "  ", "Del", "F10"};$/;"	v	typeref:typename:const char * const[]	file:
MetersMovingEvents	MetersPanel.c	/^static int MetersMovingEvents[] = {' ', 13, KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT, ERR, KEY_DC, /;"	v	typeref:typename:int[]	file:
MetersMovingFunctions	MetersPanel.c	/^static const char* const MetersMovingFunctions[] = {"Style ", "Lock  ", "Up    ", "Down  ", "Lef/;"	v	typeref:typename:const char * const[]	file:
MetersMovingKeys	MetersPanel.c	/^static const char* const MetersMovingKeys[] = {"Space", "Enter", "Up", "Dn", "<-", "->", "  ", "/;"	v	typeref:typename:const char * const[]	file:
MetersPanel	MetersPanel.h	/^typedef struct MetersPanel_ MetersPanel;$/;"	t	typeref:struct:MetersPanel_
MetersPanel_	MetersPanel.h	/^struct MetersPanel_ {$/;"	s
MetersPanel_class	MetersPanel.c	/^PanelClass MetersPanel_class = {$/;"	v	typeref:typename:PanelClass
MetersPanel_delete	MetersPanel.c	/^static void MetersPanel_delete(Object* object) {$/;"	f	typeref:typename:void	file:
MetersPanel_eventHandler	MetersPanel.c	/^static HandlerResult MetersPanel_eventHandler(Panel* super, int ch) {$/;"	f	typeref:typename:HandlerResult	file:
MetersPanel_new	MetersPanel.c	/^MetersPanel* MetersPanel_new(Settings* settings, const char* header, Vector* meters, ScreenManag/;"	f	typeref:typename:MetersPanel *
MetersPanel_setMoving	MetersPanel.c	/^void MetersPanel_setMoving(MetersPanel* this, bool moving) {$/;"	f	typeref:typename:void
Meters_movingBar	MetersPanel.c	/^static FunctionBar* Meters_movingBar = NULL;$/;"	v	typeref:typename:FunctionBar *	file:
NAME	htop.1.in	/^.SH "NAME"$/;"	s	title:HTOP
NICE	Process.h	/^   NICE = 19,$/;"	e	enum:ProcessFields
NLWP	Process.h	/^   NLWP = 51,$/;"	e	enum:ProcessFields
NSWAP	linux/LinuxProcess.h	/^   NSWAP = 35,$/;"	e	enum:UnsupportedProcessFields
NULL_PROCESSFIELD	Process.h	/^   NULL_PROCESSFIELD = 0,$/;"	e	enum:ProcessFields
ONE_DECIMAL_G	Process.c	/^#define ONE_DECIMAL_G /;"	d	file:
ONE_DECIMAL_G	Process.h	/^#define ONE_DECIMAL_G /;"	d
ONE_DECIMAL_K	Process.c	/^#define ONE_DECIMAL_K /;"	d	file:
ONE_DECIMAL_K	Process.h	/^#define ONE_DECIMAL_K /;"	d
ONE_DECIMAL_M	Process.c	/^#define ONE_DECIMAL_M /;"	d	file:
ONE_DECIMAL_M	Process.h	/^#define ONE_DECIMAL_M /;"	d
ONE_G	Process.c	/^#define ONE_G /;"	d	file:
ONE_G	Process.h	/^#define ONE_G /;"	d
ONE_K	Process.c	/^#define ONE_K /;"	d	file:
ONE_K	Process.h	/^#define ONE_K /;"	d
ONE_M	Process.c	/^#define ONE_M /;"	d	file:
ONE_M	Process.h	/^#define ONE_M /;"	d
OOM	linux/LinuxProcess.h	/^   OOM = 114,$/;"	e	enum:LinuxProcessFields
Object	Object.h	/^typedef struct Object_ Object;$/;"	t	typeref:struct:Object_
ObjectClass	Object.h	/^} ObjectClass;$/;"	t	typeref:struct:ObjectClass_
ObjectClass_	Object.h	/^typedef struct ObjectClass_ {$/;"	s
Object_	Object.h	/^struct Object_ {$/;"	s
Object_Compare	Object.h	/^typedef long(*Object_Compare)(const void*, const void*);$/;"	t	typeref:typename:long (*)(const void *,const void *)
Object_Delete	Object.h	/^typedef void(*Object_Delete)(Object*);$/;"	t	typeref:typename:void (*)(Object *)
Object_Display	Object.h	/^typedef void(*Object_Display)(Object*, RichString*);$/;"	t	typeref:typename:void (*)(Object *,RichString *)
Object_class	Object.c	/^ObjectClass Object_class = {$/;"	v	typeref:typename:ObjectClass
Object_compare	Object.h	/^#define Object_compare(/;"	d
Object_delete	Object.h	/^#define Object_delete(/;"	d
Object_display	Object.h	/^#define Object_display(/;"	d
Object_displayFn	Object.h	/^#define Object_displayFn(/;"	d
Object_getClass	Object.h	/^#define Object_getClass(/;"	d
Object_isA	Object.c	/^bool Object_isA(Object* o, const ObjectClass* klass) {$/;"	f	typeref:typename:bool
Object_setClass	Object.h	/^#define Object_setClass(/;"	d
OpenBSDProcess	openbsd/OpenBSDProcess.h	/^} OpenBSDProcess;$/;"	t	typeref:struct:OpenBSDProcess_
OpenBSDProcessField	openbsd/OpenBSDProcess.h	/^} OpenBSDProcessField;$/;"	t	typeref:enum:OpenBSDProcessFields
OpenBSDProcessFields	openbsd/OpenBSDProcess.h	/^typedef enum OpenBSDProcessFields {$/;"	g
OpenBSDProcessList	openbsd/OpenBSDProcessList.h	/^} OpenBSDProcessList;$/;"	t	typeref:struct:OpenBSDProcessList_
OpenBSDProcessList_	openbsd/OpenBSDProcessList.h	/^typedef struct OpenBSDProcessList_ {$/;"	s
OpenBSDProcessList_readProcessName	openbsd/OpenBSDProcessList.c	/^char *OpenBSDProcessList_readProcessName(kvm_t* kd, struct kinfo_proc* kproc, int* basenameEnd) /;"	f	typeref:typename:char *
OpenBSDProcessList_scanMemoryInfo	openbsd/OpenBSDProcessList.c	/^static inline void OpenBSDProcessList_scanMemoryInfo(ProcessList* pl) {$/;"	f	typeref:typename:void	file:
OpenBSDProcess_	openbsd/OpenBSDProcess.h	/^typedef struct OpenBSDProcess_ {$/;"	s
OpenBSDProcess_class	openbsd/OpenBSDProcess.c	/^ProcessClass OpenBSDProcess_class = {$/;"	v	typeref:typename:ProcessClass
OpenBSDProcess_compare	openbsd/OpenBSDProcess.c	/^long OpenBSDProcess_compare(const void* v1, const void* v2) {$/;"	f	typeref:typename:long
OpenBSDProcess_new	openbsd/OpenBSDProcess.c	/^OpenBSDProcess* OpenBSDProcess_new(Settings* settings) {$/;"	f	typeref:typename:OpenBSDProcess *
OpenBSDProcess_writeField	openbsd/OpenBSDProcess.c	/^void OpenBSDProcess_writeField(Process* this, RichString* str, ProcessField field) {$/;"	f	typeref:typename:void
OpenFilesScreen	OpenFilesScreen.h	/^} OpenFilesScreen;$/;"	t	typeref:struct:OpenFilesScreen_
OpenFilesScreen_	OpenFilesScreen.h	/^typedef struct OpenFilesScreen_ {$/;"	s
OpenFilesScreen_class	OpenFilesScreen.c	/^InfoScreenClass OpenFilesScreen_class = {$/;"	v	typeref:typename:InfoScreenClass
OpenFilesScreen_delete	OpenFilesScreen.c	/^void OpenFilesScreen_delete(Object* this) {$/;"	f	typeref:typename:void
OpenFilesScreen_draw	OpenFilesScreen.c	/^void OpenFilesScreen_draw(InfoScreen* this) {$/;"	f	typeref:typename:void
OpenFilesScreen_getProcessData	OpenFilesScreen.c	/^static OpenFiles_ProcessData* OpenFilesScreen_getProcessData(pid_t pid) {$/;"	f	typeref:typename:OpenFiles_ProcessData *	file:
OpenFilesScreen_new	OpenFilesScreen.c	/^OpenFilesScreen* OpenFilesScreen_new(Process* process) {$/;"	f	typeref:typename:OpenFilesScreen *
OpenFilesScreen_scan	OpenFilesScreen.c	/^void OpenFilesScreen_scan(InfoScreen* this) {$/;"	f	typeref:typename:void
OpenFiles_Data	OpenFilesScreen.h	/^} OpenFiles_Data;$/;"	t	typeref:struct:OpenFiles_Data_
OpenFiles_Data_	OpenFilesScreen.h	/^typedef struct OpenFiles_Data_ {$/;"	s
OpenFiles_Data_clear	OpenFilesScreen.c	/^static inline void OpenFiles_Data_clear(OpenFiles_Data* data) {$/;"	f	typeref:typename:void	file:
OpenFiles_FileData	OpenFilesScreen.h	/^} OpenFiles_FileData;$/;"	t	typeref:struct:OpenFiles_FileData_
OpenFiles_FileData_	OpenFilesScreen.h	/^typedef struct OpenFiles_FileData_ {$/;"	s
OpenFiles_ProcessData	OpenFilesScreen.h	/^} OpenFiles_ProcessData;$/;"	t	typeref:struct:OpenFiles_ProcessData_
OpenFiles_ProcessData_	OpenFilesScreen.h	/^typedef struct OpenFiles_ProcessData_ {$/;"	s
Orientation	ScreenManager.h	/^} Orientation;$/;"	t	typeref:enum:Orientation_
Orientation_	ScreenManager.h	/^typedef enum Orientation_ {$/;"	g
PAGE_SIZE	Process.c	/^#define PAGE_SIZE /;"	d	file:
PAGE_SIZE	Process.h	/^#define PAGE_SIZE /;"	d
PAGE_SIZE_KB	Process.c	/^#define PAGE_SIZE_KB /;"	d	file:
PAGE_SIZE_KB	Process.h	/^#define PAGE_SIZE_KB /;"	d
PANEL_HEADER_FOCUS	CRT.h	/^   PANEL_HEADER_FOCUS,$/;"	e	enum:ColorElements_
PANEL_HEADER_UNFOCUS	CRT.h	/^   PANEL_HEADER_UNFOCUS,$/;"	e	enum:ColorElements_
PANEL_SELECTION_FOCUS	CRT.h	/^   PANEL_SELECTION_FOCUS,$/;"	e	enum:ColorElements_
PANEL_SELECTION_FOLLOW	CRT.h	/^   PANEL_SELECTION_FOLLOW,$/;"	e	enum:ColorElements_
PANEL_SELECTION_UNFOCUS	CRT.h	/^   PANEL_SELECTION_UNFOCUS,$/;"	e	enum:ColorElements_
PERCENT_CPU	Process.h	/^   PERCENT_CPU = 47,$/;"	e	enum:ProcessFields
PERCENT_CPU_DELAY	linux/LinuxProcess.h	/^   PERCENT_CPU_DELAY = 116,$/;"	e	enum:LinuxProcessFields
PERCENT_IO_DELAY	linux/LinuxProcess.h	/^   PERCENT_IO_DELAY = 117,$/;"	e	enum:LinuxProcessFields
PERCENT_MEM	Process.h	/^   PERCENT_MEM = 48,$/;"	e	enum:ProcessFields
PERCENT_SWAP_DELAY	linux/LinuxProcess.h	/^   PERCENT_SWAP_DELAY = 118,$/;"	e	enum:LinuxProcessFields
PGRP	Process.h	/^   PGRP = 5,$/;"	e	enum:ProcessFields
PID	Process.h	/^   PID = 1,$/;"	e	enum:ProcessFields
PIXPERROW_ASCII	Meter.c	/^#define PIXPERROW_ASCII /;"	d	file:
PIXPERROW_ASCII	Meter.h	/^#define PIXPERROW_ASCII /;"	d
PIXPERROW_UTF8	Meter.c	/^#define PIXPERROW_UTF8 /;"	d	file:
PIXPERROW_UTF8	Meter.h	/^#define PIXPERROW_UTF8 /;"	d
POOLID	solaris/SolarisProcess.h	/^   POOLID = 104,$/;"	e	enum:SolarisProcessFields
PPID	Process.h	/^   PPID = 4,$/;"	e	enum:ProcessFields
PRIORITY	Process.h	/^   PRIORITY = 18,$/;"	e	enum:ProcessFields
PROCDIR	configure.ac	/^   AC_DEFINE_UNQUOTED(PROCDIR, "$withval", [Path of proc filesystem])$/;"	d
PROCDIR	configure.ac	/^AC_DEFINE(PROCDIR, "\/proc", [Path of proc filesystem]))$/;"	d
PROCDIR	linux/LinuxProcessList.h	/^#define PROCDIR /;"	d
PROCESS	CRT.h	/^   PROCESS,$/;"	e	enum:ColorElements_
PROCESSOR	Process.h	/^   PROCESSOR = 38,$/;"	e	enum:ProcessFields
PROCESS_BASENAME	CRT.h	/^   PROCESS_BASENAME,$/;"	e	enum:ColorElements_
PROCESS_D_STATE	CRT.h	/^   PROCESS_D_STATE,$/;"	e	enum:ColorElements_
PROCESS_FLAG_IO	Process.h	/^#define PROCESS_FLAG_IO /;"	d
PROCESS_FLAG_LINUX_CGROUP	linux/LinuxProcess.h	/^#define PROCESS_FLAG_LINUX_CGROUP /;"	d
PROCESS_FLAG_LINUX_IOPRIO	linux/LinuxProcess.h	/^#define PROCESS_FLAG_LINUX_IOPRIO /;"	d
PROCESS_FLAG_LINUX_OOM	linux/LinuxProcess.h	/^#define PROCESS_FLAG_LINUX_OOM /;"	d
PROCESS_FLAG_LINUX_OPENVZ	linux/LinuxProcess.h	/^#define PROCESS_FLAG_LINUX_OPENVZ /;"	d
PROCESS_FLAG_LINUX_VSERVER	linux/LinuxProcess.h	/^#define PROCESS_FLAG_LINUX_VSERVER /;"	d
PROCESS_HIGH_PRIORITY	CRT.h	/^   PROCESS_HIGH_PRIORITY,$/;"	e	enum:ColorElements_
PROCESS_LOW_PRIORITY	CRT.h	/^   PROCESS_LOW_PRIORITY,$/;"	e	enum:ColorElements_
PROCESS_MEGABYTES	CRT.h	/^   PROCESS_MEGABYTES,$/;"	e	enum:ColorElements_
PROCESS_R_STATE	CRT.h	/^   PROCESS_R_STATE,$/;"	e	enum:ColorElements_
PROCESS_SHADOW	CRT.h	/^   PROCESS_SHADOW,$/;"	e	enum:ColorElements_
PROCESS_TAG	CRT.h	/^   PROCESS_TAG,$/;"	e	enum:ColorElements_
PROCESS_THREAD	CRT.h	/^   PROCESS_THREAD,$/;"	e	enum:ColorElements_
PROCESS_THREAD_BASENAME	CRT.h	/^   PROCESS_THREAD_BASENAME,$/;"	e	enum:ColorElements_
PROCESS_TREE	CRT.h	/^   PROCESS_TREE,$/;"	e	enum:ColorElements_
PROCMEMINFOFILE	linux/LinuxProcessList.h	/^#define PROCMEMINFOFILE /;"	d
PROCSTATFILE	linux/LinuxProcessList.h	/^#define PROCSTATFILE /;"	d
PROCTTYDRIVERSFILE	linux/LinuxProcessList.h	/^#define PROCTTYDRIVERSFILE /;"	d
PROC_LINE_LENGTH	linux/LinuxProcessList.h	/^#define PROC_LINE_LENGTH /;"	d
PROJID	solaris/SolarisProcess.h	/^   PROJID = 102,$/;"	e	enum:SolarisProcessFields
Panel	Panel.h	/^typedef struct Panel_ Panel;$/;"	t	typeref:struct:Panel_
PanelClass	Panel.h	/^} PanelClass;$/;"	t	typeref:struct:PanelClass_
PanelClass_	Panel.h	/^typedef struct PanelClass_ {$/;"	s
Panel_	Panel.h	/^struct Panel_ {$/;"	s
Panel_EventHandler	Panel.h	/^typedef HandlerResult(*Panel_EventHandler)(Panel*, int);$/;"	t	typeref:typename:HandlerResult (*)(Panel *,int)
Panel_add	Panel.c	/^void Panel_add(Panel* this, Object* o) {$/;"	f	typeref:typename:void
Panel_class	Panel.c	/^PanelClass Panel_class = {$/;"	v	typeref:typename:PanelClass
Panel_delete	Panel.c	/^void Panel_delete(Object* cast) {$/;"	f	typeref:typename:void
Panel_done	Panel.c	/^void Panel_done(Panel* this) {$/;"	f	typeref:typename:void
Panel_draw	Panel.c	/^void Panel_draw(Panel* this, bool focus) {$/;"	f	typeref:typename:void
Panel_eventHandler	Panel.h	/^#define Panel_eventHandler(/;"	d
Panel_eventHandlerFn	Panel.h	/^#define Panel_eventHandlerFn(/;"	d
Panel_get	Panel.c	/^Object* Panel_get(Panel* this, int i) {$/;"	f	typeref:typename:Object *
Panel_getHeader	Panel.c	/^RichString* Panel_getHeader(Panel* this) {$/;"	f	typeref:typename:RichString *
Panel_getSelected	Panel.c	/^Object* Panel_getSelected(Panel* this) {$/;"	f	typeref:typename:Object *
Panel_getSelectedIndex	Panel.c	/^int Panel_getSelectedIndex(Panel* this) {$/;"	f	typeref:typename:int
Panel_init	Panel.c	/^void Panel_init(Panel* this, int x, int y, int w, int h, ObjectClass* type, bool owner, Function/;"	f	typeref:typename:void
Panel_insert	Panel.c	/^void Panel_insert(Panel* this, int i, Object* o) {$/;"	f	typeref:typename:void
Panel_move	Panel.c	/^void Panel_move(Panel* this, int x, int y) {$/;"	f	typeref:typename:void
Panel_moveSelectedDown	Panel.c	/^void Panel_moveSelectedDown(Panel* this) {$/;"	f	typeref:typename:void
Panel_moveSelectedUp	Panel.c	/^void Panel_moveSelectedUp(Panel* this) {$/;"	f	typeref:typename:void
Panel_new	Panel.c	/^Panel* Panel_new(int x, int y, int w, int h, bool owner, ObjectClass* type, FunctionBar* fuBar) /;"	f	typeref:typename:Panel *
Panel_onKey	Panel.c	/^bool Panel_onKey(Panel* this, int key) {$/;"	f	typeref:typename:bool
Panel_prune	Panel.c	/^void Panel_prune(Panel* this) {$/;"	f	typeref:typename:void
Panel_remove	Panel.c	/^Object* Panel_remove(Panel* this, int i) {$/;"	f	typeref:typename:Object *
Panel_resize	Panel.c	/^void Panel_resize(Panel* this, int w, int h) {$/;"	f	typeref:typename:void
Panel_selectByTyping	Panel.c	/^HandlerResult Panel_selectByTyping(Panel* this, int ch) {$/;"	f	typeref:typename:HandlerResult
Panel_set	Panel.c	/^void Panel_set(Panel* this, int i, Object* o) {$/;"	f	typeref:typename:void
Panel_setDefaultBar	Panel.h	/^#define Panel_setDefaultBar(/;"	d
Panel_setHeader	Panel.c	/^inline void Panel_setHeader(Panel* this, const char* header) {$/;"	f	typeref:typename:void
Panel_setSelected	Panel.c	/^void Panel_setSelected(Panel* this, int selected) {$/;"	f	typeref:typename:void
Panel_setSelectionColor	Panel.c	/^void Panel_setSelectionColor(Panel* this, int color) {$/;"	f	typeref:typename:void
Panel_size	Panel.c	/^int Panel_size(Panel* this) {$/;"	f	typeref:typename:int
Platform_actionSetIOPriority	linux/Platform.c	/^static Htop_Reaction Platform_actionSetIOPriority(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
Platform_buildenv	solaris/Platform.c	/^static int Platform_buildenv(void *accum, struct ps_prochandle *Phandle, uintptr_t addr, const c/;"	f	typeref:typename:int	file:
Platform_defaultFields	darwin/Platform.c	/^ProcessField Platform_defaultFields[] = { PID, USER, PRIORITY, NICE, M_SIZE, M_RESIDENT, STATE, /;"	v	typeref:typename:ProcessField[]
Platform_defaultFields	dragonflybsd/Platform.c	/^ProcessField Platform_defaultFields[] = { PID, USER, PRIORITY, NICE, M_SIZE, M_RESIDENT, STATE, /;"	v	typeref:typename:ProcessField[]
Platform_defaultFields	freebsd/Platform.c	/^ProcessField Platform_defaultFields[] = { PID, USER, PRIORITY, NICE, M_SIZE, M_RESIDENT, STATE, /;"	v	typeref:typename:ProcessField[]
Platform_defaultFields	linux/Platform.c	/^ProcessField Platform_defaultFields[] = { PID, USER, PRIORITY, NICE, M_SIZE, M_RESIDENT, M_SHARE/;"	v	typeref:typename:ProcessField[]
Platform_defaultFields	openbsd/Platform.c	/^ProcessField Platform_defaultFields[] = { PID, USER, PRIORITY, NICE, M_SIZE, M_RESIDENT, STATE, /;"	v	typeref:typename:ProcessField[]
Platform_defaultFields	solaris/Platform.c	/^ProcessField Platform_defaultFields[] = { PID, LWPID, USER, PRIORITY, NICE, M_SIZE, M_RESIDENT, /;"	v	typeref:typename:ProcessField[]
Platform_defaultFields	unsupported/Platform.c	/^ProcessField Platform_defaultFields[] = { PID, USER, PRIORITY, NICE, M_SIZE, M_RESIDENT, STATE, /;"	v	typeref:typename:ProcessField[]
Platform_getLoadAverage	darwin/Platform.c	/^void Platform_getLoadAverage(double* one, double* five, double* fifteen) {$/;"	f	typeref:typename:void
Platform_getLoadAverage	dragonflybsd/Platform.c	/^void Platform_getLoadAverage(double* one, double* five, double* fifteen) {$/;"	f	typeref:typename:void
Platform_getLoadAverage	freebsd/Platform.c	/^void Platform_getLoadAverage(double* one, double* five, double* fifteen) {$/;"	f	typeref:typename:void
Platform_getLoadAverage	linux/Platform.c	/^void Platform_getLoadAverage(double* one, double* five, double* fifteen) {$/;"	f	typeref:typename:void
Platform_getLoadAverage	openbsd/Platform.c	/^void Platform_getLoadAverage(double* one, double* five, double* fifteen) {$/;"	f	typeref:typename:void
Platform_getLoadAverage	solaris/Platform.c	/^void Platform_getLoadAverage(double* one, double* five, double* fifteen) {$/;"	f	typeref:typename:void
Platform_getLoadAverage	unsupported/Platform.c	/^void Platform_getLoadAverage(double* one, double* five, double* fifteen) {$/;"	f	typeref:typename:void
Platform_getMaxPid	darwin/Platform.c	/^int Platform_getMaxPid() {$/;"	f	typeref:typename:int
Platform_getMaxPid	dragonflybsd/Platform.c	/^int Platform_getMaxPid() {$/;"	f	typeref:typename:int
Platform_getMaxPid	freebsd/Platform.c	/^int Platform_getMaxPid() {$/;"	f	typeref:typename:int
Platform_getMaxPid	linux/Platform.c	/^int Platform_getMaxPid() {$/;"	f	typeref:typename:int
Platform_getMaxPid	openbsd/Platform.c	/^int Platform_getMaxPid() {$/;"	f	typeref:typename:int
Platform_getMaxPid	solaris/Platform.c	/^int Platform_getMaxPid() {$/;"	f	typeref:typename:int
Platform_getMaxPid	unsupported/Platform.c	/^int Platform_getMaxPid() {$/;"	f	typeref:typename:int
Platform_getProcessEnv	darwin/Platform.c	/^char* Platform_getProcessEnv(pid_t pid) {$/;"	f	typeref:typename:char *
Platform_getProcessEnv	dragonflybsd/Platform.c	/^char* Platform_getProcessEnv(pid_t pid) {$/;"	f	typeref:typename:char *
Platform_getProcessEnv	freebsd/Platform.c	/^char* Platform_getProcessEnv(pid_t pid) {$/;"	f	typeref:typename:char *
Platform_getProcessEnv	linux/Platform.c	/^char* Platform_getProcessEnv(pid_t pid) {$/;"	f	typeref:typename:char *
Platform_getProcessEnv	openbsd/Platform.c	/^char* Platform_getProcessEnv(pid_t pid) {$/;"	f	typeref:typename:char *
Platform_getProcessEnv	solaris/Platform.c	/^char* Platform_getProcessEnv(pid_t pid) {$/;"	f	typeref:typename:char *
Platform_getProcessEnv	unsupported/Platform.c	/^char* Platform_getProcessEnv(pid_t pid) {$/;"	f	typeref:typename:char *
Platform_getUptime	darwin/Platform.c	/^int Platform_getUptime() {$/;"	f	typeref:typename:int
Platform_getUptime	dragonflybsd/Platform.c	/^int Platform_getUptime() {$/;"	f	typeref:typename:int
Platform_getUptime	freebsd/Platform.c	/^int Platform_getUptime() {$/;"	f	typeref:typename:int
Platform_getUptime	linux/Platform.c	/^int Platform_getUptime() {$/;"	f	typeref:typename:int
Platform_getUptime	openbsd/Platform.c	/^int Platform_getUptime() {$/;"	f	typeref:typename:int
Platform_getUptime	solaris/Platform.c	/^int Platform_getUptime() {$/;"	f	typeref:typename:int
Platform_getUptime	unsupported/Platform.c	/^int Platform_getUptime() {$/;"	f	typeref:typename:int
Platform_meterTypes	darwin/Platform.c	/^MeterClass* Platform_meterTypes[] = {$/;"	v	typeref:typename:MeterClass * []
Platform_meterTypes	dragonflybsd/Platform.c	/^MeterClass* Platform_meterTypes[] = {$/;"	v	typeref:typename:MeterClass * []
Platform_meterTypes	freebsd/Platform.c	/^MeterClass* Platform_meterTypes[] = {$/;"	v	typeref:typename:MeterClass * []
Platform_meterTypes	linux/Platform.c	/^MeterClass* Platform_meterTypes[] = {$/;"	v	typeref:typename:MeterClass * []
Platform_meterTypes	openbsd/Platform.c	/^MeterClass* Platform_meterTypes[] = {$/;"	v	typeref:typename:MeterClass * []
Platform_meterTypes	solaris/Platform.c	/^MeterClass* Platform_meterTypes[] = {$/;"	v	typeref:typename:MeterClass * []
Platform_meterTypes	unsupported/Platform.c	/^MeterClass* Platform_meterTypes[] = {$/;"	v	typeref:typename:MeterClass * []
Platform_numberOfFields	darwin/Platform.c	/^int Platform_numberOfFields = 100;$/;"	v	typeref:typename:int
Platform_numberOfFields	dragonflybsd/Platform.c	/^int Platform_numberOfFields = LAST_PROCESSFIELD;$/;"	v	typeref:typename:int
Platform_numberOfFields	freebsd/Platform.c	/^int Platform_numberOfFields = LAST_PROCESSFIELD;$/;"	v	typeref:typename:int
Platform_numberOfFields	linux/Platform.c	/^int Platform_numberOfFields = LAST_PROCESSFIELD;$/;"	v	typeref:typename:int
Platform_numberOfFields	openbsd/Platform.c	/^int Platform_numberOfFields = LAST_PROCESSFIELD;$/;"	v	typeref:typename:int
Platform_numberOfFields	solaris/Platform.c	/^int Platform_numberOfFields = LAST_PROCESSFIELD;$/;"	v	typeref:typename:int
Platform_numberOfFields	unsupported/Platform.c	/^int Platform_numberOfFields = 100;$/;"	v	typeref:typename:int
Platform_numberOfSignals	darwin/Platform.c	/^const unsigned int Platform_numberOfSignals = sizeof(Platform_signals)\/sizeof(SignalItem);$/;"	v	typeref:typename:const unsigned int
Platform_numberOfSignals	dragonflybsd/Platform.c	/^const unsigned int Platform_numberOfSignals = sizeof(Platform_signals)\/sizeof(SignalItem);$/;"	v	typeref:typename:const unsigned int
Platform_numberOfSignals	freebsd/Platform.c	/^const unsigned int Platform_numberOfSignals = sizeof(Platform_signals)\/sizeof(SignalItem);$/;"	v	typeref:typename:const unsigned int
Platform_numberOfSignals	linux/Platform.c	/^const unsigned int Platform_numberOfSignals = sizeof(Platform_signals)\/sizeof(SignalItem);$/;"	v	typeref:typename:const unsigned int
Platform_numberOfSignals	openbsd/Platform.c	/^const unsigned int Platform_numberOfSignals = sizeof(Platform_signals)\/sizeof(SignalItem);$/;"	v	typeref:typename:const unsigned int
Platform_numberOfSignals	solaris/Platform.c	/^const unsigned int Platform_numberOfSignals = sizeof(Platform_signals)\/sizeof(SignalItem);$/;"	v	typeref:typename:const unsigned int
Platform_numberOfSignals	unsupported/Platform.c	/^const unsigned int Platform_numberOfSignals = sizeof(Platform_signals)\/sizeof(SignalItem);$/;"	v	typeref:typename:const unsigned int
Platform_setBindings	darwin/Platform.c	/^void Platform_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Platform_setBindings	dragonflybsd/Platform.c	/^void Platform_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Platform_setBindings	freebsd/Platform.c	/^void Platform_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Platform_setBindings	linux/Platform.c	/^void Platform_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Platform_setBindings	openbsd/Platform.c	/^void Platform_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Platform_setBindings	solaris/Platform.c	/^void Platform_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Platform_setBindings	unsupported/Platform.c	/^void Platform_setBindings(Htop_Action* keys) {$/;"	f	typeref:typename:void
Platform_setCPUAverageValues	darwin/Platform.c	/^static double Platform_setCPUAverageValues(Meter* mtr) {$/;"	f	typeref:typename:double	file:
Platform_setCPUValues	darwin/Platform.c	/^double Platform_setCPUValues(Meter* mtr, int cpu) {$/;"	f	typeref:typename:double
Platform_setCPUValues	dragonflybsd/Platform.c	/^double Platform_setCPUValues(Meter* this, int cpu) {$/;"	f	typeref:typename:double
Platform_setCPUValues	freebsd/Platform.c	/^double Platform_setCPUValues(Meter* this, int cpu) {$/;"	f	typeref:typename:double
Platform_setCPUValues	linux/Platform.c	/^double Platform_setCPUValues(Meter* this, int cpu) {$/;"	f	typeref:typename:double
Platform_setCPUValues	openbsd/Platform.c	/^double Platform_setCPUValues(Meter* this, int cpu) {$/;"	f	typeref:typename:double
Platform_setCPUValues	solaris/Platform.c	/^double Platform_setCPUValues(Meter* this, int cpu) {$/;"	f	typeref:typename:double
Platform_setCPUValues	unsupported/Platform.c	/^double Platform_setCPUValues(Meter* this, int cpu) {$/;"	f	typeref:typename:double
Platform_setMemoryValues	darwin/Platform.c	/^void Platform_setMemoryValues(Meter* mtr) {$/;"	f	typeref:typename:void
Platform_setMemoryValues	dragonflybsd/Platform.c	/^void Platform_setMemoryValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setMemoryValues	freebsd/Platform.c	/^void Platform_setMemoryValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setMemoryValues	linux/Platform.c	/^void Platform_setMemoryValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setMemoryValues	openbsd/Platform.c	/^void Platform_setMemoryValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setMemoryValues	solaris/Platform.c	/^void Platform_setMemoryValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setMemoryValues	unsupported/Platform.c	/^void Platform_setMemoryValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setSwapValues	darwin/Platform.c	/^void Platform_setSwapValues(Meter* mtr) {$/;"	f	typeref:typename:void
Platform_setSwapValues	dragonflybsd/Platform.c	/^void Platform_setSwapValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setSwapValues	freebsd/Platform.c	/^void Platform_setSwapValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setSwapValues	linux/Platform.c	/^void Platform_setSwapValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setSwapValues	openbsd/Platform.c	/^void Platform_setSwapValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setSwapValues	solaris/Platform.c	/^void Platform_setSwapValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setSwapValues	unsupported/Platform.c	/^void Platform_setSwapValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setTasksValues	dragonflybsd/Platform.c	/^void Platform_setTasksValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setTasksValues	freebsd/Platform.c	/^void Platform_setTasksValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_setTasksValues	openbsd/Platform.c	/^void Platform_setTasksValues(Meter* this) {$/;"	f	typeref:typename:void
Platform_signals	darwin/Platform.c	/^const SignalItem Platform_signals[] = {$/;"	v	typeref:typename:const SignalItem[]
Platform_signals	dragonflybsd/Platform.c	/^const SignalItem Platform_signals[] = {$/;"	v	typeref:typename:const SignalItem[]
Platform_signals	freebsd/Platform.c	/^const SignalItem Platform_signals[] = {$/;"	v	typeref:typename:const SignalItem[]
Platform_signals	linux/Platform.c	/^const SignalItem Platform_signals[] = {$/;"	v	typeref:typename:const SignalItem[]
Platform_signals	openbsd/Platform.c	/^const SignalItem Platform_signals[] = {$/;"	v	typeref:typename:const SignalItem[]
Platform_signals	solaris/Platform.c	/^const SignalItem Platform_signals[] = {$/;"	v	typeref:typename:const SignalItem[]
Platform_signals	unsupported/Platform.c	/^const SignalItem Platform_signals[] = {$/;"	v	typeref:typename:const SignalItem[]
Process	Process.h	/^} Process;$/;"	t	typeref:struct:Process_
ProcessClass	Process.h	/^} ProcessClass;$/;"	t	typeref:struct:ProcessClass_
ProcessClass_	Process.h	/^typedef struct ProcessClass_ {$/;"	s
ProcessField	Process.h	/^} ProcessField;$/;"	t	typeref:enum:ProcessFields
ProcessFieldData	Process.h	/^} ProcessFieldData;$/;"	t	typeref:struct:ProcessFieldData_
ProcessFieldData_	Process.h	/^typedef struct ProcessFieldData_ {$/;"	s
ProcessFields	Process.h	/^typedef enum ProcessFields {$/;"	g
ProcessList	ProcessList.h	/^} ProcessList;$/;"	t	typeref:struct:ProcessList_
ProcessList_	ProcessList.h	/^typedef struct ProcessList_ {$/;"	s
ProcessList_add	ProcessList.c	/^void ProcessList_add(ProcessList* this, Process* p) {$/;"	f	typeref:typename:void
ProcessList_allocateCPULoadInfo	darwin/DarwinProcessList.c	/^unsigned ProcessList_allocateCPULoadInfo(processor_cpu_load_info_t *p) {$/;"	f	typeref:typename:unsigned
ProcessList_buildTree	ProcessList.c	/^static void ProcessList_buildTree(ProcessList* this, pid_t pid, int level, int indent, int direc/;"	f	typeref:typename:void	file:
ProcessList_delete	darwin/DarwinProcessList.c	/^void ProcessList_delete(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_delete	dragonflybsd/DragonFlyBSDProcessList.c	/^void ProcessList_delete(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_delete	freebsd/FreeBSDProcessList.c	/^void ProcessList_delete(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_delete	linux/LinuxProcessList.c	/^void ProcessList_delete(ProcessList* pl) {$/;"	f	typeref:typename:void
ProcessList_delete	openbsd/OpenBSDProcessList.c	/^void ProcessList_delete(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_delete	solaris/SolarisProcessList.c	/^void ProcessList_delete(ProcessList* pl) {$/;"	f	typeref:typename:void
ProcessList_delete	unsupported/UnsupportedProcessList.c	/^void ProcessList_delete(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_done	ProcessList.c	/^void ProcessList_done(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_expandTree	ProcessList.c	/^void ProcessList_expandTree(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_freeCPULoadInfo	darwin/DarwinProcessList.c	/^void ProcessList_freeCPULoadInfo(processor_cpu_load_info_t *p) {$/;"	f	typeref:typename:void
ProcessList_get	ProcessList.c	/^Process* ProcessList_get(ProcessList* this, int idx) {$/;"	f	typeref:typename:Process *
ProcessList_getHostInfo	darwin/DarwinProcessList.c	/^void ProcessList_getHostInfo(host_basic_info_data_t *p) {$/;"	f	typeref:typename:void
ProcessList_getKInfoProcs	darwin/DarwinProcessList.c	/^struct kinfo_proc *ProcessList_getKInfoProcs(size_t *count) {$/;"	f	typeref:struct:kinfo_proc *
ProcessList_getProcess	ProcessList.c	/^Process* ProcessList_getProcess(ProcessList* this, pid_t pid, bool* preExisting, Process_New con/;"	f	typeref:typename:Process *
ProcessList_getVMStats	darwin/DarwinProcessList.c	/^void ProcessList_getVMStats(vm_statistics_t p) {$/;"	f	typeref:typename:void
ProcessList_goThroughEntries	darwin/DarwinProcessList.c	/^void ProcessList_goThroughEntries(ProcessList* super) {$/;"	f	typeref:typename:void
ProcessList_goThroughEntries	dragonflybsd/DragonFlyBSDProcessList.c	/^void ProcessList_goThroughEntries(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_goThroughEntries	freebsd/FreeBSDProcessList.c	/^void ProcessList_goThroughEntries(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_goThroughEntries	linux/LinuxProcessList.c	/^void ProcessList_goThroughEntries(ProcessList* super) {$/;"	f	typeref:typename:void
ProcessList_goThroughEntries	openbsd/OpenBSDProcessList.c	/^void ProcessList_goThroughEntries(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_goThroughEntries	solaris/SolarisProcessList.c	/^void ProcessList_goThroughEntries(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_goThroughEntries	unsupported/UnsupportedProcessList.c	/^void ProcessList_goThroughEntries(ProcessList* super) {$/;"	f	typeref:typename:void
ProcessList_init	ProcessList.c	/^ProcessList* ProcessList_init(ProcessList* this, ObjectClass* klass, UsersTable* usersTable, Has/;"	f	typeref:typename:ProcessList *
ProcessList_keyAt	ProcessList.c	/^ProcessField ProcessList_keyAt(ProcessList* this, int at) {$/;"	f	typeref:typename:ProcessField
ProcessList_new	darwin/DarwinProcessList.c	/^ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidWhiteList, uid_t userId) {$/;"	f	typeref:typename:ProcessList *
ProcessList_new	dragonflybsd/DragonFlyBSDProcessList.c	/^ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidWhiteList, uid_t userId) {$/;"	f	typeref:typename:ProcessList *
ProcessList_new	freebsd/FreeBSDProcessList.c	/^ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidWhiteList, uid_t userId) {$/;"	f	typeref:typename:ProcessList *
ProcessList_new	linux/LinuxProcessList.c	/^ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidWhiteList, uid_t userId) {$/;"	f	typeref:typename:ProcessList *
ProcessList_new	openbsd/OpenBSDProcessList.c	/^ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidWhiteList, uid_t userId) {$/;"	f	typeref:typename:ProcessList *
ProcessList_new	solaris/SolarisProcessList.c	/^ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidWhiteList, uid_t userId) {$/;"	f	typeref:typename:ProcessList *
ProcessList_new	unsupported/UnsupportedProcessList.c	/^ProcessList* ProcessList_new(UsersTable* usersTable, Hashtable* pidWhiteList, uid_t userId) {$/;"	f	typeref:typename:ProcessList *
ProcessList_printHeader	ProcessList.c	/^void ProcessList_printHeader(ProcessList* this, RichString* header) {$/;"	f	typeref:typename:void
ProcessList_rebuildPanel	ProcessList.c	/^void ProcessList_rebuildPanel(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_remove	ProcessList.c	/^void ProcessList_remove(ProcessList* this, Process* p) {$/;"	f	typeref:typename:void
ProcessList_scan	ProcessList.c	/^void ProcessList_scan(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessList_setPanel	ProcessList.c	/^void ProcessList_setPanel(ProcessList* this, Panel* panel) {$/;"	f	typeref:typename:void
ProcessList_size	ProcessList.c	/^int ProcessList_size(ProcessList* this) {$/;"	f	typeref:typename:int
ProcessList_sort	ProcessList.c	/^void ProcessList_sort(ProcessList* this) {$/;"	f	typeref:typename:void
ProcessPidColumn	Process.h	/^} ProcessPidColumn;$/;"	t	typeref:struct:ProcessPidColumn_
ProcessPidColumn_	Process.h	/^typedef struct ProcessPidColumn_ {$/;"	s
Process_	Process.h	/^typedef struct Process_ {$/;"	s
Process_New	Process.h	/^typedef Process*(*Process_New)(struct Settings_*);$/;"	t	typeref:typename:Process * (*)(struct Settings_ *)
Process_WriteField	Process.h	/^typedef void (*Process_WriteField)(Process*, RichString*, ProcessField);$/;"	t	typeref:typename:void (*)(Process *,RichString *,ProcessField)
Process_changePriorityBy	Process.c	/^bool Process_changePriorityBy(Process* this, int delta) {$/;"	f	typeref:typename:bool
Process_class	Process.c	/^ProcessClass Process_class = {$/;"	v	typeref:typename:ProcessClass
Process_colorNumber	Process.c	/^void Process_colorNumber(RichString* str, unsigned long long number, bool coloring) {$/;"	f	typeref:typename:void
Process_compare	Process.c	/^long Process_compare(const void* v1, const void* v2) {$/;"	f	typeref:typename:long
Process_delete	darwin/DarwinProcess.c	/^void Process_delete(Object* cast) {$/;"	f	typeref:typename:void
Process_delete	dragonflybsd/DragonFlyBSDProcess.c	/^void Process_delete(Object* cast) {$/;"	f	typeref:typename:void
Process_delete	freebsd/FreeBSDProcess.c	/^void Process_delete(Object* cast) {$/;"	f	typeref:typename:void
Process_delete	linux/LinuxProcess.c	/^void Process_delete(Object* cast) {$/;"	f	typeref:typename:void
Process_delete	openbsd/OpenBSDProcess.c	/^void Process_delete(Object* cast) {$/;"	f	typeref:typename:void
Process_delete	solaris/SolarisProcess.c	/^void Process_delete(Object* cast) {$/;"	f	typeref:typename:void
Process_delete	unsupported/UnsupportedProcess.h	/^#define Process_delete /;"	d
Process_display	Process.c	/^void Process_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void
Process_done	Process.c	/^void Process_done(Process* this) {$/;"	f	typeref:typename:void
Process_fields	darwin/Platform.c	/^ProcessFieldData Process_fields[] = {$/;"	v	typeref:typename:ProcessFieldData[]
Process_fields	dragonflybsd/DragonFlyBSDProcess.c	/^ProcessFieldData Process_fields[] = {$/;"	v	typeref:typename:ProcessFieldData[]
Process_fields	freebsd/FreeBSDProcess.c	/^ProcessFieldData Process_fields[] = {$/;"	v	typeref:typename:ProcessFieldData[]
Process_fields	linux/LinuxProcess.c	/^ProcessFieldData Process_fields[] = {$/;"	v	typeref:typename:ProcessFieldData[]
Process_fields	openbsd/OpenBSDProcess.c	/^ProcessFieldData Process_fields[] = {$/;"	v	typeref:typename:ProcessFieldData[]
Process_fields	solaris/SolarisProcess.c	/^ProcessFieldData Process_fields[] = {$/;"	v	typeref:typename:ProcessFieldData[]
Process_fields	unsupported/Platform.c	/^ProcessFieldData Process_fields[] = {$/;"	v	typeref:typename:ProcessFieldData[]
Process_getParentPid	Process.h	/^#define Process_getParentPid(/;"	d
Process_getuid	Process.c	/^static int Process_getuid = -1;$/;"	v	typeref:typename:int	file:
Process_humanNumber	Process.c	/^void Process_humanNumber(RichString* str, unsigned long number, bool coloring) {$/;"	f	typeref:typename:void
Process_init	Process.c	/^void Process_init(Process* this, struct Settings_* settings) {$/;"	f	typeref:typename:void
Process_isChildOf	Process.h	/^#define Process_isChildOf(/;"	d
Process_isKernelThread	dragonflybsd/DragonFlyBSDProcess.h	/^#define Process_isKernelThread(/;"	d
Process_isKernelThread	freebsd/FreeBSDProcess.h	/^#define Process_isKernelThread(/;"	d
Process_isKernelThread	linux/LinuxProcess.h	/^#define Process_isKernelThread(/;"	d
Process_isKernelThread	openbsd/OpenBSDProcess.h	/^#define Process_isKernelThread(/;"	d
Process_isKernelThread	solaris/SolarisProcess.h	/^#define Process_isKernelThread(/;"	d
Process_isThread	darwin/DarwinProcess.c	/^bool Process_isThread(Process* this) {$/;"	f	typeref:typename:bool
Process_isThread	dragonflybsd/DragonFlyBSDProcess.c	/^bool Process_isThread(Process* this) {$/;"	f	typeref:typename:bool
Process_isThread	freebsd/FreeBSDProcess.c	/^bool Process_isThread(Process* this) {$/;"	f	typeref:typename:bool
Process_isThread	linux/LinuxProcess.c	/^bool Process_isThread(Process* this) {$/;"	f	typeref:typename:bool
Process_isThread	openbsd/OpenBSDProcess.c	/^bool Process_isThread(Process* this) {$/;"	f	typeref:typename:bool
Process_isThread	solaris/SolarisProcess.c	/^bool Process_isThread(Process* this) {$/;"	f	typeref:typename:bool
Process_isThread	unsupported/Platform.c	/^bool Process_isThread(Process* this) {$/;"	f	typeref:typename:bool
Process_isUserlandThread	dragonflybsd/DragonFlyBSDProcess.h	/^#define Process_isUserlandThread(/;"	d
Process_isUserlandThread	freebsd/FreeBSDProcess.h	/^#define Process_isUserlandThread(/;"	d
Process_isUserlandThread	linux/LinuxProcess.h	/^#define Process_isUserlandThread(/;"	d
Process_isUserlandThread	openbsd/OpenBSDProcess.h	/^#define Process_isUserlandThread(/;"	d
Process_isUserlandThread	solaris/SolarisProcess.h	/^#define Process_isUserlandThread(/;"	d
Process_outputRate	Process.c	/^void Process_outputRate(RichString* str, char* buffer, int n, double rate, int coloring) {$/;"	f	typeref:typename:void
Process_pidColumns	darwin/Platform.c	/^ProcessPidColumn Process_pidColumns[] = {$/;"	v	typeref:typename:ProcessPidColumn[]
Process_pidColumns	dragonflybsd/DragonFlyBSDProcess.c	/^ProcessPidColumn Process_pidColumns[] = {$/;"	v	typeref:typename:ProcessPidColumn[]
Process_pidColumns	freebsd/FreeBSDProcess.c	/^ProcessPidColumn Process_pidColumns[] = {$/;"	v	typeref:typename:ProcessPidColumn[]
Process_pidColumns	linux/LinuxProcess.c	/^ProcessPidColumn Process_pidColumns[] = {$/;"	v	typeref:typename:ProcessPidColumn[]
Process_pidColumns	openbsd/OpenBSDProcess.c	/^ProcessPidColumn Process_pidColumns[] = {$/;"	v	typeref:typename:ProcessPidColumn[]
Process_pidColumns	solaris/SolarisProcess.c	/^ProcessPidColumn Process_pidColumns[] = {$/;"	v	typeref:typename:ProcessPidColumn[]
Process_pidColumns	unsupported/Platform.c	/^ProcessPidColumn Process_pidColumns[] = {$/;"	v	typeref:typename:ProcessPidColumn[]
Process_pidCompare	Process.c	/^long Process_pidCompare(const void* v1, const void* v2) {$/;"	f	typeref:typename:long
Process_pidFormat	Process.c	/^char Process_pidFormat[20] = "%7d ";$/;"	v	typeref:typename:char[20]
Process_printTime	Process.c	/^void Process_printTime(RichString* str, unsigned long long totalHundredths) {$/;"	f	typeref:typename:void
Process_sendSignal	Process.c	/^void Process_sendSignal(Process* this, int sgn) {$/;"	f	typeref:typename:void
Process_setPriority	Process.c	/^bool Process_setPriority(Process* this, int priority) {$/;"	f	typeref:typename:bool
Process_setupColumnWidths	Process.c	/^void Process_setupColumnWidths() {$/;"	f	typeref:typename:void
Process_sortState	Process.h	/^#define Process_sortState(/;"	d
Process_titleBuffer	Process.c	/^static char Process_titleBuffer[20][20];$/;"	v	typeref:typename:char[20][20]	file:
Process_toggleTag	Process.c	/^void Process_toggleTag(Process* this) {$/;"	f	typeref:typename:void
Process_writeCommand	Process.c	/^static inline void Process_writeCommand(Process* this, int attr, int baseattr, RichString* str) /;"	f	typeref:typename:void	file:
Process_writeField	Process.c	/^void Process_writeField(Process* this, RichString* str, ProcessField field) {$/;"	f	typeref:typename:void
Pull Requests	CONTRIBUTING.md	/^Pull Requests$/;"	s
RBYTES	linux/LinuxProcess.h	/^   RBYTES = 107,$/;"	e	enum:LinuxProcessFields
RCHAR	linux/LinuxProcess.h	/^   RCHAR = 103,$/;"	e	enum:LinuxProcessFields
REDRAW	Panel.h	/^   REDRAW      = 0x08,$/;"	e	enum:HandlerResult_
RESCAN	Panel.h	/^   RESCAN      = 0x10,$/;"	e	enum:HandlerResult_
RESET_COLOR	CRT.h	/^   RESET_COLOR,$/;"	e	enum:ColorElements_
RICHSTRING_MAXLEN	RichString.c	/^#define RICHSTRING_MAXLEN /;"	d	file:
RICHSTRING_MAXLEN	RichString.h	/^#define RICHSTRING_MAXLEN /;"	d
RLIM	linux/LinuxProcess.h	/^   RLIM = 24,$/;"	e	enum:UnsupportedProcessFields
RSS	linux/LinuxProcess.h	/^   RSS = 23,$/;"	e	enum:UnsupportedProcessFields
Red	CRT.c	/^#define Red /;"	d	file:
Red	CRT.h	/^#define Red /;"	d
RichString	RichString.h	/^} RichString;$/;"	t	typeref:struct:RichString_
RichString_	RichString.h	/^typedef struct RichString_ {$/;"	s
RichString_append	RichString.c	/^void RichString_append(RichString* this, int attrs, const char* data) {$/;"	f	typeref:typename:void
RichString_appendn	RichString.c	/^void RichString_appendn(RichString* this, int attrs, const char* data, int len) {$/;"	f	typeref:typename:void
RichString_begin	RichString.h	/^#define RichString_begin(/;"	d
RichString_beginAllocated	RichString.h	/^#define RichString_beginAllocated(/;"	d
RichString_end	RichString.h	/^#define RichString_end(/;"	d
RichString_extendLen	RichString.c	/^static void RichString_extendLen(RichString* this, int len) {$/;"	f	typeref:typename:void	file:
RichString_findChar	RichString.c	/^int RichString_findChar(RichString* this, char c, int start) {$/;"	f	typeref:typename:int
RichString_getCharVal	RichString.h	/^#define RichString_getCharVal(/;"	d
RichString_printVal	RichString.h	/^#define RichString_printVal(/;"	d
RichString_printoffnVal	RichString.h	/^#define RichString_printoffnVal(/;"	d
RichString_prune	RichString.c	/^void RichString_prune(RichString* this) {$/;"	f	typeref:typename:void
RichString_setAttr	RichString.c	/^void RichString_setAttr(RichString* this, int attrs) {$/;"	f	typeref:typename:void
RichString_setAttrn	RichString.c	/^inline void RichString_setAttrn(RichString* this, int attrs, int start, int finish) {$/;"	f	typeref:typename:void
RichString_setAttrn	RichString.c	/^void RichString_setAttrn(RichString* this, int attrs, int start, int finish) {$/;"	f	typeref:typename:void
RichString_setChar	RichString.h	/^#define RichString_setChar(/;"	d
RichString_setLen	RichString.c	/^#define RichString_setLen(/;"	d	file:
RichString_setLen	RichString.h	/^#define RichString_setLen(/;"	d
RichString_size	RichString.h	/^#define RichString_size(/;"	d
RichString_sizeVal	RichString.h	/^#define RichString_sizeVal(/;"	d
RichString_write	RichString.c	/^void RichString_write(RichString* this, int attrs, const char* data) {$/;"	f	typeref:typename:void
RichString_writeFrom	RichString.c	/^static inline void RichString_writeFrom(RichString* this, int attrs, const char* data_c, int fro/;"	f	typeref:typename:void	file:
RightCPUs2Meter_class	CPUMeter.c	/^MeterClass RightCPUs2Meter_class = {$/;"	v	typeref:typename:MeterClass
RightCPUsMeter_class	CPUMeter.c	/^MeterClass RightCPUsMeter_class = {$/;"	v	typeref:typename:MeterClass
SEE ALSO	htop.1.in	/^.SH "SEE ALSO"$/;"	s	title:HTOP
SESSION	Process.h	/^   SESSION = 6,$/;"	e	enum:ProcessFields
SIGCATCH	linux/LinuxProcess.h	/^   SIGCATCH = 33,$/;"	e	enum:UnsupportedProcessFields
SIGNAL	linux/LinuxProcess.h	/^   SIGNAL = 30,$/;"	e	enum:UnsupportedProcessFields
SKIP	scripts/MakeHeader.py	/^SKIP=3$/;"	v
SKIPONE	scripts/MakeHeader.py	/^SKIPONE=4$/;"	v
SSIGIGNORE	linux/LinuxProcess.h	/^   SSIGIGNORE = 32,$/;"	e	enum:UnsupportedProcessFields
STARTCODE	linux/LinuxProcess.h	/^   STARTCODE = 25,$/;"	e	enum:UnsupportedProcessFields
STARTSTACK	linux/LinuxProcess.h	/^   STARTSTACK = 27,$/;"	e	enum:UnsupportedProcessFields
STARTTIME	Process.h	/^   STARTTIME = 21,$/;"	e	enum:ProcessFields
STATE	Process.h	/^   STATE = 3,$/;"	e	enum:ProcessFields
STIME	linux/LinuxProcess.h	/^   STIME = 15,$/;"	e	enum:LinuxProcessFields
ST_UID	Process.h	/^   ST_UID = 46,$/;"	e	enum:ProcessFields
SUFFIXES	Makefile.am	/^SUFFIXES = .h$/;"	m
SWAP	CRT.h	/^   SWAP,$/;"	e	enum:ColorElements_
SYNOPSIS	htop.1.in	/^.SH "SYNOPSIS"$/;"	s	title:HTOP
SYNTH_KEY	Panel.h	/^   SYNTH_KEY   = 0x20,$/;"	e	enum:HandlerResult_
SYSCR	linux/LinuxProcess.h	/^   SYSCR = 105,$/;"	e	enum:LinuxProcessFields
SYSCW	linux/LinuxProcess.h	/^   SYSCW = 106,$/;"	e	enum:LinuxProcessFields
SYS_POWERSUPPLY_DIR	linux/Battery.c	/^#define SYS_POWERSUPPLY_DIR /;"	d	file:
SYS_POWERSUPPLY_DIR	linux/Battery.h	/^#define SYS_POWERSUPPLY_DIR /;"	d
SYS_ioprio_get	Process.c	/^#define SYS_ioprio_get /;"	d	file:
SYS_ioprio_get	Process.h	/^#define SYS_ioprio_get /;"	d
SYS_ioprio_set	Process.c	/^#define SYS_ioprio_set /;"	d	file:
SYS_ioprio_set	Process.h	/^#define SYS_ioprio_set /;"	d
ScreenManager	ScreenManager.h	/^} ScreenManager;$/;"	t	typeref:struct:ScreenManager_
ScreenManager_	ScreenManager.h	/^typedef struct ScreenManager_ {$/;"	s
ScreenManager_add	ScreenManager.c	/^void ScreenManager_add(ScreenManager* this, Panel* item, int size) {$/;"	f	typeref:typename:void
ScreenManager_delete	ScreenManager.c	/^void ScreenManager_delete(ScreenManager* this) {$/;"	f	typeref:typename:void
ScreenManager_drawPanels	ScreenManager.c	/^static void ScreenManager_drawPanels(ScreenManager* this, int focus) {$/;"	f	typeref:typename:void	file:
ScreenManager_new	ScreenManager.c	/^ScreenManager* ScreenManager_new(int x1, int y1, int x2, int y2, Orientation orientation, const /;"	f	typeref:typename:ScreenManager *
ScreenManager_remove	ScreenManager.c	/^Panel* ScreenManager_remove(ScreenManager* this, int idx) {$/;"	f	typeref:typename:Panel *
ScreenManager_resize	ScreenManager.c	/^void ScreenManager_resize(ScreenManager* this, int x1, int y1, int x2, int y2) {$/;"	f	typeref:typename:void
ScreenManager_run	ScreenManager.c	/^void ScreenManager_run(ScreenManager* this, Panel** lastFocus, int* lastKey) {$/;"	f	typeref:typename:void
ScreenManager_size	ScreenManager.c	/^inline int ScreenManager_size(ScreenManager* this) {$/;"	f	typeref:typename:int
Settings	Settings.h	/^} Settings;$/;"	t	typeref:struct:Settings_
Settings_	Settings.h	/^typedef struct Settings_ {$/;"	s
Settings_cpuId	Settings.h	/^#define Settings_cpuId(/;"	d
Settings_defaultMeters	Settings.c	/^static void Settings_defaultMeters(Settings* this) {$/;"	f	typeref:typename:void	file:
Settings_delete	Settings.c	/^void Settings_delete(Settings* this) {$/;"	f	typeref:typename:void
Settings_invertSortOrder	Settings.c	/^void Settings_invertSortOrder(Settings* this) {$/;"	f	typeref:typename:void
Settings_new	Settings.c	/^Settings* Settings_new(int cpuCount) {$/;"	f	typeref:typename:Settings *
Settings_read	Settings.c	/^static bool Settings_read(Settings* this, const char* fileName) {$/;"	f	typeref:typename:bool	file:
Settings_readMeterModes	Settings.c	/^static void Settings_readMeterModes(Settings* this, char* line, int column) {$/;"	f	typeref:typename:void	file:
Settings_readMeters	Settings.c	/^static void Settings_readMeters(Settings* this, char* line, int column) {$/;"	f	typeref:typename:void	file:
Settings_write	Settings.c	/^bool Settings_write(Settings* this) {$/;"	f	typeref:typename:bool
SignalItem	SignalsPanel.h	/^} SignalItem;$/;"	t	typeref:struct:SignalItem_
SignalItem_	SignalsPanel.h	/^typedef struct SignalItem_ {$/;"	s
SignalsPanel_new	SignalsPanel.c	/^Panel* SignalsPanel_new() {$/;"	f	typeref:typename:Panel *
SingleColCPUsMeter_draw	CPUMeter.c	/^static void SingleColCPUsMeter_draw(Meter* this, int x, int y, int w) {$/;"	f	typeref:typename:void	file:
SolarisProcess	solaris/SolarisProcess.h	/^} SolarisProcess;$/;"	t	typeref:struct:SolarisProcess_
SolarisProcessField	solaris/SolarisProcess.h	/^} SolarisProcessField;$/;"	t	typeref:enum:SolarisProcessFields
SolarisProcessFields	solaris/SolarisProcess.h	/^typedef enum SolarisProcessFields {$/;"	g
SolarisProcessList	solaris/SolarisProcessList.h	/^} SolarisProcessList;$/;"	t	typeref:struct:SolarisProcessList_
SolarisProcessList_	solaris/SolarisProcessList.h	/^typedef struct SolarisProcessList_ {$/;"	s
SolarisProcessList_readZoneName	solaris/SolarisProcessList.c	/^char* SolarisProcessList_readZoneName(kstat_ctl_t* kd, SolarisProcess* sproc) {$/;"	f	typeref:typename:char *
SolarisProcessList_scanCPUTime	solaris/SolarisProcessList.c	/^static inline void SolarisProcessList_scanCPUTime(ProcessList* pl) {$/;"	f	typeref:typename:void	file:
SolarisProcessList_scanMemoryInfo	solaris/SolarisProcessList.c	/^static inline void SolarisProcessList_scanMemoryInfo(ProcessList* pl) {$/;"	f	typeref:typename:void	file:
SolarisProcessList_walkproc	solaris/SolarisProcessList.c	/^int SolarisProcessList_walkproc(psinfo_t *_psinfo, lwpsinfo_t *_lwpsinfo, void *listptr) {$/;"	f	typeref:typename:int
SolarisProcess_	solaris/SolarisProcess.h	/^typedef struct SolarisProcess_ {$/;"	s
SolarisProcess_class	solaris/SolarisProcess.c	/^ProcessClass SolarisProcess_class = {$/;"	v	typeref:typename:ProcessClass
SolarisProcess_compare	solaris/SolarisProcess.c	/^long SolarisProcess_compare(const void* v1, const void* v2) {$/;"	f	typeref:typename:long
SolarisProcess_new	solaris/SolarisProcess.c	/^SolarisProcess* SolarisProcess_new(Settings* settings) {$/;"	f	typeref:typename:SolarisProcess *
SolarisProcess_writeField	solaris/SolarisProcess.c	/^void SolarisProcess_writeField(Process* this, RichString* str, ProcessField field) {$/;"	f	typeref:typename:void
State	Action.h	/^} State;$/;"	t	typeref:struct:State_
State_	Action.h	/^typedef struct State_ {$/;"	s
StringIO	scripts/MakeHeader.py	/^   StringIO = io.StringIO$/;"	v
String_cat	StringUtils.c	/^char* String_cat(const char* s1, const char* s2) {$/;"	f	typeref:typename:char *
String_contains_i	StringUtils.h	/^#define String_contains_i(/;"	d
String_eq	StringUtils.c	/^inline int String_eq(const char* s1, const char* s2) {$/;"	f	typeref:typename:int
String_freeArray	StringUtils.c	/^void String_freeArray(char** s) {$/;"	f	typeref:typename:void
String_getToken	StringUtils.c	/^char* String_getToken(const char* line, const unsigned short int numMatch) {$/;"	f	typeref:typename:char *
String_readLine	StringUtils.c	/^char* String_readLine(FILE* fd) {$/;"	f	typeref:typename:char *
String_split	StringUtils.c	/^char** String_split(const char* s, char sep, int* n) {$/;"	f	typeref:typename:char **
String_startsWith	StringUtils.h	/^#define String_startsWith(/;"	d
String_trim	StringUtils.c	/^char* String_trim(const char* in) {$/;"	f	typeref:typename:char *
SwapMeter_attributes	SwapMeter.c	/^int SwapMeter_attributes[] = {$/;"	v	typeref:typename:int[]
SwapMeter_class	SwapMeter.c	/^MeterClass SwapMeter_class = {$/;"	v	typeref:typename:MeterClass
SwapMeter_display	SwapMeter.c	/^static void SwapMeter_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
SwapMeter_updateValues	SwapMeter.c	/^static void SwapMeter_updateValues(Meter* this, char* buffer, int size) {$/;"	f	typeref:typename:void	file:
TASKID	solaris/SolarisProcess.h	/^   TASKID = 103,$/;"	e	enum:SolarisProcessFields
TASKS_RUNNING	CRT.h	/^   TASKS_RUNNING,$/;"	e	enum:ColorElements_
TEXT_METERMODE	Meter.h	/^   TEXT_METERMODE,$/;"	e	enum:__anon1f0952f80103
TGID	Process.h	/^   TGID = 52,$/;"	e	enum:ProcessFields
TIME	Process.h	/^   TIME = 50,$/;"	e	enum:ProcessFields
TPGID	Process.h	/^   TPGID = 8,$/;"	e	enum:ProcessFields
TREE_STR_BEND	CRT.h	/^   TREE_STR_BEND,$/;"	e	enum:TreeStr_
TREE_STR_COUNT	CRT.h	/^   TREE_STR_COUNT$/;"	e	enum:TreeStr_
TREE_STR_HORZ	CRT.h	/^   TREE_STR_HORZ,$/;"	e	enum:TreeStr_
TREE_STR_OPEN	CRT.h	/^   TREE_STR_OPEN,$/;"	e	enum:TreeStr_
TREE_STR_RTEE	CRT.h	/^   TREE_STR_RTEE,$/;"	e	enum:TreeStr_
TREE_STR_SHUT	CRT.h	/^   TREE_STR_SHUT,$/;"	e	enum:TreeStr_
TREE_STR_TEND	CRT.h	/^   TREE_STR_TEND,$/;"	e	enum:TreeStr_
TREE_STR_VERT	CRT.h	/^   TREE_STR_VERT,$/;"	e	enum:TreeStr_
TTY_NR	Process.h	/^   TTY_NR = 7,$/;"	e	enum:ProcessFields
TasksMeter_attributes	TasksMeter.c	/^int TasksMeter_attributes[] = {$/;"	v	typeref:typename:int[]
TasksMeter_class	TasksMeter.c	/^MeterClass TasksMeter_class = {$/;"	v	typeref:typename:MeterClass
TasksMeter_display	TasksMeter.c	/^static void TasksMeter_display(Object* cast, RichString* out) {$/;"	f	typeref:typename:void	file:
TasksMeter_updateValues	TasksMeter.c	/^static void TasksMeter_updateValues(Meter* this, char* buffer, int len) {$/;"	f	typeref:typename:void	file:
TextMeterMode	Meter.c	/^static MeterMode TextMeterMode = {$/;"	v	typeref:typename:MeterMode	file:
TextMeterMode_draw	Meter.c	/^static void TextMeterMode_draw(Meter* this, int x, int y, int w) {$/;"	f	typeref:typename:void	file:
TraceScreen	TraceScreen.h	/^} TraceScreen;$/;"	t	typeref:struct:TraceScreen_
TraceScreenEvents	TraceScreen.c	/^static int TraceScreenEvents[] = {KEY_F(3), KEY_F(4), KEY_F(8), KEY_F(9), 27};$/;"	v	typeref:typename:int[]	file:
TraceScreenFunctions	TraceScreen.c	/^static const char* const TraceScreenFunctions[] = {"Search ", "Filter ", "AutoScroll ", "Stop Tr/;"	v	typeref:typename:const char * const[]	file:
TraceScreenKeys	TraceScreen.c	/^static const char* const TraceScreenKeys[] = {"F3", "F4", "F8", "F9", "Esc"};$/;"	v	typeref:typename:const char * const[]	file:
TraceScreen_	TraceScreen.h	/^typedef struct TraceScreen_ {$/;"	s
TraceScreen_class	TraceScreen.c	/^InfoScreenClass TraceScreen_class = {$/;"	v	typeref:typename:InfoScreenClass
TraceScreen_delete	TraceScreen.c	/^void TraceScreen_delete(Object* cast) {$/;"	f	typeref:typename:void
TraceScreen_draw	TraceScreen.c	/^void TraceScreen_draw(InfoScreen* this) {$/;"	f	typeref:typename:void
TraceScreen_forkTracer	TraceScreen.c	/^bool TraceScreen_forkTracer(TraceScreen* this) {$/;"	f	typeref:typename:bool
TraceScreen_new	TraceScreen.c	/^TraceScreen* TraceScreen_new(Process* process) {$/;"	f	typeref:typename:TraceScreen *
TraceScreen_onKey	TraceScreen.c	/^bool TraceScreen_onKey(InfoScreen* super, int ch) {$/;"	f	typeref:typename:bool
TraceScreen_updateTrace	TraceScreen.c	/^void TraceScreen_updateTrace(InfoScreen* super) {$/;"	f	typeref:typename:void
TreeStr	CRT.h	/^} TreeStr;$/;"	t	typeref:enum:TreeStr_
TreeStr_	CRT.h	/^typedef enum TreeStr_ {$/;"	g
TtyDriver	linux/LinuxProcessList.h	/^} TtyDriver;$/;"	t	typeref:struct:TtyDriver_
TtyDriver_	linux/LinuxProcessList.h	/^typedef struct TtyDriver_ {$/;"	s
UPTIME	CRT.h	/^   UPTIME,$/;"	e	enum:ColorElements_
USER	Process.h	/^   USER = 49,$/;"	e	enum:ProcessFields
UTIME	linux/LinuxProcess.h	/^   UTIME = 14,$/;"	e	enum:LinuxProcessFields
UnsupportedProcessField	linux/LinuxProcess.h	/^} UnsupportedProcessField;$/;"	t	typeref:enum:UnsupportedProcessFields
UnsupportedProcessFields	linux/LinuxProcess.h	/^typedef enum UnsupportedProcessFields {$/;"	g
UnsupportedProcess_delete	unsupported/UnsupportedProcess.c	/^void UnsupportedProcess_delete(Object* cast) {$/;"	f	typeref:typename:void
UnsupportedProcess_new	unsupported/UnsupportedProcess.c	/^Process* UnsupportedProcess_new(Settings* settings) {$/;"	f	typeref:typename:Process *
UptimeMeter_attributes	UptimeMeter.c	/^int UptimeMeter_attributes[] = {$/;"	v	typeref:typename:int[]
UptimeMeter_class	UptimeMeter.c	/^MeterClass UptimeMeter_class = {$/;"	v	typeref:typename:MeterClass
UptimeMeter_updateValues	UptimeMeter.c	/^static void UptimeMeter_updateValues(Meter* this, char* buffer, int len) {$/;"	f	typeref:typename:void	file:
UsersTable	UsersTable.h	/^} UsersTable;$/;"	t	typeref:struct:UsersTable_
UsersTable_	UsersTable.h	/^typedef struct UsersTable_ {$/;"	s
UsersTable_delete	UsersTable.c	/^void UsersTable_delete(UsersTable* this) {$/;"	f	typeref:typename:void
UsersTable_foreach	UsersTable.c	/^inline void UsersTable_foreach(UsersTable* this, Hashtable_PairFunction f, void* userData) {$/;"	f	typeref:typename:void
UsersTable_getRef	UsersTable.c	/^char* UsersTable_getRef(UsersTable* this, unsigned int uid) {$/;"	f	typeref:typename:char *
UsersTable_new	UsersTable.c	/^UsersTable* UsersTable_new() {$/;"	f	typeref:typename:UsersTable *
VERTICAL	ScreenManager.h	/^   VERTICAL,$/;"	e	enum:Orientation_
VPID	linux/LinuxProcess.h	/^   VPID = 101,$/;"	e	enum:LinuxProcessFields
VSIZE	linux/LinuxProcess.h	/^   VSIZE = 22,$/;"	e	enum:UnsupportedProcessFields
VXID	linux/LinuxProcess.h	/^   VXID = 102,$/;"	e	enum:LinuxProcessFields
Vector	Vector.h	/^} Vector;$/;"	t	typeref:struct:Vector_
Vector_	Vector.h	/^typedef struct Vector_ {$/;"	s
Vector_add	Vector.c	/^void Vector_add(Vector* this, void* data_) {$/;"	f	typeref:typename:void
Vector_checkArraySize	Vector.c	/^static void Vector_checkArraySize(Vector* this) {$/;"	f	typeref:typename:void	file:
Vector_count	Vector.c	/^int Vector_count(Vector* this) {$/;"	f	typeref:typename:int
Vector_delete	Vector.c	/^void Vector_delete(Vector* this) {$/;"	f	typeref:typename:void
Vector_get	Vector.c	/^#define Vector_get(/;"	d	file:
Vector_get	Vector.c	/^inline Object* Vector_get(Vector* this, int idx) {$/;"	f	typeref:typename:Object *
Vector_get	Vector.h	/^#define Vector_get(/;"	d
Vector_indexOf	Vector.c	/^inline int Vector_indexOf(Vector* this, void* search_, Object_Compare compare) {$/;"	f	typeref:typename:int
Vector_insert	Vector.c	/^void Vector_insert(Vector* this, int idx, void* data_) {$/;"	f	typeref:typename:void
Vector_insertionSort	Vector.c	/^void Vector_insertionSort(Vector* this) {$/;"	f	typeref:typename:void
Vector_isConsistent	Vector.c	/^static inline bool Vector_isConsistent(Vector* this) {$/;"	f	typeref:typename:bool	file:
Vector_moveDown	Vector.c	/^void Vector_moveDown(Vector* this, int idx) {$/;"	f	typeref:typename:void
Vector_moveUp	Vector.c	/^void Vector_moveUp(Vector* this, int idx) {$/;"	f	typeref:typename:void
Vector_new	Vector.c	/^Vector* Vector_new(ObjectClass* type, bool owner, int size) {$/;"	f	typeref:typename:Vector *
Vector_prune	Vector.c	/^void Vector_prune(Vector* this) {$/;"	f	typeref:typename:void
Vector_quickSort	Vector.c	/^void Vector_quickSort(Vector* this) {$/;"	f	typeref:typename:void
Vector_remove	Vector.c	/^Object* Vector_remove(Vector* this, int idx) {$/;"	f	typeref:typename:Object *
Vector_set	Vector.c	/^void Vector_set(Vector* this, int idx, void* data_) {$/;"	f	typeref:typename:void
Vector_size	Vector.c	/^#define Vector_size(/;"	d	file:
Vector_size	Vector.c	/^inline int Vector_size(Vector* this) {$/;"	f	typeref:typename:int
Vector_size	Vector.h	/^#define Vector_size(/;"	d
Vector_take	Vector.c	/^Object* Vector_take(Vector* this, int idx) {$/;"	f	typeref:typename:Object *
WBYTES	linux/LinuxProcess.h	/^   WBYTES = 108,$/;"	e	enum:LinuxProcessFields
WCHAN	linux/LinuxProcess.h	/^   WCHAN = 34,$/;"	e	enum:UnsupportedProcessFields
WCHAR	linux/LinuxProcess.h	/^   WCHAR = 104,$/;"	e	enum:LinuxProcessFields
WRAP_SUBTRACT	linux/LinuxProcessList.c	/^      #define WRAP_SUBTRACT(/;"	d	file:
White	CRT.c	/^#define White /;"	d	file:
White	CRT.h	/^#define White /;"	d
Yellow	CRT.c	/^#define Yellow /;"	d	file:
Yellow	CRT.h	/^#define Yellow /;"	d
ZONE	solaris/SolarisProcess.h	/^   ZONE  = 101,$/;"	e	enum:SolarisProcessFields
ZONEID	solaris/SolarisProcess.h	/^   ZONEID   = 100,$/;"	e	enum:SolarisProcessFields
ZONE_ERRMSGLEN	solaris/SolarisProcessList.h	/^#define ZONE_ERRMSGLEN /;"	d
[htop](http://hisham.hm/htop/)	README.md	/^[htop](http:\/\/hisham.hm\/htop\/)$/;"	c
_GNU_SOURCE	XAlloc.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	XAlloc.h	/^#define _GNU_SOURCE$/;"	d
_GNU_SOURCE	linux/Battery.c	/^#define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	linux/Battery.h	/^#define _GNU_SOURCE$/;"	d
_UNUSED_	dragonflybsd/DragonFlyBSDProcessList.c	/^#define _UNUSED_ /;"	d	file:
_UNUSED_	dragonflybsd/DragonFlyBSDProcessList.h	/^#define _UNUSED_ /;"	d
__anon087974300103	linux/Battery.c	/^static enum { BAT_PROC, BAT_SYS, BAT_ERR } Battery_method = BAT_PROC;$/;"	g	file:
__anon1f0952f80103	Meter.h	/^typedef enum {$/;"	g
__anon387a8f800103	CPUMeter.h	/^typedef enum {$/;"	g
__anon537103f40108	Action.c	/^static const struct { const char* key; const char* info; } helpLeft[] = {$/;"	s	file:
__anon537103f40208	Action.c	/^static const struct { const char* key; const char* info; } helpRight[] = {$/;"	s	file:
__anon537103f90103	Action.h	/^typedef enum {$/;"	g
__anon665a1bcc0108	Settings.h	/^typedef struct {$/;"	s
__anonbb100ddf0108	linux/IOPriorityPanel.c	/^   static const struct { int klass; const char* name; } classes[] = {$/;"	s	function:IOPriorityPanel_new	file:
__anond41838d0010a	MainPanel.h	/^typedef union {$/;"	u
__anondb0517410103	IncSet.h	/^typedef enum {$/;"	g
__anondb384cb40103	linux/IOPriority.h	/^enum {$/;"	g
__has_attribute	XAlloc.c	/^# define __has_attribute(/;"	d	file:
__has_attribute	XAlloc.h	/^# define __has_attribute(/;"	d
accountGuestInCPUMeter	Settings.h	/^   bool accountGuestInCPUMeter;$/;"	m	struct:Settings_	typeref:typename:bool
actionCollapseIntoParent	Action.c	/^static Htop_Reaction actionCollapseIntoParent(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionExpandCollapseOrSortColumn	Action.c	/^static Htop_Reaction actionExpandCollapseOrSortColumn(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionExpandOrCollapse	Action.c	/^static Htop_Reaction actionExpandOrCollapse(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionFilterByUser	Action.c	/^static Htop_Reaction actionFilterByUser(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionHelp	Action.c	/^static Htop_Reaction actionHelp(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionHigherPriority	Action.c	/^static Htop_Reaction actionHigherPriority(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionIncFilter	Action.c	/^static Htop_Reaction actionIncFilter(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionIncSearch	Action.c	/^static Htop_Reaction actionIncSearch(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionInvertSortOrder	Action.c	/^static Htop_Reaction actionInvertSortOrder(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionKill	Action.c	/^static Htop_Reaction actionKill(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionLowerPriority	Action.c	/^static Htop_Reaction actionLowerPriority(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionLsof	Action.c	/^static Htop_Reaction actionLsof(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionQuit	Action.c	/^static Htop_Reaction actionQuit() {$/;"	f	typeref:typename:Htop_Reaction	file:
actionRedraw	Action.c	/^static Htop_Reaction actionRedraw() {$/;"	f	typeref:typename:Htop_Reaction	file:
actionResize	Action.c	/^static Htop_Reaction actionResize(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionSetAffinity	Action.c	/^static Htop_Reaction actionSetAffinity(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionSetSortColumn	Action.c	/^static Htop_Reaction actionSetSortColumn(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionSetup	Action.c	/^static Htop_Reaction actionSetup(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionShowEnvScreen	Action.c	/^static Htop_Reaction actionShowEnvScreen(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionSortByCPU	Action.c	/^static Htop_Reaction actionSortByCPU(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionSortByMemory	Action.c	/^static Htop_Reaction actionSortByMemory(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionSortByTime	Action.c	/^static Htop_Reaction actionSortByTime(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionStrace	Action.c	/^static Htop_Reaction actionStrace(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionTag	Action.c	/^static Htop_Reaction actionTag(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionTagAllChildren	Action.c	/^static Htop_Reaction actionTagAllChildren(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionToggleKernelThreads	Action.c	/^static Htop_Reaction actionToggleKernelThreads(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionToggleProgramPath	Action.c	/^static Htop_Reaction actionToggleProgramPath(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionToggleTreeView	Action.c	/^static Htop_Reaction actionToggleTreeView(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionToggleUserlandThreads	Action.c	/^static Htop_Reaction actionToggleUserlandThreads(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
actionUntagAll	Action.c	/^static Htop_Reaction actionUntagAll(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
active	IncSet.h	/^   IncMode* active;$/;"	m	struct:IncSet_	typeref:typename:IncMode *
addUserToVector	Action.c	/^static void addUserToVector(int key, void* userCast, void* panelCast) {$/;"	f	typeref:typename:void	file:
addattrstr	Action.c	/^   #define addattrstr(/;"	d	file:
all_platform_headers	Makefile.am	/^all_platform_headers =$/;"	m
allowFocusChange	ScreenManager.h	/^   bool allowFocusChange;$/;"	m	struct:ScreenManager_	typeref:typename:bool
ancient_vserver	configure.ac	/^AC_ARG_ENABLE(ancient_vserver, [AS_HELP_STRING([--enable-ancient-vserver], [enable ancient VServ/;"	e
applications	Makefile.am	/^applicationsdir = $(datadir)\/applications$/;"	d
applications_DATA	Makefile.am	/^applications_DATA = htop.desktop$/;"	m
applicationsdir	Makefile.am	/^applicationsdir = $(datadir)\/applications$/;"	m
array	Vector.h	/^   Object **array;$/;"	m	struct:Vector_	typeref:typename:Object **
arraySize	Vector.h	/^   int arraySize;$/;"	m	struct:Vector_	typeref:typename:int
attributes	Meter.h	/^   const int* attributes;$/;"	m	struct:MeterClass_	typeref:typename:const int *
backtraceArray	CRT.c	/^void *backtraceArray[128];$/;"	v	typeref:typename:void * [128]
backtraceArray	CRT.h	/^void *backtraceArray[128];$/;"	v	typeref:typename:void * [128]
bar	IncSet.h	/^   FunctionBar* bar;$/;"	m	struct:IncMode_	typeref:typename:FunctionBar *
bar	InfoScreen.h	/^   FunctionBar* bar;$/;"	m	struct:InfoScreen_	typeref:typename:FunctionBar *
basenameOffset	Process.h	/^   int basenameOffset;$/;"	m	struct:Process_	typeref:typename:int
bin_PROGRAMS	Makefile.am	/^bin_PROGRAMS = htop$/;"	m
blkio_delay_percent	linux/LinuxProcess.h	/^   float blkio_delay_percent;$/;"	m	struct:LinuxProcess_	typeref:typename:float
blkio_delay_total	linux/LinuxProcess.h	/^   unsigned long long blkio_delay_total;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
blocked	Process.h	/^   unsigned long int blocked;$/;"	m	struct:Process_	typeref:typename:unsigned long int
btime	linux/LinuxProcess.c	/^long long btime; \/* semi-global *\/$/;"	v	typeref:typename:long long
btime	linux/LinuxProcess.h	/^long long btime; \/* semi-global *\/$/;"	v	typeref:typename:long long
buckets	Hashtable.h	/^   HashtableItem** buckets;$/;"	m	struct:Hashtable_	typeref:typename:HashtableItem **
buffer	IncSet.h	/^   char buffer[INCMODE_MAX+1];$/;"	m	struct:IncMode_	typeref:typename:char[]
buffersMem	ProcessList.h	/^   unsigned long long int buffersMem;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
bytes	solaris/Platform.h	/^   size_t bytes; $/;"	m	struct:envAccum_	typeref:typename:size_t
cachedMem	ProcessList.h	/^   unsigned long long int cachedMem;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
capacity	solaris/Platform.h	/^   size_t capacity;$/;"	m	struct:envAccum_	typeref:typename:size_t
caption	Meter.h	/^   char* caption;$/;"	m	struct:Meter_	typeref:typename:char *
caption	Meter.h	/^   const char* caption;$/;"	m	struct:MeterClass_	typeref:typename:const char *
cgroup	configure.ac	/^AC_ARG_ENABLE(cgroup, [AS_HELP_STRING([--enable-cgroup], [enable cgroups support])], ,enable_cgr/;"	e
cgroup	linux/LinuxProcess.h	/^   char* cgroup;$/;"	m	struct:LinuxProcess_	typeref:typename:char *
changePriority	Action.c	/^static bool changePriority(MainPanel* panel, int delta) {$/;"	f	typeref:typename:bool	file:
changed	Settings.h	/^   bool changed;$/;"	m	struct:Settings_	typeref:typename:bool
charBytes	RichString.c	/^#define charBytes(/;"	d	file:
charBytes	RichString.h	/^#define charBytes(/;"	d
check	test_spec.lua	/^local function check(t)$/;"	f
checkRecalculation	ScreenManager.c	/^static void checkRecalculation(ScreenManager* this, double* oldTime, int* sortTimeout, bool* red/;"	f	typeref:typename:void	file:
check_string_at	test_spec.lua	/^local function check_string_at(x, y, str)$/;"	f
child	TraceScreen.h	/^   int child;$/;"	m	struct:TraceScreen_	typeref:typename:int
chlen	RichString.h	/^   int chlen;$/;"	m	struct:RichString_	typeref:typename:int
chptr	RichString.h	/^   CharType* chptr;$/;"	m	struct:RichString_	typeref:typename:CharType *
chstr	RichString.h	/^   CharType chstr[RICHSTRING_MAXLEN+1];$/;"	m	struct:RichString_	typeref:typename:CharType[]
clean-htop-headers	Makefile.am	/^clean-htop-headers:$/;"	t
cmajflt	linux/LinuxProcess.h	/^   unsigned long int cmajflt;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long int
cminflt	linux/LinuxProcess.h	/^   unsigned long int cminflt;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long int
cnswap	Process.h	/^   unsigned long int cnswap;$/;"	m	struct:Process_	typeref:typename:unsigned long int
collapseIntoParent	Action.c	/^static bool collapseIntoParent(Panel* panel) {$/;"	f	typeref:typename:bool	file:
colorScheme	Settings.h	/^   int colorScheme;$/;"	m	struct:Settings_	typeref:typename:int
columns	AvailableColumnsPanel.h	/^   Panel* columns;$/;"	m	struct:AvailableColumnsPanel_	typeref:typename:Panel *
columns	Header.h	/^   Vector** columns;$/;"	m	struct:Header_	typeref:typename:Vector **
columns	Settings.h	/^   MeterColumnSettings columns[2];$/;"	m	struct:Settings_	typeref:typename:MeterColumnSettings[2]
comm	Process.h	/^   char* comm;$/;"	m	struct:Process_	typeref:typename:char *
commLen	Process.h	/^   int commLen;$/;"	m	struct:Process_	typeref:typename:int
compare	Object.h	/^   const Object_Compare compare;$/;"	m	struct:ObjectClass_	typeref:typename:const Object_Compare
comparisons	Vector.c	/^static int comparisons = 0;$/;"	v	typeref:typename:int	file:
contLine	TraceScreen.h	/^   bool contLine;$/;"	m	struct:TraceScreen_	typeref:typename:bool
contid	solaris/SolarisProcess.h	/^   ctid_t     contid;$/;"	m	struct:SolarisProcess_	typeref:typename:ctid_t
countCPUsFromZero	Settings.h	/^   bool countCPUsFromZero;$/;"	m	struct:Settings_	typeref:typename:bool
coverage	Makefile.am	/^coverage:$/;"	t
cp_time_n	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long   *cp_time_n;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long *
cp_time_n	freebsd/FreeBSDProcessList.h	/^   unsigned long   *cp_time_n;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long *
cp_time_o	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long   *cp_time_o;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long *
cp_time_o	freebsd/FreeBSDProcessList.h	/^   unsigned long   *cp_time_o;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long *
cp_times_n	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long  *cp_times_n;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long *
cp_times_n	freebsd/FreeBSDProcessList.h	/^   unsigned long  *cp_times_n;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long *
cp_times_o	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long  *cp_times_o;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long *
cp_times_o	freebsd/FreeBSDProcessList.h	/^   unsigned long  *cp_times_o;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long *
cppcheck	Makefile.am	/^cppcheck:$/;"	t
cpuCount	ProcessList.h	/^   int cpuCount;$/;"	m	struct:ProcessList_	typeref:typename:int
cpuCount	Settings.h	/^   int cpuCount;$/;"	m	struct:Settings_	typeref:typename:int
cpu_delay_percent	linux/LinuxProcess.h	/^   float cpu_delay_percent;$/;"	m	struct:LinuxProcess_	typeref:typename:float
cpu_delay_total	linux/LinuxProcess.h	/^   unsigned long long cpu_delay_total;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
cpus	Affinity.h	/^   int* cpus;$/;"	m	struct:Affinity_	typeref:typename:int *
cpus	dragonflybsd/DragonFlyBSDProcessList.h	/^   CPUData* cpus;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:CPUData *
cpus	freebsd/FreeBSDProcessList.h	/^   CPUData* cpus;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:CPUData *
cpus	linux/LinuxProcessList.h	/^   CPUData* cpus;$/;"	m	struct:LinuxProcessList_	typeref:typename:CPUData *
cpus	openbsd/OpenBSDProcessList.h	/^   CPUData* cpus;$/;"	m	struct:OpenBSDProcessList_	typeref:typename:CPUData *
cpus	solaris/SolarisProcessList.h	/^   CPUData* cpus;$/;"	m	struct:SolarisProcessList_	typeref:typename:CPUData *
cstime	linux/LinuxProcess.h	/^   unsigned long long int cstime;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long int
ctid	linux/LinuxProcess.h	/^   unsigned int ctid;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned int
curItems	Meter.h	/^   char curItems;$/;"	m	struct:MeterClass_	typeref:typename:char
curr_load	darwin/DarwinProcessList.h	/^   processor_cpu_load_info_t curr_load;$/;"	m	struct:DarwinProcessList_	typeref:typename:processor_cpu_load_info_t
currentBar	Panel.h	/^   FunctionBar* currentBar;$/;"	m	struct:Panel_	typeref:typename:FunctionBar *
cutime	linux/LinuxProcess.h	/^   unsigned long long int cutime;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long int
darwin_platform_headers	Makefile.am	/^darwin_platform_headers = \\$/;"	m
data	OpenFilesScreen.h	/^   OpenFiles_Data data;$/;"	m	struct:OpenFiles_FileData_	typeref:typename:OpenFiles_Data
data	OpenFilesScreen.h	/^   OpenFiles_Data data;$/;"	m	struct:OpenFiles_ProcessData_	typeref:typename:OpenFiles_Data
data	OpenFilesScreen.h	/^   char* data[256];$/;"	m	struct:OpenFiles_Data_	typeref:typename:char * [256]
debug	Makefile.am	/^debug:$/;"	t
defaultBar	IncSet.h	/^   FunctionBar* defaultBar;$/;"	m	struct:IncSet_	typeref:typename:FunctionBar *
defaultBar	Panel.h	/^   FunctionBar* defaultBar;$/;"	m	struct:Panel_	typeref:typename:FunctionBar *
defaultMode	Meter.h	/^   const int defaultMode;$/;"	m	struct:MeterClass_	typeref:typename:const int
delay	Settings.h	/^   int delay;$/;"	m	struct:Settings_	typeref:typename:int
delay	htop.c	/^   int delay;$/;"	m	struct:CommandLineSettings_	typeref:typename:int	file:
delay	test_spec.lua	/^function delay(t)$/;"	f
delay_read_time	linux/LinuxProcess.h	/^   unsigned long long int delay_read_time;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long int
delayacct	configure.ac	/^AC_ARG_ENABLE(delayacct, [AS_HELP_STRING([--enable-delayacct], [enable Linux delay accounting])]/;"	e
description	Meter.h	/^   const char* description;$/;"	m	struct:MeterClass_	typeref:typename:const char *
description	Process.h	/^   const char* description;$/;"	m	struct:ProcessFieldData_	typeref:typename:const char *
detailedCPUTime	Settings.h	/^   bool detailedCPUTime;$/;"	m	struct:Settings_	typeref:typename:bool
direction	Settings.h	/^   int direction;$/;"	m	struct:Settings_	typeref:typename:int
display	InfoScreen.h	/^   Panel* display;$/;"	m	struct:InfoScreen_	typeref:typename:Panel *
display	Object.h	/^   const Object_Display display;$/;"	m	struct:ObjectClass_	typeref:typename:const Object_Display
dist-hook	Makefile.am	/^dist-hook: $(top_distdir)\/configure$/;"	t
dist_man_MANS	Makefile.am	/^dist_man_MANS = htop.1$/;"	m
done	Meter.h	/^   const Meter_Done done;$/;"	m	struct:MeterClass_	typeref:typename:const Meter_Done
dragonflybsd_platform_headers	Makefile.am	/^dragonflybsd_platform_headers = \\$/;"	m
draw	InfoScreen.h	/^   const InfoScreen_Draw draw;$/;"	m	struct:InfoScreenClass_	typeref:typename:const InfoScreen_Draw
draw	Meter.h	/^   Meter_Draw draw;$/;"	m	struct:MeterMode_	typeref:typename:Meter_Draw
draw	Meter.h	/^   Meter_Draw draw;$/;"	m	struct:Meter_	typeref:typename:Meter_Draw
draw	Meter.h	/^   const Meter_Draw draw;$/;"	m	struct:MeterClass_	typeref:typename:const Meter_Draw
drawData	Meter.h	/^   void* drawData;$/;"	m	struct:Meter_	typeref:typename:void *
endcode	Process.h	/^   unsigned long int endcode;$/;"	m	struct:Process_	typeref:typename:unsigned long int
env	solaris/Platform.h	/^   char *env;$/;"	m	struct:envAccum_	typeref:typename:char *
envAccum	solaris/Platform.h	/^} envAccum;$/;"	t	typeref:struct:envAccum_
envAccum_	solaris/Platform.h	/^typedef struct envAccum_ {$/;"	s
equals	scripts/MakeHeader.py	/^         equals = line.find(" = ")$/;"	v
error	OpenFilesScreen.h	/^   int error;$/;"	m	struct:OpenFiles_ProcessData_	typeref:typename:int
eventHandler	Panel.h	/^   const Panel_EventHandler eventHandler;$/;"	m	struct:PanelClass_	typeref:typename:const Panel_EventHandler
eventHandlerState	Panel.h	/^   void* eventHandlerState;$/;"	m	struct:Panel_	typeref:typename:void *
events	FunctionBar.h	/^   int* events;$/;"	m	struct:FunctionBar_	typeref:typename:int *
exit_signal	Process.h	/^   int exit_signal;$/;"	m	struct:Process_	typeref:typename:int
expandCollapse	Action.c	/^static bool expandCollapse(Panel* panel) {$/;"	f	typeref:typename:bool	file:
extends	Object.h	/^   const void* extends;$/;"	m	struct:ObjectClass_	typeref:typename:const void *
fail	XAlloc.c	/^static inline void fail() {$/;"	f	typeref:typename:void	file:
fd_strace	TraceScreen.h	/^   int fd_strace;$/;"	m	struct:TraceScreen_	typeref:typename:int
fdpair	TraceScreen.h	/^   int fdpair[2];$/;"	m	struct:TraceScreen_	typeref:typename:int[2]
fields	Settings.h	/^   ProcessField* fields;$/;"	m	struct:Settings_	typeref:typename:ProcessField *
file	scripts/MakeHeader.py	/^file = io.open(sys.argv[1], "r", encoding="utf-8")$/;"	v
filename	Settings.h	/^   char* filename;$/;"	m	struct:Settings_	typeref:typename:char *
files	OpenFilesScreen.h	/^   struct OpenFiles_FileData_* files;$/;"	m	struct:OpenFiles_ProcessData_	typeref:struct:OpenFiles_FileData_ *
filterEvents	IncSet.c	/^static int filterEvents[] = {13, 27, ERR};$/;"	v	typeref:typename:int[]	file:
filterFunctions	IncSet.c	/^static const char* const filterFunctions[] = {"Done  ", "Clear ", " Filter: ", NULL};$/;"	v	typeref:typename:const char * const[]	file:
filterKeys	IncSet.c	/^static const char* const filterKeys[] = {"Enter", "Esc", "  "};$/;"	v	typeref:typename:const char * const[]	file:
filtering	IncSet.h	/^   bool filtering;$/;"	m	struct:IncSet_	typeref:typename:bool
findDevice	openbsd/Battery.c	/^static bool findDevice(const char* name, int* mib, struct sensordev* snsrdev, size_t* sdlen) {$/;"	f	typeref:typename:bool	file:
find_command_x	test_spec.lua	/^local function find_command_x()$/;"	f
find_selected_y	test_spec.lua	/^local function find_selected_y(from)$/;"	f
flags	Process.h	/^   int flags;$/;"	m	struct:ProcessFieldData_	typeref:typename:int
flags	Process.h	/^   unsigned long int flags;$/;"	m	struct:Process_	typeref:typename:unsigned long int
flags	Settings.h	/^   int flags;$/;"	m	struct:Settings_	typeref:typename:int
follow	TraceScreen.h	/^   bool follow;$/;"	m	struct:TraceScreen_	typeref:typename:bool
following	ProcessList.h	/^   int following;$/;"	m	struct:ProcessList_	typeref:typename:int
found	IncSet.h	/^   bool found;$/;"	m	struct:IncSet_	typeref:typename:bool
freeMem	ProcessList.h	/^   unsigned long long int freeMem;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
freeSwap	ProcessList.h	/^   unsigned long long int freeSwap;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
freebsd_platform_headers	Makefile.am	/^freebsd_platform_headers = \\$/;"	m
fscale	openbsd/OpenBSDProcessList.c	/^static long fscale;$/;"	v	typeref:typename:long	file:
functions	FunctionBar.h	/^   char** functions;$/;"	m	struct:FunctionBar_	typeref:typename:char **
fxtofl	openbsd/OpenBSDProcessList.c	/^#define   fxtofl(/;"	d	file:
getpcpu	openbsd/OpenBSDProcessList.c	/^double getpcpu(const struct kinfo_proc *kp) {$/;"	f	typeref:typename:double
global_diff	darwin/DarwinProcessList.h	/^   uint64_t global_diff;$/;"	m	struct:DarwinProcessList_	typeref:typename:uint64_t
growthRate	Vector.h	/^   int growthRate;$/;"	m	struct:Vector_	typeref:typename:int
guestPeriod	linux/LinuxProcessList.h	/^   unsigned long long int guestPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
guestTime	linux/LinuxProcessList.h	/^   unsigned long long int guestTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
h	Meter.h	/^   int h;$/;"	m	struct:MeterMode_	typeref:typename:int
h	Meter.h	/^   int h;$/;"	m	struct:Meter_	typeref:typename:int
h	Panel.h	/^   int x, y, w, h;$/;"	m	struct:Panel_	typeref:typename:int
handleNetlinkMsg	linux/LinuxProcessList.c	/^static int handleNetlinkMsg(struct nl_msg *nlmsg, void *linuxProcess) {$/;"	f	typeref:typename:int	file:
header	Action.h	/^   Header* header;$/;"	m	struct:State_	typeref:typename:Header *
header	AvailableMetersPanel.h	/^   Header* header;$/;"	m	struct:AvailableMetersPanel_	typeref:typename:Header *
header	CategoriesPanel.h	/^   Header* header;$/;"	m	struct:CategoriesPanel_	typeref:typename:Header *
header	Panel.h	/^   RichString header;$/;"	m	struct:Panel_	typeref:typename:RichString
header	ScreenManager.h	/^   const Header* header;$/;"	m	struct:ScreenManager_	typeref:typename:const Header *
headerMargin	Settings.h	/^   bool headerMargin;$/;"	m	struct:Settings_	typeref:typename:bool
height	Header.h	/^   int height;$/;"	m	struct:Header_	typeref:typename:int
helpLeft	Action.c	/^static const struct { const char* key; const char* info; } helpLeft[] = {$/;"	v	typeref:typename:const struct __anon537103f40108[]
helpRight	Action.c	/^static const struct { const char* key; const char* info; } helpRight[] = {$/;"	v	typeref:typename:const struct __anon537103f40208[]
hideKernelThreads	Settings.h	/^   bool hideKernelThreads;$/;"	m	struct:Settings_	typeref:typename:bool
hideThreads	Settings.h	/^   bool hideThreads;$/;"	m	struct:Settings_	typeref:typename:bool
hideUserlandThreads	Settings.h	/^   bool hideUserlandThreads;$/;"	m	struct:Settings_	typeref:typename:bool
highlightBaseName	Settings.h	/^   bool highlightBaseName;$/;"	m	struct:Settings_	typeref:typename:bool
highlightMegabytes	Settings.h	/^   bool highlightMegabytes;$/;"	m	struct:Settings_	typeref:typename:bool
highlightThreads	Settings.h	/^   bool highlightThreads;$/;"	m	struct:Settings_	typeref:typename:bool
host_info	darwin/DarwinProcessList.h	/^   host_basic_info_data_t host_info;$/;"	m	struct:DarwinProcessList_	typeref:typename:host_basic_info_data_t
htop	Makefile.am	/^bin_PROGRAMS = htop$/;"	P	directory:bin
htop	configure.ac	/^AC_INIT([htop],[2.2.0],[hisham@gobolinux.org])$/;"	p
htop-headers	Makefile.am	/^htop-headers: $(myhtopheaders) $(all_platform_headers)$/;"	t
htop.1	Makefile.am	/^dist_man_MANS = htop.1$/;"	M	directory:man
htop.desktop	Makefile.am	/^applications_DATA = htop.desktop$/;"	D	directory:applications
htop.png	Makefile.am	/^pixmap_DATA = htop.png$/;"	D	directory:pixmap
htop_SOURCES	Makefile.am	/^htop_SOURCES  = $(myhtopheaders) $(myhtopplatheaders) $(myhtopsources) $(myhtopplatsources) conf/;"	m
hwloc	configure.ac	/^AC_ARG_ENABLE(hwloc, [AS_HELP_STRING([--enable-hwloc], [enable hwloc support for CPU affinity])]/;"	e
i	MainPanel.h	/^   int i;$/;"	m	union:__anond41838d0010a	typeref:typename:int
id	Process.h	/^   int id;$/;"	m	struct:ProcessPidColumn_	typeref:typename:int
idleAllPeriod	linux/LinuxProcessList.h	/^   unsigned long long int idleAllPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
idleAllTime	linux/LinuxProcessList.h	/^   unsigned long long int idleAllTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
idlePercent	dragonflybsd/DragonFlyBSDProcessList.h	/^   double idlePercent;$/;"	m	struct:CPUData_	typeref:typename:double
idlePercent	freebsd/FreeBSDProcessList.h	/^   double idlePercent;$/;"	m	struct:CPUData_	typeref:typename:double
idlePercent	solaris/SolarisProcessList.h	/^   double idlePercent;$/;"	m	struct:CPUData_	typeref:typename:double
idlePeriod	linux/LinuxProcessList.h	/^   unsigned long long int idlePeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
idleTime	linux/LinuxProcessList.h	/^   unsigned long long int idleTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
inc	InfoScreen.h	/^   IncSet* inc;$/;"	m	struct:InfoScreen_	typeref:typename:IncSet *
inc	MainPanel.h	/^   IncSet* inc;$/;"	m	struct:MainPanel_	typeref:typename:IncSet *
incFilter	ProcessList.h	/^   const char* incFilter;$/;"	m	struct:ProcessList_	typeref:typename:const char *
indent	Process.h	/^   int indent;$/;"	m	struct:Process_	typeref:typename:int
index	IncSet.h	/^   int index;$/;"	m	struct:IncMode_	typeref:typename:int
info	Action.c	/^static const struct { const char* key; const char* info; } helpLeft[] = {$/;"	m	struct:__anon537103f40108	typeref:typename:const char *	file:
info	Action.c	/^static const struct { const char* key; const char* info; } helpRight[] = {$/;"	m	struct:__anon537103f40208	typeref:typename:const char *	file:
init	Meter.h	/^   const Meter_Init init;$/;"	m	struct:MeterClass_	typeref:typename:const Meter_Init
insertionSort	Vector.c	/^static void insertionSort(Object** array, int left, int right, Object_Compare compare) {$/;"	f	typeref:typename:void	file:
ioPriority	linux/LinuxProcess.h	/^   IOPriority ioPriority;$/;"	m	struct:LinuxProcess_	typeref:typename:IOPriority
ioWaitPeriod	linux/LinuxProcessList.h	/^   unsigned long long int ioWaitPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
ioWaitTime	linux/LinuxProcessList.h	/^   unsigned long long int ioWaitTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
io_cancelled_write_bytes	linux/LinuxProcess.h	/^   unsigned long long io_cancelled_write_bytes;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_rate_read_bps	linux/LinuxProcess.h	/^   double io_rate_read_bps;$/;"	m	struct:LinuxProcess_	typeref:typename:double
io_rate_read_time	linux/LinuxProcess.h	/^   unsigned long long io_rate_read_time;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_rate_write_bps	linux/LinuxProcess.h	/^   double io_rate_write_bps;$/;"	m	struct:LinuxProcess_	typeref:typename:double
io_rate_write_time	linux/LinuxProcess.h	/^   unsigned long long io_rate_write_time;   $/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_rchar	linux/LinuxProcess.h	/^   unsigned long long io_rchar;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_read_bytes	linux/LinuxProcess.h	/^   unsigned long long io_read_bytes;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_syscr	linux/LinuxProcess.h	/^   unsigned long long io_syscr;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_syscw	linux/LinuxProcess.h	/^   unsigned long long io_syscw;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_wchar	linux/LinuxProcess.h	/^   unsigned long long io_wchar;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
io_write_bytes	linux/LinuxProcess.h	/^   unsigned long long io_write_bytes;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
irqPercent	dragonflybsd/DragonFlyBSDProcessList.h	/^   double irqPercent;$/;"	m	struct:CPUData_	typeref:typename:double
irqPercent	freebsd/FreeBSDProcessList.h	/^   double irqPercent;$/;"	m	struct:CPUData_	typeref:typename:double
irqPercent	solaris/SolarisProcessList.h	/^   double irqPercent;$/;"	m	struct:CPUData_	typeref:typename:double
irqPeriod	linux/LinuxProcessList.h	/^   unsigned long long int irqPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
irqTime	linux/LinuxProcessList.h	/^   unsigned long long int irqTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
isFilter	IncSet.h	/^   bool isFilter;$/;"	m	struct:IncMode_	typeref:typename:bool
isKernelThread	linux/LinuxProcess.h	/^   bool isKernelThread;$/;"	m	struct:LinuxProcess_	typeref:typename:bool
is_blank	scripts/MakeHeader.py	/^         is_blank = False$/;"	v
is_blank	scripts/MakeHeader.py	/^         is_blank = True$/;"	v
is_blank	scripts/MakeHeader.py	/^      is_blank = False$/;"	v
is_blank	scripts/MakeHeader.py	/^is_blank = False$/;"	v
is_lwp	solaris/SolarisProcess.h	/^   bool       is_lwp;$/;"	m	struct:SolarisProcess_	typeref:typename:bool
is_string_at	test_spec.lua	/^local function is_string_at(x, y, str)$/;"	f
items	Hashtable.h	/^   int items;$/;"	m	struct:Hashtable_	typeref:typename:int
items	Panel.h	/^   Vector* items;$/;"	m	struct:Panel_	typeref:typename:Vector *
items	Vector.h	/^   int items;$/;"	m	struct:Vector_	typeref:typename:int
itrealvalue	Process.h	/^   long int itrealvalue;$/;"	m	struct:Process_	typeref:typename:long int
jail_errmsg	dragonflybsd/DragonFlyBSDProcessList.h	/^char jail_errmsg[JAIL_ERRMSGLEN];$/;"	v	typeref:typename:char[]
jail_errmsg	freebsd/FreeBSDProcessList.h	/^char jail_errmsg[JAIL_ERRMSGLEN];$/;"	v	typeref:typename:char[]
jails	dragonflybsd/DragonFlyBSDProcessList.h	/^   Hashtable *jails;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:Hashtable *
jid	dragonflybsd/DragonFlyBSDProcess.h	/^   int   jid;$/;"	m	struct:DragonFlyBSDProcess_	typeref:typename:int
jid	freebsd/FreeBSDProcess.h	/^   int   jid;$/;"	m	struct:FreeBSDProcess_	typeref:typename:int
jiffy	linux/LinuxProcessList.c	/^static double jiffy = 0.0;$/;"	v	typeref:typename:double	file:
jname	dragonflybsd/DragonFlyBSDProcess.h	/^   char* jname;$/;"	m	struct:DragonFlyBSDProcess_	typeref:typename:char *
jname	freebsd/FreeBSDProcess.h	/^   char* jname;$/;"	m	struct:FreeBSDProcess_	typeref:typename:char *
kd	dragonflybsd/DragonFlyBSDProcessList.h	/^   kvm_t* kd;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:kvm_t *
kd	freebsd/FreeBSDProcessList.h	/^   kvm_t* kd;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:kvm_t *
kd	openbsd/OpenBSDProcessList.h	/^   kvm_t* kd;$/;"	m	struct:OpenBSDProcessList_	typeref:typename:kvm_t *
kd	solaris/SolarisProcessList.h	/^   kstat_ctl_t* kd;$/;"	m	struct:SolarisProcessList_	typeref:typename:kstat_ctl_t *
kern	darwin/DarwinProcessList.c	/^struct kern {$/;"	s	file:
kernel	dragonflybsd/DragonFlyBSDProcess.h	/^   int   kernel;$/;"	m	struct:DragonFlyBSDProcess_	typeref:typename:int
kernel	freebsd/FreeBSDProcess.h	/^   int   kernel;$/;"	m	struct:FreeBSDProcess_	typeref:typename:int
kernel	solaris/SolarisProcess.h	/^   int        kernel;$/;"	m	struct:SolarisProcess_	typeref:typename:int
kernelFScale	dragonflybsd/DragonFlyBSDProcessList.c	/^static int kernelFScale;$/;"	v	typeref:typename:int	file:
kernelFScale	freebsd/FreeBSDProcessList.c	/^static int kernelFScale;$/;"	v	typeref:typename:int	file:
kernelThreads	ProcessList.h	/^   int kernelThreads;$/;"	m	struct:ProcessList_	typeref:typename:int
kernel_threads	darwin/DarwinProcessList.h	/^   uint64_t kernel_threads;$/;"	m	struct:DarwinProcessList_	typeref:typename:uint64_t
key	Action.c	/^static const struct { const char* key; const char* info; } helpLeft[] = {$/;"	m	struct:__anon537103f40108	typeref:typename:const char *	file:
key	Action.c	/^static const struct { const char* key; const char* info; } helpRight[] = {$/;"	m	struct:__anon537103f40208	typeref:typename:const char *	file:
key	Hashtable.h	/^   unsigned int key;$/;"	m	struct:HashtableItem	typeref:typename:unsigned int
key	ListItem.h	/^   int key;$/;"	m	struct:ListItem_	typeref:typename:int
keys	FunctionBar.h	/^   char** keys;$/;"	m	struct:FunctionBar_	typeref:typename:char **
keys	MainPanel.h	/^   Htop_Action *keys;$/;"	m	struct:MainPanel_	typeref:typename:Htop_Action *
kill	solaris/Platform.h	/^#define  kill(/;"	d
klass	Object.h	/^   ObjectClass* klass;$/;"	m	struct:Object_	typeref:typename:ObjectClass *
klass	linux/IOPriorityPanel.c	/^   static const struct { int klass; const char* name; } classes[] = {$/;"	m	struct:IOPriorityPanel_new::__anonbb100ddf0108	typeref:typename:int	file:
kstkeip	Process.h	/^   unsigned long int kstkeip;$/;"	m	struct:Process_	typeref:typename:unsigned long int
kstkesp	Process.h	/^   unsigned long int kstkesp;$/;"	m	struct:Process_	typeref:typename:unsigned long int
kvar_t	solaris/Platform.h	/^typedef struct var kvar_t;$/;"	t	typeref:struct:var
label	Process.h	/^   char* label;$/;"	m	struct:ProcessPidColumn_	typeref:typename:char *
lcov	Makefile.am	/^lcov:$/;"	t
leftNeighbor	MetersPanel.h	/^   MetersPanel* leftNeighbor;$/;"	m	struct:MetersPanel_	typeref:typename:MetersPanel *
leftPanel	AvailableMetersPanel.h	/^   Panel* leftPanel;$/;"	m	struct:AvailableMetersPanel_	typeref:typename:Panel *
len	Settings.h	/^   int len;$/;"	m	struct:__anon665a1bcc0108	typeref:typename:int
lidle	solaris/SolarisProcessList.h	/^   uint64_t lidle;$/;"	m	struct:CPUData_	typeref:typename:uint64_t
line	scripts/MakeHeader.py	/^   line = line[:-1]$/;"	v
lines	InfoScreen.h	/^   Vector* lines;$/;"	m	struct:InfoScreen_	typeref:typename:Vector *
lintr	solaris/SolarisProcessList.h	/^   uint64_t lintr;$/;"	m	struct:CPUData_	typeref:typename:uint64_t
linux_affinity	configure.ac	/^AC_ARG_ENABLE(linux_affinity, [AS_HELP_STRING([--enable-linux-affinity], [enable Linux sched_set/;"	e
linux_platform_headers	Makefile.am	/^linux_platform_headers = \\$/;"	m
lkrnl	solaris/SolarisProcessList.h	/^   uint64_t lkrnl;$/;"	m	struct:CPUData_	typeref:typename:uint64_t
luser	solaris/SolarisProcessList.h	/^   uint64_t luser;$/;"	m	struct:CPUData_	typeref:typename:uint64_t
lwpid	solaris/SolarisProcess.h	/^   pid_t      lwpid;$/;"	m	struct:SolarisProcess_	typeref:typename:pid_t
m_drs	linux/LinuxProcess.h	/^   long m_drs;$/;"	m	struct:LinuxProcess_	typeref:typename:long
m_dt	linux/LinuxProcess.h	/^   long m_dt;$/;"	m	struct:LinuxProcess_	typeref:typename:long
m_lrs	linux/LinuxProcess.h	/^   long m_lrs;$/;"	m	struct:LinuxProcess_	typeref:typename:long
m_resident	Process.h	/^   long m_resident;$/;"	m	struct:Process_	typeref:typename:long
m_share	linux/LinuxProcess.h	/^   long m_share;$/;"	m	struct:LinuxProcess_	typeref:typename:long
m_size	Process.h	/^   long m_size;$/;"	m	struct:Process_	typeref:typename:long
m_trs	linux/LinuxProcess.h	/^   long m_trs;$/;"	m	struct:LinuxProcess_	typeref:typename:long
main	htop.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
majflt	Process.h	/^   unsigned long int majflt;$/;"	m	struct:Process_	typeref:typename:unsigned long int
major	linux/LinuxProcessList.h	/^   unsigned int major;$/;"	m	struct:TtyDriver_	typeref:typename:unsigned int
makePair	test_spec.lua	/^   local function makePair(foreground, background)$/;"	f
match	linux/Battery.c	/^   #define match(/;"	d	file:
maxItems	Meter.h	/^   const char maxItems;$/;"	m	struct:MeterClass_	typeref:typename:const char
memActive	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long long int memActive;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long long int
memActive	freebsd/FreeBSDProcessList.h	/^   unsigned long long int memActive;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long long int
memFree	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long long int memFree;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long long int
memFree	freebsd/FreeBSDProcessList.h	/^   unsigned long long int memFree;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long long int
memInactive	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long long int memInactive;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long long int
memInactive	freebsd/FreeBSDProcessList.h	/^   unsigned long long int memInactive;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long long int
memWire	dragonflybsd/DragonFlyBSDProcessList.h	/^   unsigned long long int memWire;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:unsigned long long int
memWire	freebsd/FreeBSDProcessList.h	/^   unsigned long long int memWire;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long long int
memZfsArc	freebsd/FreeBSDProcessList.h	/^   unsigned long long int memZfsArc;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:unsigned long long int
meters	MetersPanel.h	/^   Vector* meters;$/;"	m	struct:MetersPanel_	typeref:typename:Vector *
millisleep	htop.c	/^static void millisleep(unsigned long millisec) {$/;"	f	typeref:typename:void	file:
minflt	Process.h	/^   unsigned long int minflt;$/;"	m	struct:Process_	typeref:typename:unsigned long int
minorFrom	linux/LinuxProcessList.h	/^   unsigned int minorFrom;$/;"	m	struct:TtyDriver_	typeref:typename:unsigned int
minorTo	linux/LinuxProcessList.h	/^   unsigned int minorTo;$/;"	m	struct:TtyDriver_	typeref:typename:unsigned int
mode	Meter.h	/^   int mode;$/;"	m	struct:Meter_	typeref:typename:int
modes	IncSet.h	/^   IncMode modes[2];$/;"	m	struct:IncSet_	typeref:typename:IncMode[2]
modes	Settings.h	/^   int* modes;$/;"	m	struct:__anon665a1bcc0108	typeref:typename:int *
moveToNeighbor	MetersPanel.c	/^static inline bool moveToNeighbor(MetersPanel* this, MetersPanel* neighbor, int selected) {$/;"	f	typeref:typename:bool	file:
moving	ColumnsPanel.h	/^   bool moving;$/;"	m	struct:ColumnsPanel_	typeref:typename:bool
moving	ListItem.h	/^   bool moving;$/;"	m	struct:ListItem_	typeref:typename:bool
moving	MetersPanel.h	/^   bool moving;$/;"	m	struct:MetersPanel_	typeref:typename:bool
my_htop_platform	configure.ac	/^AC_SUBST(my_htop_platform)$/;"	s
myhtopheaders	Makefile.am	/^myhtopheaders = AvailableColumnsPanel.h AvailableMetersPanel.h \\$/;"	m
myhtopplatheaders	Makefile.am	/^myhtopplatheaders = $(darwin_platform_headers)$/;"	m
myhtopplatheaders	Makefile.am	/^myhtopplatheaders = $(dragonflybsd_platform_headers)$/;"	m
myhtopplatheaders	Makefile.am	/^myhtopplatheaders = $(freebsd_platform_headers)$/;"	m
myhtopplatheaders	Makefile.am	/^myhtopplatheaders = $(linux_platform_headers)$/;"	m
myhtopplatheaders	Makefile.am	/^myhtopplatheaders = $(openbsd_platform_headers)$/;"	m
myhtopplatheaders	Makefile.am	/^myhtopplatheaders = $(solaris_platform_headers)$/;"	m
myhtopplatheaders	Makefile.am	/^myhtopplatheaders = $(unsupported_platform_headers)$/;"	m
myhtopplatsources	Makefile.am	/^myhtopplatsources = darwin\/Platform.c darwin\/DarwinProcess.c \\$/;"	m
myhtopplatsources	Makefile.am	/^myhtopplatsources = dragonflybsd\/Platform.c dragonflybsd\/DragonFlyBSDProcessList.c \\$/;"	m
myhtopplatsources	Makefile.am	/^myhtopplatsources = freebsd\/Platform.c freebsd\/FreeBSDProcessList.c \\$/;"	m
myhtopplatsources	Makefile.am	/^myhtopplatsources = linux\/Platform.c linux\/IOPriorityPanel.c linux\/IOPriority.c \\$/;"	m
myhtopplatsources	Makefile.am	/^myhtopplatsources = openbsd\/Platform.c openbsd\/OpenBSDProcessList.c \\$/;"	m
myhtopplatsources	Makefile.am	/^myhtopplatsources = solaris\/Platform.c \\$/;"	m
myhtopplatsources	Makefile.am	/^myhtopplatsources = unsupported\/Platform.c \\$/;"	m
myhtopsources	Makefile.am	/^myhtopsources = AvailableMetersPanel.c CategoriesPanel.c CheckItem.c \\$/;"	m
name	Meter.h	/^   const char* name;$/;"	m	struct:MeterClass_	typeref:typename:const char *
name	Process.h	/^   const char* name;$/;"	m	struct:ProcessFieldData_	typeref:typename:const char *
name	SignalsPanel.h	/^   const char* name;$/;"	m	struct:SignalItem_	typeref:typename:const char *
name	linux/IOPriorityPanel.c	/^   static const struct { int klass; const char* name; } classes[] = {$/;"	m	struct:IOPriorityPanel_new::__anonbb100ddf0108	typeref:typename:const char *	file:
name	scripts/MakeHeader.py	/^name = sys.argv[1][:-2]$/;"	v
names	Settings.h	/^   char** names;$/;"	m	struct:__anon665a1bcc0108	typeref:typename:char **
needsRedraw	Panel.h	/^   bool needsRedraw;$/;"	m	struct:Panel_	typeref:typename:bool
netlink_family	linux/LinuxProcessList.h	/^   int netlink_family;$/;"	m	struct:LinuxProcessList_	typeref:typename:int
netlink_socket	linux/LinuxProcessList.h	/^   struct nl_sock *netlink_socket;$/;"	m	struct:LinuxProcessList_	typeref:struct:nl_sock *
next	Hashtable.h	/^   struct HashtableItem* next;$/;"	m	struct:HashtableItem	typeref:struct:HashtableItem *
next	OpenFilesScreen.h	/^   struct OpenFiles_FileData_* next;$/;"	m	struct:OpenFiles_FileData_	typeref:struct:OpenFiles_FileData_ *
nice	Process.h	/^   long int nice;$/;"	m	struct:Process_	typeref:typename:long int
nicePercent	dragonflybsd/DragonFlyBSDProcessList.h	/^   double nicePercent;$/;"	m	struct:CPUData_	typeref:typename:double
nicePercent	freebsd/FreeBSDProcessList.h	/^   double nicePercent;$/;"	m	struct:CPUData_	typeref:typename:double
nicePercent	solaris/SolarisProcessList.h	/^   double nicePercent;$/;"	m	struct:CPUData_	typeref:typename:double
nicePeriod	linux/LinuxProcessList.h	/^   unsigned long long int nicePeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
niceTime	linux/LinuxProcessList.h	/^   unsigned long long int niceTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
nlwp	Process.h	/^   long int nlwp;$/;"	m	struct:Process_	typeref:typename:long int
nrColumns	Header.h	/^   int nrColumns;$/;"	m	struct:Header_	typeref:typename:int
nswap	Process.h	/^   unsigned long int nswap;$/;"	m	struct:Process_	typeref:typename:unsigned long int
number	SignalsPanel.h	/^   int number;$/;"	m	struct:SignalItem_	typeref:typename:int
oldSelected	Panel.h	/^   int oldSelected;$/;"	m	struct:Panel_	typeref:typename:int
old_v	openbsd/Platform.c	/^static int64_t old_v[MAXCPU][5];$/;"	v	typeref:typename:int64_t[][5]	file:
onErr	InfoScreen.h	/^   const InfoScreen_OnErr onErr;$/;"	m	struct:InfoScreenClass_	typeref:typename:const InfoScreen_OnErr
onKey	InfoScreen.h	/^   const InfoScreen_OnKey onKey;$/;"	m	struct:InfoScreenClass_	typeref:typename:const InfoScreen_OnKey
oom	linux/LinuxProcess.h	/^   unsigned int oom;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned int
openbsd_platform_headers	Makefile.am	/^openbsd_platform_headers = \\$/;"	m
openvz	configure.ac	/^AC_ARG_ENABLE(openvz, [AS_HELP_STRING([--enable-openvz], [enable OpenVZ support])], ,enable_open/;"	e
orientation	ScreenManager.h	/^   Orientation orientation;$/;"	m	struct:ScreenManager_	typeref:typename:Orientation
origcontents	scripts/MakeHeader.py	/^      origcontents = orig.readlines()$/;"	v
os_execread	test_spec.lua	/^local function os_execread(cmd)$/;"	f
out	scripts/MakeHeader.py	/^out = StringIO()$/;"	v
owner	Hashtable.h	/^   bool owner;$/;"	m	struct:Hashtable_	typeref:typename:bool
owner	ScreenManager.h	/^   bool owner;$/;"	m	struct:ScreenManager_	typeref:typename:bool
owner	Vector.h	/^   bool owner;$/;"	m	struct:Vector_	typeref:typename:bool
pad	Header.h	/^   int pad;$/;"	m	struct:Header_	typeref:typename:int
pageSize	dragonflybsd/DragonFlyBSDProcessList.c	/^static int pageSize;$/;"	v	typeref:typename:int	file:
pageSize	freebsd/FreeBSDProcessList.c	/^static int pageSize;$/;"	v	typeref:typename:int	file:
pageSizeKb	dragonflybsd/DragonFlyBSDProcessList.c	/^static int pageSizeKb;$/;"	v	typeref:typename:int	file:
pageSizeKb	freebsd/FreeBSDProcessList.c	/^static int pageSizeKb;$/;"	v	typeref:typename:int	file:
panel	Action.h	/^   Panel* panel;$/;"	m	struct:State_	typeref:typename:Panel *
panel	ProcessList.h	/^   Panel* panel;$/;"	m	struct:ProcessList_	typeref:typename:Panel *
panelCount	ScreenManager.h	/^   int panelCount;$/;"	m	struct:ScreenManager_	typeref:typename:int
panels	ScreenManager.h	/^   Vector* panels;$/;"	m	struct:ScreenManager_	typeref:typename:Vector *
param	Meter.h	/^   int param;$/;"	m	struct:Meter_	typeref:typename:int
parseArguments	htop.c	/^static CommandLineSettings parseArguments(int argc, char** argv) {$/;"	f	typeref:typename:CommandLineSettings	file:
parseBatInfo	linux/Battery.c	/^static unsigned long int parseBatInfo(const char *fileName, const unsigned short int lineNum, co/;"	f	typeref:typename:unsigned long int	file:
partition	Vector.c	/^static int partition(Object** array, int left, int right, int pivotIndex, Object_Compare compare/;"	f	typeref:typename:int	file:
path	linux/LinuxProcessList.h	/^   char* path;$/;"	m	struct:TtyDriver_	typeref:typename:char *
percent_cpu	Process.h	/^   float percent_cpu;$/;"	m	struct:Process_	typeref:typename:float
percent_mem	Process.h	/^   float percent_mem;$/;"	m	struct:Process_	typeref:typename:float
percentages	openbsd/Platform.c	/^static int percentages(int cnt, int64_t *out, int64_t *new, int64_t *old, int64_t *diffs) {$/;"	f	typeref:typename:int	file:
pgrp	Process.h	/^   unsigned int pgrp;$/;"	m	struct:Process_	typeref:typename:unsigned int
pid	OpenFilesScreen.h	/^   pid_t pid;$/;"	m	struct:OpenFilesScreen_	typeref:typename:pid_t
pid	Process.h	/^   pid_t pid;$/;"	m	struct:Process_	typeref:typename:pid_t
pidSearch	MainPanel.h	/^   pid_t pidSearch;$/;"	m	struct:MainPanel_	typeref:typename:pid_t
pidWhiteList	ProcessList.h	/^   Hashtable* pidWhiteList;$/;"	m	struct:ProcessList_	typeref:typename:Hashtable *
pidWhiteList	htop.c	/^   Hashtable* pidWhiteList;$/;"	m	struct:CommandLineSettings_	typeref:typename:Hashtable *	file:
pixmap	Makefile.am	/^pixmapdir = $(datadir)\/pixmaps$/;"	d
pixmap_DATA	Makefile.am	/^pixmap_DATA = htop.png$/;"	m
pixmapdir	Makefile.am	/^pixmapdir = $(datadir)\/pixmaps$/;"	m
pl	Action.h	/^   ProcessList* pl;$/;"	m	struct:State_	typeref:typename:ProcessList *
pl	Affinity.h	/^   ProcessList* pl;$/;"	m	struct:Affinity_	typeref:typename:ProcessList *
pl	CategoriesPanel.h	/^   ProcessList* pl;$/;"	m	struct:CategoriesPanel_	typeref:typename:ProcessList *
pl	Header.h	/^   struct ProcessList_* pl;$/;"	m	struct:Header_	typeref:struct:ProcessList_ *
pl	Meter.h	/^   struct ProcessList_* pl;$/;"	m	struct:Meter_	typeref:struct:ProcessList_ *
plat_loadavg	solaris/Platform.c	/^double plat_loadavg[3] = {0};$/;"	v	typeref:typename:double[3]
poolid	solaris/SolarisProcess.h	/^   poolid_t   poolid;$/;"	m	struct:SolarisProcess_	typeref:typename:poolid_t
ppid	Process.h	/^   pid_t ppid;$/;"	m	struct:Process_	typeref:typename:pid_t
prev_load	darwin/DarwinProcessList.h	/^   processor_cpu_load_info_t prev_load;$/;"	m	struct:DarwinProcessList_	typeref:typename:processor_cpu_load_info_t
printHelpFlag	htop.c	/^static void printHelpFlag() {$/;"	f	typeref:typename:void	file:
printVersionFlag	htop.c	/^static void printVersionFlag() {$/;"	f	typeref:typename:void	file:
priority	Process.h	/^   long int priority;$/;"	m	struct:Process_	typeref:typename:long int
proc	configure.ac	/^AC_ARG_ENABLE(proc, [AS_HELP_STRING([--enable-proc], [use Linux-compatible proc filesystem])], e/;"	e
proc	configure.ac	/^AC_ARG_WITH(proc, [AS_HELP_STRING([--with-proc=DIR], [Location of a Linux-compatible proc filesy/;"	w
procAcpiCheck	linux/Battery.c	/^static ACPresence procAcpiCheck() {$/;"	f	typeref:typename:ACPresence	file:
process	InfoScreen.h	/^   Process* process;$/;"	m	struct:InfoScreen_	typeref:typename:Process *
processTable	ProcessList.h	/^   Hashtable* processTable;$/;"	m	struct:ProcessList_	typeref:typename:Hashtable *
processes	ProcessList.h	/^   Vector* processes;$/;"	m	struct:ProcessList_	typeref:typename:Vector *
processes2	ProcessList.h	/^   Vector* processes2;$/;"	m	struct:ProcessList_	typeref:typename:Vector *
processor	Process.h	/^   int processor;$/;"	m	struct:Process_	typeref:typename:int
profile	Makefile.am	/^profile:$/;"	t
projid	solaris/SolarisProcess.h	/^   projid_t   projid;$/;"	m	struct:SolarisProcess_	typeref:typename:projid_t
quickSort	Vector.c	/^static void quickSort(Object** array, int left, int right, Object_Compare compare) {$/;"	f	typeref:typename:void	file:
readFields	Settings.c	/^static void readFields(ProcessField* fields, int* flags, const char* line) {$/;"	f	typeref:typename:void	file:
realpid	solaris/SolarisProcess.h	/^   pid_t      realpid;$/;"	m	struct:SolarisProcess_	typeref:typename:pid_t
realppid	solaris/SolarisProcess.h	/^   pid_t      realppid;$/;"	m	struct:SolarisProcess_	typeref:typename:pid_t
ref	CheckItem.h	/^   bool* ref;$/;"	m	struct:CheckItem_	typeref:typename:bool *
rightNeighbor	MetersPanel.h	/^   MetersPanel* rightNeighbor;$/;"	m	struct:MetersPanel_	typeref:typename:MetersPanel *
rightPanel	AvailableMetersPanel.h	/^   Panel* rightPanel;$/;"	m	struct:AvailableMetersPanel_	typeref:typename:Panel *
rlim	Process.h	/^   unsigned long int rlim;$/;"	m	struct:Process_	typeref:typename:unsigned long int
rss	Process.h	/^   long int rss;$/;"	m	struct:Process_	typeref:typename:long int
runningTasks	ProcessList.h	/^   int runningTasks;$/;"	m	struct:ProcessList_	typeref:typename:int
running_it	test_spec.lua	/^local function running_it(desc, fn)$/;"	f
scan	InfoScreen.h	/^   const InfoScreen_Scan scan;$/;"	m	struct:InfoScreenClass_	typeref:typename:const InfoScreen_Scan
scr	AvailableMetersPanel.h	/^   ScreenManager* scr;$/;"	m	struct:AvailableMetersPanel_	typeref:typename:ScreenManager *
scr	CategoriesPanel.h	/^   ScreenManager* scr;$/;"	m	struct:CategoriesPanel_	typeref:typename:ScreenManager *
scr	ColorsPanel.h	/^   ScreenManager* scr;$/;"	m	struct:ColorsPanel_	typeref:typename:ScreenManager *
scr	DisplayOptionsPanel.h	/^   ScreenManager* scr;$/;"	m	struct:DisplayOptionsPanel_	typeref:typename:ScreenManager *
scr	MetersPanel.h	/^   ScreenManager* scr;$/;"	m	struct:MetersPanel_	typeref:typename:ScreenManager *
scrollH	Panel.h	/^   short scrollH;$/;"	m	struct:Panel_	typeref:typename:short
scrollV	Panel.h	/^   int scrollV;$/;"	m	struct:Panel_	typeref:typename:int
search	IncSet.c	/^static bool search(IncMode* mode, Panel* panel, IncMode_GetPanelValue getPanelValue) {$/;"	f	typeref:typename:bool	file:
searchEvents	IncSet.c	/^static int searchEvents[] = {KEY_F(3), 27, ERR};$/;"	v	typeref:typename:int[]	file:
searchFunctions	IncSet.c	/^static const char* const searchFunctions[] = {"Next  ", "Cancel ", " Search: ", NULL};$/;"	v	typeref:typename:const char * const[]	file:
searchKeys	IncSet.c	/^static const char* const searchKeys[] = {"F3", "Esc", "  "};$/;"	v	typeref:typename:const char * const[]	file:
selected	Panel.h	/^   int selected;$/;"	m	struct:Panel_	typeref:typename:int
selectedLen	Panel.h	/^   int selectedLen;$/;"	m	struct:Panel_	typeref:typename:int
selectionColor	Panel.h	/^   int selectionColor;$/;"	m	struct:Panel_	typeref:typename:int
selfheader	scripts/MakeHeader.py	/^selfheader = '#include "' + name + '.h"'$/;"	v
send	test_spec.lua	/^local function send(key, times, quick)$/;"	f
session	Process.h	/^   unsigned int session;$/;"	m	struct:Process_	typeref:typename:unsigned int
setCommand	linux/LinuxProcessList.c	/^static void setCommand(Process* process, const char* command, int len) {$/;"	f	typeref:typename:void	file:
setCurrentPanel	ScreenManager.c	/^static Panel* setCurrentPanel(Panel* panel) {$/;"	f	typeref:typename:Panel *	file:
set_display_option	test_spec.lua	/^local function set_display_option(n)$/;"	f
settings	Action.h	/^   Settings* settings;$/;"	m	struct:State_	typeref:typename:Settings *
settings	AvailableMetersPanel.h	/^   Settings* settings;$/;"	m	struct:AvailableMetersPanel_	typeref:typename:Settings *
settings	CategoriesPanel.h	/^   Settings* settings;$/;"	m	struct:CategoriesPanel_	typeref:typename:Settings *
settings	ColorsPanel.h	/^   Settings* settings;$/;"	m	struct:ColorsPanel_	typeref:typename:Settings *
settings	ColumnsPanel.h	/^   Settings* settings;$/;"	m	struct:ColumnsPanel_	typeref:typename:Settings *
settings	DisplayOptionsPanel.h	/^   Settings* settings;$/;"	m	struct:DisplayOptionsPanel_	typeref:typename:Settings *
settings	Header.h	/^   Settings* settings;$/;"	m	struct:Header_	typeref:typename:Settings *
settings	MetersPanel.h	/^   Settings* settings;$/;"	m	struct:MetersPanel_	typeref:typename:Settings *
settings	Process.h	/^   struct Settings_* settings;$/;"	m	struct:Process_	typeref:struct:Settings_ *
settings	ProcessList.h	/^   Settings* settings;$/;"	m	struct:ProcessList_	typeref:typename:Settings *
settings	ScreenManager.h	/^   const Settings* settings;$/;"	m	struct:ScreenManager_	typeref:typename:const Settings *
setuid	configure.ac	/^AC_ARG_ENABLE(setuid, [AS_HELP_STRING([--enable-setuid], [enable setuid support for platforms th/;"	e
shadowOtherUsers	Settings.h	/^   bool shadowOtherUsers;$/;"	m	struct:Settings_	typeref:typename:bool
sharedMem	ProcessList.h	/^   unsigned long long int sharedMem;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
show	Process.h	/^   bool show;$/;"	m	struct:Process_	typeref:typename:bool
show	test_spec.lua	/^local function show(key)$/;"	f
showChildren	Process.h	/^   bool showChildren;$/;"	m	struct:Process_	typeref:typename:bool
showProgramPath	Settings.h	/^   bool showProgramPath;$/;"	m	struct:Settings_	typeref:typename:bool
showThreadNames	Settings.h	/^   bool showThreadNames;$/;"	m	struct:Settings_	typeref:typename:bool
sigcatch	Process.h	/^   unsigned long int sigcatch;$/;"	m	struct:Process_	typeref:typename:unsigned long int
sigignore	Process.h	/^   unsigned long int sigignore;$/;"	m	struct:Process_	typeref:typename:unsigned long int
signal	Process.h	/^   unsigned long int signal;$/;"	m	struct:Process_	typeref:typename:unsigned long int
size	Affinity.h	/^   int size;$/;"	m	struct:Affinity_	typeref:typename:int
size	FunctionBar.h	/^   int size;$/;"	m	struct:FunctionBar_	typeref:typename:int
size	Hashtable.h	/^   int size;$/;"	m	struct:Hashtable_	typeref:typename:int
size	solaris/Platform.h	/^   size_t size;$/;"	m	struct:envAccum_	typeref:typename:size_t
softIrqPeriod	linux/LinuxProcessList.h	/^   unsigned long long int softIrqPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
softIrqTime	linux/LinuxProcessList.h	/^   unsigned long long int softIrqTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
solaris_platform_headers	Makefile.am	/^solaris_platform_headers = \\$/;"	m
sortBy	Action.c	/^static Htop_Reaction sortBy(State* st) {$/;"	f	typeref:typename:Htop_Reaction	file:
sortKey	Settings.h	/^   ProcessField sortKey;$/;"	m	struct:Settings_	typeref:typename:ProcessField
sortKey	htop.c	/^   int sortKey;$/;"	m	struct:CommandLineSettings_	typeref:typename:int	file:
sortTtyDrivers	linux/LinuxProcessList.c	/^static int sortTtyDrivers(const void* va, const void* vb) {$/;"	f	typeref:typename:int	file:
st_uid	Process.h	/^   uid_t st_uid;$/;"	m	struct:Process_	typeref:typename:uid_t
startcode	Process.h	/^   unsigned long int startcode;$/;"	m	struct:Process_	typeref:typename:unsigned long int
startstack	Process.h	/^   unsigned long int startstack;$/;"	m	struct:Process_	typeref:typename:unsigned long int
starttime	linux/LinuxProcess.h	/^   unsigned long long starttime;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
starttime_ctime	Process.h	/^   time_t starttime_ctime;$/;"	m	struct:Process_	typeref:typename:time_t
starttime_show	Process.h	/^   char starttime_show[8];$/;"	m	struct:Process_	typeref:typename:char[8]
state	MainPanel.h	/^   State* state;$/;"	m	struct:MainPanel_	typeref:typename:State *
state	Process.h	/^   char state;$/;"	m	struct:Process_	typeref:typename:char
state	scripts/MakeHeader.py	/^            state = SKIP$/;"	v
state	scripts/MakeHeader.py	/^            state = SKIPONE$/;"	v
state	scripts/MakeHeader.py	/^         state = ANY$/;"	v
state	scripts/MakeHeader.py	/^         state = COPY$/;"	v
state	scripts/MakeHeader.py	/^      state = ANY$/;"	v
state	scripts/MakeHeader.py	/^state = ANY$/;"	v
static	scripts/MakeHeader.py	/^            static = 1$/;"	v
static	scripts/MakeHeader.py	/^         static = 0$/;"	v
static	scripts/MakeHeader.py	/^static = 0$/;"	v
staticData	FunctionBar.h	/^   bool staticData;$/;"	m	struct:FunctionBar_	typeref:typename:bool
stealPeriod	linux/LinuxProcessList.h	/^   unsigned long long int stealPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
stealTime	linux/LinuxProcessList.h	/^   unsigned long long int stealTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
stime	darwin/DarwinProcess.h	/^   uint64_t stime;$/;"	m	struct:DarwinProcess_	typeref:typename:uint64_t
stime	linux/LinuxProcess.h	/^   unsigned long long int stime;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long int
strace	TraceScreen.h	/^   FILE* strace;$/;"	m	struct:TraceScreen_	typeref:typename:FILE *
string_at	test_spec.lua	/^local function string_at(x, y, len)$/;"	f
super	AvailableColumnsPanel.h	/^   Panel super;$/;"	m	struct:AvailableColumnsPanel_	typeref:typename:Panel
super	AvailableMetersPanel.h	/^   Panel super;$/;"	m	struct:AvailableMetersPanel_	typeref:typename:Panel
super	CategoriesPanel.h	/^   Panel super;$/;"	m	struct:CategoriesPanel_	typeref:typename:Panel
super	CheckItem.h	/^   Object super;$/;"	m	struct:CheckItem_	typeref:typename:Object
super	ColorsPanel.h	/^   Panel super;$/;"	m	struct:ColorsPanel_	typeref:typename:Panel
super	ColumnsPanel.h	/^   Panel super;$/;"	m	struct:ColumnsPanel_	typeref:typename:Panel
super	DisplayOptionsPanel.h	/^   Panel super;$/;"	m	struct:DisplayOptionsPanel_	typeref:typename:Panel
super	EnvScreen.h	/^   InfoScreen super;$/;"	m	struct:EnvScreen_	typeref:typename:InfoScreen
super	InfoScreen.h	/^   Object super;$/;"	m	struct:InfoScreen_	typeref:typename:Object
super	InfoScreen.h	/^   ObjectClass super;$/;"	m	struct:InfoScreenClass_	typeref:typename:ObjectClass
super	ListItem.h	/^   Object super;$/;"	m	struct:ListItem_	typeref:typename:Object
super	MainPanel.h	/^   Panel super;$/;"	m	struct:MainPanel_	typeref:typename:Panel
super	Meter.h	/^   Object super;$/;"	m	struct:Meter_	typeref:typename:Object
super	Meter.h	/^   ObjectClass super;$/;"	m	struct:MeterClass_	typeref:typename:ObjectClass
super	MetersPanel.h	/^   Panel super;$/;"	m	struct:MetersPanel_	typeref:typename:Panel
super	OpenFilesScreen.h	/^   InfoScreen super;$/;"	m	struct:OpenFilesScreen_	typeref:typename:InfoScreen
super	Panel.h	/^   Object super;$/;"	m	struct:Panel_	typeref:typename:Object
super	Panel.h	/^   const ObjectClass super;$/;"	m	struct:PanelClass_	typeref:typename:const ObjectClass
super	Process.h	/^   Object super;$/;"	m	struct:Process_	typeref:typename:Object
super	Process.h	/^   const ObjectClass super;$/;"	m	struct:ProcessClass_	typeref:typename:const ObjectClass
super	TraceScreen.h	/^   InfoScreen super;$/;"	m	struct:TraceScreen_	typeref:typename:InfoScreen
super	darwin/DarwinProcess.h	/^   Process super;$/;"	m	struct:DarwinProcess_	typeref:typename:Process
super	darwin/DarwinProcessList.h	/^   ProcessList super;$/;"	m	struct:DarwinProcessList_	typeref:typename:ProcessList
super	dragonflybsd/DragonFlyBSDProcess.h	/^   Process super;$/;"	m	struct:DragonFlyBSDProcess_	typeref:typename:Process
super	dragonflybsd/DragonFlyBSDProcessList.h	/^   ProcessList super;$/;"	m	struct:DragonFlyBSDProcessList_	typeref:typename:ProcessList
super	freebsd/FreeBSDProcess.h	/^   Process super;$/;"	m	struct:FreeBSDProcess_	typeref:typename:Process
super	freebsd/FreeBSDProcessList.h	/^   ProcessList super;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:ProcessList
super	linux/LinuxProcess.h	/^   Process super;$/;"	m	struct:LinuxProcess_	typeref:typename:Process
super	linux/LinuxProcessList.h	/^   ProcessList super;$/;"	m	struct:LinuxProcessList_	typeref:typename:ProcessList
super	openbsd/OpenBSDProcess.h	/^   Process super;$/;"	m	struct:OpenBSDProcess_	typeref:typename:Process
super	openbsd/OpenBSDProcessList.h	/^   ProcessList super;$/;"	m	struct:OpenBSDProcessList_	typeref:typename:ProcessList
super	solaris/SolarisProcess.h	/^   Process    super;$/;"	m	struct:SolarisProcess_	typeref:typename:Process
super	solaris/SolarisProcessList.h	/^   ProcessList super;$/;"	m	struct:SolarisProcessList_	typeref:typename:ProcessList
swap	Vector.h	/^#define swap(/;"	d
swapin_delay_percent	linux/LinuxProcess.h	/^   float swapin_delay_percent;$/;"	m	struct:LinuxProcess_	typeref:typename:float
swapin_delay_total	linux/LinuxProcess.h	/^   unsigned long long swapin_delay_total;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long
systemAllPercent	dragonflybsd/DragonFlyBSDProcessList.h	/^   double systemAllPercent;$/;"	m	struct:CPUData_	typeref:typename:double
systemAllPercent	freebsd/FreeBSDProcessList.h	/^   double systemAllPercent;$/;"	m	struct:CPUData_	typeref:typename:double
systemAllPercent	solaris/SolarisProcessList.h	/^   double systemAllPercent;$/;"	m	struct:CPUData_	typeref:typename:double
systemAllPeriod	linux/LinuxProcessList.h	/^   unsigned long long int systemAllPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
systemAllTime	linux/LinuxProcessList.h	/^   unsigned long long int systemAllTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
systemPercent	dragonflybsd/DragonFlyBSDProcessList.h	/^   double systemPercent;$/;"	m	struct:CPUData_	typeref:typename:double
systemPercent	freebsd/FreeBSDProcessList.h	/^   double systemPercent;$/;"	m	struct:CPUData_	typeref:typename:double
systemPercent	solaris/SolarisProcessList.h	/^   double systemPercent;$/;"	m	struct:CPUData_	typeref:typename:double
systemPeriod	linux/LinuxProcessList.h	/^   unsigned long long int systemPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
systemTime	linux/LinuxProcessList.h	/^   unsigned long long int systemTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
tag	Process.h	/^   bool tag;$/;"	m	struct:Process_	typeref:typename:bool
tagAllChildren	Action.c	/^static void tagAllChildren(Panel* panel, Process* parent) {$/;"	f	typeref:typename:void	file:
target	Makefile.am	/^target:$/;"	t
taskAccess	darwin/DarwinProcess.h	/^   bool taskAccess;$/;"	m	struct:DarwinProcess_	typeref:typename:bool
taskid	solaris/SolarisProcess.h	/^   taskid_t   taskid;$/;"	m	struct:SolarisProcess_	typeref:typename:taskid_t
taskstats	configure.ac	/^AC_ARG_ENABLE(taskstats, [AS_HELP_STRING([--enable-taskstats], [enable per-task IO Stats (taskst/;"	e
terminated	test_spec.lua	/^local function terminated()$/;"	f
text	CheckItem.h	/^   char* text;$/;"	m	struct:CheckItem_	typeref:typename:char *
tgid	Process.h	/^   pid_t tgid;$/;"	m	struct:Process_	typeref:typename:pid_t
time	Meter.h	/^   struct timeval time;$/;"	m	struct:GraphData_	typeref:struct:timeval
time	Process.h	/^   unsigned long long int time;$/;"	m	struct:Process_	typeref:typename:unsigned long long int
title	Process.h	/^   const char* title;$/;"	m	struct:ProcessFieldData_	typeref:typename:const char *
topology	ProcessList.h	/^   hwloc_topology_t topology;$/;"	m	struct:ProcessList_	typeref:typename:hwloc_topology_t
topologyOk	ProcessList.h	/^   bool topologyOk;$/;"	m	struct:ProcessList_	typeref:typename:bool
total	Meter.h	/^   const double total;$/;"	m	struct:MeterClass_	typeref:typename:const double
total	Meter.h	/^   double total;$/;"	m	struct:Meter_	typeref:typename:double
totalMem	ProcessList.h	/^   unsigned long long int totalMem;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
totalPeriod	linux/LinuxProcessList.h	/^   unsigned long long int totalPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
totalPeriod	openbsd/OpenBSDProcessList.h	/^   unsigned long long int totalPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
totalSwap	ProcessList.h	/^   unsigned long long int totalSwap;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
totalTasks	ProcessList.h	/^   int totalTasks;$/;"	m	struct:ProcessList_	typeref:typename:int
totalTime	linux/LinuxProcessList.h	/^   unsigned long long int totalTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
totalTime	openbsd/OpenBSDProcessList.h	/^   unsigned long long int totalTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
tpgid	Process.h	/^   int tpgid;$/;"	m	struct:Process_	typeref:typename:int
tracing	TraceScreen.h	/^   bool tracing;$/;"	m	struct:TraceScreen_	typeref:typename:bool
treeView	Settings.h	/^   bool treeView;$/;"	m	struct:Settings_	typeref:typename:bool
treeView	htop.c	/^   bool treeView;$/;"	m	struct:CommandLineSettings_	typeref:typename:bool	file:
tryRead	linux/LinuxProcessList.c	/^      #define tryRead(/;"	d	file:
ttyDevice	linux/LinuxProcess.h	/^   char* ttyDevice;$/;"	m	struct:LinuxProcess_	typeref:typename:char *
ttyDrivers	linux/LinuxProcessList.h	/^   TtyDriver* ttyDrivers;$/;"	m	struct:LinuxProcessList_	typeref:typename:TtyDriver *
tty_nr	Process.h	/^   unsigned int tty_nr;$/;"	m	struct:Process_	typeref:typename:unsigned int
type	Vector.h	/^   ObjectClass* type;$/;"	m	struct:Vector_	typeref:typename:ObjectClass *
uiName	Meter.h	/^   const char* uiName;$/;"	m	struct:MeterClass_	typeref:typename:const char *
uiName	Meter.h	/^   const char* uiName;$/;"	m	struct:MeterMode_	typeref:typename:const char *
unicode	configure.ac	/^AC_ARG_ENABLE(unicode, [AS_HELP_STRING([--enable-unicode], [enable Unicode support])], ,enable_u/;"	e
unsupported_platform_headers	Makefile.am	/^unsupported_platform_headers = \\$/;"	m
updateMode	Meter.h	/^   const Meter_UpdateMode updateMode;$/;"	m	struct:MeterClass_	typeref:typename:const Meter_UpdateMode
updateProcessNames	Settings.h	/^   bool updateProcessNames;$/;"	m	struct:Settings_	typeref:typename:bool
updateValues	Meter.h	/^   const Meter_UpdateValues updateValues;$/;"	m	struct:MeterClass_	typeref:typename:const Meter_UpdateValues
updateWeakPanel	IncSet.c	/^static void updateWeakPanel(IncSet* this, Panel* panel, Vector* lines) {$/;"	f	typeref:typename:void	file:
updated	Process.h	/^   bool updated;$/;"	m	struct:Process_	typeref:typename:bool
useColors	htop.c	/^   bool useColors;$/;"	m	struct:CommandLineSettings_	typeref:typename:bool	file:
used	Affinity.h	/^   int used;$/;"	m	struct:Affinity_	typeref:typename:int
usedMem	ProcessList.h	/^   unsigned long long int usedMem;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
usedSwap	ProcessList.h	/^   unsigned long long int usedSwap;$/;"	m	struct:ProcessList_	typeref:typename:unsigned long long int
user	Process.h	/^   char* user;$/;"	m	struct:Process_	typeref:typename:char *
userId	ProcessList.h	/^   uid_t userId;$/;"	m	struct:ProcessList_	typeref:typename:uid_t
userId	htop.c	/^   uid_t userId;$/;"	m	struct:CommandLineSettings_	typeref:typename:uid_t	file:
userPercent	dragonflybsd/DragonFlyBSDProcessList.h	/^   double userPercent;$/;"	m	struct:CPUData_	typeref:typename:double
userPercent	freebsd/FreeBSDProcessList.h	/^   double userPercent;$/;"	m	struct:CPUData_	typeref:typename:double
userPercent	solaris/SolarisProcessList.h	/^   double userPercent;$/;"	m	struct:CPUData_	typeref:typename:double
userPeriod	linux/LinuxProcessList.h	/^   unsigned long long int userPeriod;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
userTime	linux/LinuxProcessList.h	/^   unsigned long long int userTime;$/;"	m	struct:CPUData_	typeref:typename:unsigned long long int
user_threads	darwin/DarwinProcessList.h	/^   uint64_t user_threads;$/;"	m	struct:DarwinProcessList_	typeref:typename:uint64_t
userlandThreads	ProcessList.h	/^   int userlandThreads;$/;"	m	struct:ProcessList_	typeref:typename:int
users	UsersTable.h	/^   Hashtable* users;$/;"	m	struct:UsersTable_	typeref:typename:Hashtable *
usersTable	ProcessList.h	/^   UsersTable* usersTable;$/;"	m	struct:ProcessList_	typeref:typename:UsersTable *
ut	Action.h	/^   UsersTable* ut;$/;"	m	struct:State_	typeref:typename:UsersTable *
utime	darwin/DarwinProcess.h	/^   uint64_t utime;$/;"	m	struct:DarwinProcess_	typeref:typename:uint64_t
utime	linux/LinuxProcess.h	/^   unsigned long long int utime;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned long long int
v	MainPanel.h	/^   void* v;$/;"	m	union:__anond41838d0010a	typeref:typename:void *
value	CheckItem.h	/^   bool value;$/;"	m	struct:CheckItem_	typeref:typename:bool
value	Hashtable.h	/^   void* value;$/;"	m	struct:HashtableItem	typeref:typename:void *
value	ListItem.h	/^   char* value;$/;"	m	struct:ListItem_	typeref:typename:char *
values	Meter.h	/^   double values[METER_BUFFER_LEN];$/;"	m	struct:GraphData_	typeref:typename:double[]
values	Meter.h	/^   double* values;$/;"	m	struct:Meter_	typeref:typename:double *
version	darwin/DarwinProcessList.c	/^    short int version[3];$/;"	m	struct:kern	typeref:typename:short int[3]	file:
vm_stats	darwin/DarwinProcessList.h	/^   vm_statistics_data_t vm_stats;$/;"	m	struct:DarwinProcessList_	typeref:typename:vm_statistics_data_t
vpid	linux/LinuxProcess.h	/^   unsigned int vpid;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned int
vserver	configure.ac	/^AC_ARG_ENABLE(vserver, [AS_HELP_STRING([--enable-vserver], [enable VServer support])], ,enable_v/;"	e
vsize	Process.h	/^   unsigned long int vsize;$/;"	m	struct:Process_	typeref:typename:unsigned long int
vxid	linux/LinuxProcess.h	/^   unsigned int vxid;$/;"	m	struct:LinuxProcess_	typeref:typename:unsigned int
w	Panel.h	/^   int x, y, w, h;$/;"	m	struct:Panel_	typeref:typename:int
wchan	Process.h	/^   unsigned long int wchan;$/;"	m	struct:Process_	typeref:typename:unsigned long int
wextra_flag	configure.ac	/^AC_SUBST(wextra_flag)$/;"	s
window	Panel.h	/^   WINDOW* window;$/;"	m	struct:Panel_	typeref:typename:WINDOW *
writeField	Process.h	/^   const Process_WriteField writeField;$/;"	m	struct:ProcessClass_	typeref:typename:const Process_WriteField
writeFields	Settings.c	/^static void writeFields(FILE* fd, ProcessField* fields, const char* name) {$/;"	f	typeref:typename:void	file:
writeMeterModes	Settings.c	/^static void writeMeterModes(Settings* this, FILE* fd, int column) {$/;"	f	typeref:typename:void	file:
writeMeters	Settings.c	/^static void writeMeters(Settings* this, FILE* fd, int column) {$/;"	f	typeref:typename:void	file:
x	Panel.h	/^   int x, y, w, h;$/;"	m	struct:Panel_	typeref:typename:int
x1	ScreenManager.h	/^   int x1;$/;"	m	struct:ScreenManager_	typeref:typename:int
x2	ScreenManager.h	/^   int x2;$/;"	m	struct:ScreenManager_	typeref:typename:int
xCalloc	XAlloc.c	/^void* xCalloc(size_t nmemb, size_t size) {$/;"	f	typeref:typename:void *
xMalloc	XAlloc.c	/^void* xMalloc(size_t size) {$/;"	f	typeref:typename:void *
xRealloc	XAlloc.c	/^void* xRealloc(void* ptr, size_t size) {$/;"	f	typeref:typename:void *
xSnprintf	XAlloc.c	/^#define xSnprintf(/;"	d	file:
xSnprintf	XAlloc.h	/^#define xSnprintf(/;"	d
xStrdup	XAlloc.c	/^# define xStrdup(/;"	d	file:
xStrdup	XAlloc.h	/^# define xStrdup(/;"	d
xStrdup_	XAlloc.c	/^# define xStrdup_ /;"	d	file:
xStrdup_	XAlloc.c	/^char* xStrdup_(const char* str) {$/;"	f	typeref:typename:char *
xStrdup_	XAlloc.h	/^# define xStrdup_ /;"	d
xread	linux/Battery.c	/^static inline ssize_t xread(int fd, void *buf, size_t count) {$/;"	f	typeref:typename:ssize_t	file:
xread	linux/LinuxProcessList.c	/^static ssize_t xread(int fd, void *buf, size_t count) {$/;"	f	typeref:typename:ssize_t	file:
y	Panel.h	/^   int x, y, w, h;$/;"	m	struct:Panel_	typeref:typename:int
y1	ScreenManager.h	/^   int y1;$/;"	m	struct:ScreenManager_	typeref:typename:int
y2	ScreenManager.h	/^   int y2;$/;"	m	struct:ScreenManager_	typeref:typename:int
y_panelhdr	test_spec.lua	/^local y_panelhdr = (function()$/;"	f
zfsArcEnabled	freebsd/FreeBSDProcessList.h	/^   int zfsArcEnabled;$/;"	m	struct:FreeBSDProcessList_	typeref:typename:int
zname	solaris/SolarisProcess.h	/^   char*      zname;$/;"	m	struct:SolarisProcess_	typeref:typename:char *
zone_errmsg	solaris/SolarisProcessList.h	/^char zone_errmsg[ZONE_ERRMSGLEN];$/;"	v	typeref:typename:char[]
zoneid	solaris/SolarisProcess.h	/^   zoneid_t   zoneid;$/;"	m	struct:SolarisProcess_	typeref:typename:zoneid_t
